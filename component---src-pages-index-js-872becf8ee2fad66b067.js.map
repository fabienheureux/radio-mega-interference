{"version":3,"sources":["webpack:///component---src-pages-index-js-872becf8ee2fad66b067.js","webpack:///./~/react-sound/lib/index.js","webpack:///./~/soundmanager2/script/soundmanager2.js","webpack:///./src/components/Player/index.js","webpack:///./src/components/Player/track.mp3","webpack:///./src/components/Slider.js","webpack:///./src/pages/LaRadio.js","webpack:///./src/pages/LaurentGalandon.js","webpack:///./src/pages/LeProjet.js","webpack:///./src/pages/LesActeurs.js?1d64","webpack:///./src/pages/acteur.jpg?c5af","webpack:///./src/pages/cover.png","webpack:///./src/pages/index.js","webpack:///./src/pages/laurent-galandon.jpg","webpack:///./src/pages/radio-mega-logo.png"],"names":["webpackJsonp","421","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createSound","options","cb","soundManager","ok","createSound","initialized","beginDelayedInit","pendingCalls","push","splice","indexOf","noop","defineProperty","_createClass","defineProperties","target","props","i","length","descriptor","key","protoProps","staticProps","_react","_react2","_propTypes","_propTypes2","window","onready","slice","forEach","playStatuses","PLAYING","STOPPED","PAUSED","Sound","_React$Component","this","getPrototypeOf","apply","arguments","_this2","sound","playStatus","play","removeSound","prevProps","_this3","withSound","playState","paused","resume","stop","pause","playFromPosition","setPosition","position","Math","round","volume","setVolume","url","callback","_this4","that","stopCreatingSound","autoLoad","whileloading","onLoading","whileplaying","onPlaying","onerror","errorCode","description","onError","onload","onLoad","onpause","onPause","onresume","onResume","onstop","onStop","onfinish","loop","onFinishedPlaying","destruct","e","Component","status","propTypes","string","isRequired","oneOf","keys","number","func","bool","defaultProps","437","__WEBPACK_AMD_DEFINE_RESULT__","_undefined","SoundManager","smURL","smID","preferFlashCheck","kind","sm2","preferFlash","hasFlash","ignoreFlash","flash","html5_event","oFn","result","s","_s","_a","id","_wD","type","h5","setupOptions","flashVersion","debugMode","debugFlash","useConsole","consoleOnly","waitForWindowLoad","bgColor","useHighPerformance","flashPollingInterval","html5PollingInterval","flashLoadTimeout","wmode","allowScriptAccess","useFlashBlock","useHTML5Audio","forceUseGlobalHTML5Audio","ignoreMobileRestrictions","html5Test","noSWFCache","idPrefix","defaultOptions","autoPlay","from","loops","onid3","onplay","onposition","multiShot","multiShotEvents","pan","playbackRate","stream","to","usePolicyFile","flash9Options","onfailure","isMovieStar","usePeakData","useWaveformData","useEQData","onbufferchange","ondataerror","movieStarOptions","bufferTime","serverURL","onconnect","duration","audioFormats","mp3","required","mp4","related","ogg","opus","wav","flac","movieID","debugID","debugURLParam","versionNumber","version","movieURL","altURL","swfLoaded","enabled","oMC","sounds","soundIDs","muted","didFlashBlock","filePattern","filePatterns","flash8","flash9","features","buffering","peakData","waveformData","eqData","movieStar","sandbox","types","remote","localWithFile","localWithNetwork","localTrusted","noRemote","noLocal","html5","usingFlash","html5Only","SMSound","doNothing","setProperties","init","fV","debugTS","_wDS","initComplete","mixin","assign","extraOptions","addOnEvent","processOnEvents","initUserOnload","delayWaitForEI","waitForEI","rebootIntoHTML5","setVersionInfo","handleFocus","strings","initMovie","domContentLoaded","winOnLoad","didDCLoaded","getDocument","createMovie","catchError","setPolling","initDebug","disableObject","failSafely","normalizeMovieURL","str","flashBlockHandler","getSWFCSS","swfCSS","toggleDebug","loopFix","policyFix","complain","idCheck","startTimer","stopTimer","timerExecute","parseURL","canIgnoreFlash","featureCheck","html5OK","html5CanPlay","html5ErrorCodes","html5Ext","html5Unload","domContentLoadedIE","testHTML5","event","lastGlobalHTML5URL","detectFlash","badSafariFix","html5_events","showSupport","flushMessages","wrapCallback","didSetup","globalHTML5Audio","sm","smc","ua","navigator","userAgent","wl","location","href","toString","doc","document","on_queue","debugOpen","didAppend","appendSuccess","didInit","disabled","windowLoaded","wdCount","debugLevels","defaultFlashVersion","oRemoved","oRemovedHTML","waitingForEI","initPending","h5TimerCount","h5IntervalTimer","messages","needsFlash","Array","useGlobalHTML5Audio","idCounter","msecScale","is_iDevice","match","isAndroid","isIE","isWebkit","isSafari","isOpera","mobileHTML5","isBadSafari","hasConsole","console","log","isFocused","hasFocus","tryInitOnFocus","okToDisable","flashMIME","emptyURL","emptyWAV","overHTTP","protocol","http","netStreamMimeTypes","netStreamTypes","netStreamPattern","RegExp","join","mimePattern","useAltURL","swfBox","swfDefault","swfError","swfTimedout","swfUnblocked","sm2Debug","highPerf","flashDebug","hasHTML5","Audio","opera","canPlayType","setup","noURL","globalHTML5","ignoreMobile","mobileUA","readyState","setTimeout","supported","getMovie","movie_id","oOptions","_url","make","cs","cs_string","oSound","charAt","_setup_html5","connected","load","destroySound","sID","_bFromSound","oS","_iO","unload","onPosition","nPosition","oMethod","oScope","clearOnPosition","overloaded","start","setPlaybackRate","rate","allowOverride","nMsecOffset","stopAll","hasOwnProperty","pauseAll","resumeAll","togglePause","setPan","nPan","nVol","j","isNaN","mute","String","muteAll","unmute","unmuteAll","toggleMute","getMemoryUse","ram","parseInt","_getMemoryUse","disable","bNoDisable","remove","canPlayMIME","sMIME","canPlayURL","sURL","canPlayLink","oLink","getSoundById","_suppressDebug","sType","ontimeout","_writeDebug","sText","sTypeOrObject","o","oItem","sDID","createElement","className","appendChild","createTextNode","style","fontWeight","color","insertBefore","firstChild","alert","_debug","reboot","resetEvents","excludeInit","k","innerHTML","parentNode","removeChild","fired","reset","getMoviePercent","PercentLoaded","resetProperties","add_html5_events","remove_html5_events","stop_html5_timer","start_html5_timer","attachOnPosition","detachOnPosition","applyFromTo","lastHTML5State","urlOmitted","onplay_called","onPositionItems","onPositionFired","lastURL","time","instanceOptions","isHTML5","id3","loaded","_called_load","_html5_canplay","src","autobuffer","preload","_load","fatal","_unload","_bFromSM","_destroySound","_updatePlayState","fN","allowMulti","a","audioClone","onended","oncanplay","startOK","getAutoPlay","setAutoPlay","substr","lastIndexOf","instanceCount","_oncanplay","_onfinish","currentTime","err","add","max","min","_start","onplayerror","bAll","originalPosition","_onbufferchange","_resetOnPosition","_onTimer","_stop","_setAutoPlay","normalizedRate","message","position1K","offset","toFixed","_setPosition","_bCallFlash","_pause","bInstanceOnly","_setPan","_bInstanceOnly","_setVolume","hasIO","method","scope","_processOnPosition","item","end","f","t","op","retainPosition","_hasTimer","bytesLoaded","bytesTotal","durationEstimate","buffered","left","right","failures","isBuffering","metadata","bForce","isNew","x","_get_html5_duration","_whileplaying","d","Infinity","_apply_loop","nLoops","sameURL","dURL","decodeURI","oEvt","bCapture","addEventListener","_added_events","removeEventListener","_onload","nSuccess","loadOK","_onerror","nIsBuffering","_onsuspend","onsuspend","_onfailure","msg","level","code","_onwarning","onwarning","io_onfinish","_whileloading","nBytesLoaded","nBytesTotal","nDuration","nBufferLength","floor","bufferLength","oPeakData","oWaveformDataLeft","oWaveformDataRight","oEQData","eqLeft","leftPeak","rightPeak","split","leftEQ","rightEQ","_oncaptiondata","oData","captiondata","oncaptiondata","_onmetadata","oMDProps","oMDData","onmetadata","_onid3","oID3Props","oID3Data","_onconnect","bSuccess","_ondataerror","sError","body","getElementsByTagName","getElementById","oMain","oAdd","o2","o1","oParent","hasParent","bonusOptions","Function","getArgs","oArgs","args","len","old","pop","element","shift","evt","abort","canplay","ee","canplaythrough","durationchange","ended","error","loadeddata","_loaded","loadedmetadata","loadstart","playing","fromCharCode","progress","progStr","isProgress","ranges","total","ratechange","suspend","stalled","timeupdate","waiting","iO","oAudio","_called_unload","fileExt","mime","aF","concat","toLowerCase","cp","m","canPlay","isOK","lookup","support","notReady","notOK","domError","spcWmode","swf404","tryDebug","checkSWF","localFail","waitFocus","waitForever","waitSWF","needFunction","badID","currentObj","waitOnload","docLoaded","onloadOK","secNote","badRemove","shutdown","queue","smError","fbTimeout","fbLoaded","fbHandler","manURL","onURL","badFV","as2loop","noNSLoop","needfl9","mfTimeout","needFlash","gotFocus","policy","setupError","setupUndef","setupLate","sm2Loaded","sstr","replace","sOpt","sPre","sMsg","warn","oProp","urlParams","Date","getTime","isDebug","bPolling","bHighPerformance","_setPolling","test","oD","oDebug","oTarget","oToggle","tmp","bottom","width","height","lineHeight","margin","textAlign","border","cursor","background","zIndex","onclick","title","display","e2","Error","errorLevel","oT","sEventType","sMessage","sm2Debugger","handleEvent","css","name","p","ignoreInit","success","srcQueue","canRetry","nP","hasPlugin","n","AX","ActiveXObject","plugins","undefined","mimeTypes","enabledPlugin","flashNeeded","formats","isSpecial","urlResult","setInterval","clearInterval","_setSandboxType","sandboxType","sb","_externalInterfaceOK","swfVersion","initMsg","delimiter","param","oEmbed","oMovie","movieHTML","oEl","sClass","remoteURL","localURL","swfTitle","extraClass","isRTL","html","dir","platform","quality","bgcolor","pluginspage","hasPriority","FlashVars","setAttribute","overflow","top","abs","oninitmovie","loadIncomplete","cleanup","tests","wasTimeout","_externalInterfaceTest","_disableDebug","detachEvent","attachEvent","SM2_DEFER","getInstance","smBuilder","203","_reactSound","_reactSound2","_track","_track2","Player","_Component","_this","handlePlaying","bind","_ref","render","458","204","Slider","71","_taggedTemplateLiteralLoose","raw","_templateObject","_templateObject2","_templateObject3","_styledComponents","_styledComponents2","_Section","_Section2","_radioMegaLogo","_radioMegaLogo2","Div","div","P","Img","img","LaRadio","align","alt","72","_laurentGalandon","_laurentGalandon2","LaurentGalandon","73","LeProjet","74","_templateObject4","_acteur","_acteur2","data","image","Acteur","Name","h3","Acteurs","LesActeurs","map","120","460","207","_gatsbyLink","_Player","_Player2","_Slider","_cover","_LaurentGalandon","_LaurentGalandon2","_LaRadio","_LaRadio2","_LeProjet","_LeProjet2","_LesActeurs","_LesActeurs2","H1","h1","IndexPage","121","122"],"mappings":"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","file":"component---src-pages-index-js-872becf8ee2fad66b067.js","sourcesContent":["webpackJsonp([35783957827783,27162977937149,179121307329026,47673960345471,100058031834292],{\n\n/***/ 421:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _propTypes = __webpack_require__(1);\n\t\n\tvar _propTypes2 = _interopRequireDefault(_propTypes);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar pendingCalls = [];\n\tvar initialized = false;\n\t\n\tvar soundManager = void 0;\n\tif (typeof window !== 'undefined') {\n\t  soundManager = __webpack_require__(437).soundManager;\n\t\n\t  soundManager.onready(function () {\n\t    pendingCalls.slice().forEach(function (cb) {\n\t      return cb();\n\t    });\n\t  });\n\t}\n\t\n\tfunction _createSound(options, cb) {\n\t  if (soundManager.ok()) {\n\t    cb(soundManager.createSound(options));\n\t    return function () {};\n\t  } else {\n\t    if (!initialized) {\n\t      initialized = true;\n\t      soundManager.beginDelayedInit();\n\t    }\n\t\n\t    var call = function call() {\n\t      cb(soundManager.createSound(options));\n\t    };\n\t\n\t    pendingCalls.push(call);\n\t\n\t    return function () {\n\t      pendingCalls.splice(pendingCalls.indexOf(call), 1);\n\t    };\n\t  }\n\t}\n\t\n\tfunction noop() {}\n\t\n\tvar playStatuses = {\n\t  PLAYING: 'PLAYING',\n\t  STOPPED: 'STOPPED',\n\t  PAUSED: 'PAUSED'\n\t};\n\t\n\tvar Sound = function (_React$Component) {\n\t  _inherits(Sound, _React$Component);\n\t\n\t  function Sound() {\n\t    _classCallCheck(this, Sound);\n\t\n\t    return _possibleConstructorReturn(this, (Sound.__proto__ || Object.getPrototypeOf(Sound)).apply(this, arguments));\n\t  }\n\t\n\t  _createClass(Sound, [{\n\t    key: 'componentDidMount',\n\t    value: function componentDidMount() {\n\t      var _this2 = this;\n\t\n\t      this.createSound(function (sound) {\n\t        if (_this2.props.playStatus === playStatuses.PLAYING) {\n\t          sound.play();\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'componentWillUnmount',\n\t    value: function componentWillUnmount() {\n\t      this.removeSound();\n\t    }\n\t  }, {\n\t    key: 'componentDidUpdate',\n\t    value: function componentDidUpdate(prevProps) {\n\t      var _this3 = this;\n\t\n\t      var withSound = function withSound(sound) {\n\t        if (!sound) {\n\t          return;\n\t        }\n\t\n\t        if (_this3.props.playStatus === playStatuses.PLAYING) {\n\t          if (sound.playState === 0) {\n\t            sound.play();\n\t          }\n\t\n\t          if (sound.paused) {\n\t            sound.resume();\n\t          }\n\t        } else if (_this3.props.playStatus === playStatuses.STOPPED) {\n\t          if (sound.playState !== 0) {\n\t            sound.stop();\n\t          }\n\t        } else {\n\t          // this.props.playStatus === playStatuses.PAUSED\n\t          if (!sound.paused) {\n\t            sound.pause();\n\t          }\n\t        }\n\t\n\t        if (_this3.props.playFromPosition !== prevProps.playFromPosition) {\n\t          sound.setPosition(_this3.props.playFromPosition);\n\t        }\n\t\n\t        if (_this3.props.position != null) {\n\t          if (sound.position !== _this3.props.position && Math.round(sound.position) !== Math.round(_this3.props.position)) {\n\t\n\t            sound.setPosition(_this3.props.position);\n\t          }\n\t        }\n\t\n\t        if (_this3.props.volume !== prevProps.volume) {\n\t          sound.setVolume(_this3.props.volume);\n\t        }\n\t      };\n\t\n\t      if (this.props.url !== prevProps.url) {\n\t        this.createSound(withSound);\n\t      } else {\n\t        withSound(this.sound);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'createSound',\n\t    value: function createSound(callback) {\n\t      var _this4 = this;\n\t\n\t      this.removeSound();\n\t\n\t      var props = this.props;\n\t      var that = this;\n\t\n\t      if (!props.url) {\n\t        return;\n\t      }\n\t\n\t      this.stopCreatingSound = _createSound({\n\t        url: this.props.url,\n\t        autoLoad: props.autoLoad,\n\t        volume: props.volume,\n\t        position: this.props.playFromPosition || this.props.position || 0,\n\t        whileloading: function whileloading() {\n\t          props.onLoading(this);\n\t        },\n\t        whileplaying: function whileplaying() {\n\t          props.onPlaying(this);\n\t        },\n\t        onerror: function onerror(errorCode, description) {\n\t          props.onError(errorCode, description, this);\n\t        },\n\t        onload: function onload() {\n\t          props.onLoad(this);\n\t        },\n\t        onpause: function onpause() {\n\t          props.onPause(this);\n\t        },\n\t        onresume: function onresume() {\n\t          props.onResume(this);\n\t        },\n\t        onstop: function onstop() {\n\t          props.onStop(this);\n\t        },\n\t        onfinish: function onfinish() {\n\t          if (that.props.loop && that.props.playStatus === playStatuses.PLAYING) {\n\t            that.sound.play();\n\t          } else {\n\t            props.onFinishedPlaying();\n\t          }\n\t        }\n\t      }, function (sound) {\n\t        _this4.sound = sound;\n\t        callback(sound);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'removeSound',\n\t    value: function removeSound() {\n\t      if (this.stopCreatingSound) {\n\t        this.stopCreatingSound();\n\t        delete this.stopCreatingSound;\n\t      }\n\t\n\t      if (this.sound) {\n\t        try {\n\t          this.sound.destruct();\n\t        } catch (e) {} // eslint-disable-line\n\t\n\t        delete this.sound;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'render',\n\t    value: function render() {\n\t      return null;\n\t    }\n\t  }]);\n\t\n\t  return Sound;\n\t}(_react2.default.Component);\n\t\n\tSound.status = playStatuses;\n\tSound.propTypes = {\n\t  url: _propTypes2.default.string.isRequired,\n\t  playStatus: _propTypes2.default.oneOf(Object.keys(playStatuses)).isRequired,\n\t  position: _propTypes2.default.number,\n\t  playFromPosition: _propTypes2.default.number,\n\t  volume: _propTypes2.default.number,\n\t  onError: _propTypes2.default.func,\n\t  onLoading: _propTypes2.default.func,\n\t  onLoad: _propTypes2.default.func,\n\t  onPlaying: _propTypes2.default.func,\n\t  onPause: _propTypes2.default.func,\n\t  onResume: _propTypes2.default.func,\n\t  onStop: _propTypes2.default.func,\n\t  onFinishedPlaying: _propTypes2.default.func,\n\t  autoLoad: _propTypes2.default.bool,\n\t  loop: _propTypes2.default.bool\n\t};\n\tSound.defaultProps = {\n\t  playFromPosition: 0,\n\t  volume: 100,\n\t  onError: noop,\n\t  onLoading: noop,\n\t  onPlaying: noop,\n\t  onLoad: noop,\n\t  onPause: noop,\n\t  onResume: noop,\n\t  onStop: noop,\n\t  onFinishedPlaying: noop,\n\t  autoLoad: false,\n\t  loop: false\n\t};\n\texports.default = Sound;\n\n/***/ }),\n\n/***/ 437:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/** @license\r\n\t *\r\n\t * SoundManager 2: JavaScript Sound for the Web\r\n\t * ----------------------------------------------\r\n\t * http://schillmania.com/projects/soundmanager2/\r\n\t *\r\n\t * Copyright (c) 2007, Scott Schiller. All rights reserved.\r\n\t * Code provided under the BSD License:\r\n\t * http://schillmania.com/projects/soundmanager2/license.txt\r\n\t *\r\n\t * V2.97a.20170601\r\n\t */\r\n\t\r\n\t/**\r\n\t * About this file\r\n\t * -------------------------------------------------------------------------------------\r\n\t * This is the fully-commented source version of the SoundManager 2 API,\r\n\t * recommended for use during development and testing.\r\n\t *\r\n\t * See soundmanager2-nodebug-jsmin.js for an optimized build (~11KB with gzip.)\r\n\t * http://schillmania.com/projects/soundmanager2/doc/getstarted/#basic-inclusion\r\n\t * Alternately, serve this file with gzip for 75% compression savings (~30KB over HTTP.)\r\n\t *\r\n\t * You may notice <d> and </d> comments in this source; these are delimiters for\r\n\t * debug blocks which are removed in the -nodebug builds, further optimizing code size.\r\n\t *\r\n\t * Also, as you may note: Whoa, reliable cross-platform/device audio support is hard! ;)\r\n\t */\r\n\t\r\n\t(function SM2(window, _undefined) {\r\n\t\r\n\t/* global Audio, document, window, navigator, define, module, SM2_DEFER, opera, setTimeout, setInterval, clearTimeout, sm2Debugger */\r\n\t\r\n\t'use strict';\r\n\t\r\n\tif (!window || !window.document) {\r\n\t\r\n\t  // Don't cross the [environment] streams. SM2 expects to be running in a browser, not under node.js etc.\r\n\t  // Additionally, if a browser somehow manages to fail this test, as Egon said: \"It would be bad.\"\r\n\t\r\n\t  throw new Error('SoundManager requires a browser with window and document objects.');\r\n\t\r\n\t}\r\n\t\r\n\tvar soundManager = null;\r\n\t\r\n\t/**\r\n\t * The SoundManager constructor.\r\n\t *\r\n\t * @constructor\r\n\t * @param {string} smURL Optional: Path to SWF files\r\n\t * @param {string} smID Optional: The ID to use for the SWF container element\r\n\t * @this {SoundManager}\r\n\t * @return {SoundManager} The new SoundManager instance\r\n\t */\r\n\t\r\n\tfunction SoundManager(smURL, smID) {\r\n\t\r\n\t  /**\r\n\t   * soundManager configuration options list\r\n\t   * defines top-level configuration properties to be applied to the soundManager instance (eg. soundManager.flashVersion)\r\n\t   * to set these properties, use the setup() method - eg., soundManager.setup({url: '/swf/', flashVersion: 9})\r\n\t   */\r\n\t\r\n\t  this.setupOptions = {\r\n\t\r\n\t    url: (smURL || null),             // path (directory) where SoundManager 2 SWFs exist, eg., /path/to/swfs/\r\n\t    flashVersion: 8,                  // flash build to use (8 or 9.) Some API features require 9.\r\n\t    debugMode: true,                  // enable debugging output (console.log() with HTML fallback)\r\n\t    debugFlash: false,                // enable debugging output inside SWF, troubleshoot Flash/browser issues\r\n\t    useConsole: true,                 // use console.log() if available (otherwise, writes to #soundmanager-debug element)\r\n\t    consoleOnly: true,                // if console is being used, do not create/write to #soundmanager-debug\r\n\t    waitForWindowLoad: false,         // force SM2 to wait for window.onload() before trying to call soundManager.onload()\r\n\t    bgColor: '#ffffff',               // SWF background color. N/A when wmode = 'transparent'\r\n\t    useHighPerformance: false,        // position:fixed flash movie can help increase js/flash speed, minimize lag\r\n\t    flashPollingInterval: null,       // msec affecting whileplaying/loading callback frequency. If null, default of 50 msec is used.\r\n\t    html5PollingInterval: null,       // msec affecting whileplaying() for HTML5 audio, excluding mobile devices. If null, native HTML5 update events are used.\r\n\t    flashLoadTimeout: 1000,           // msec to wait for flash movie to load before failing (0 = infinity)\r\n\t    wmode: null,                      // flash rendering mode - null, 'transparent', or 'opaque' (last two allow z-index to work)\r\n\t    allowScriptAccess: 'always',      // for scripting the SWF (object/embed property), 'always' or 'sameDomain'\r\n\t    useFlashBlock: false,             // *requires flashblock.css, see demos* - allow recovery from flash blockers. Wait indefinitely and apply timeout CSS to SWF, if applicable.\r\n\t    useHTML5Audio: true,              // use HTML5 Audio() where API is supported (most Safari, Chrome versions), Firefox (MP3/MP4 support varies.) Ideally, transparent vs. Flash API where possible.\r\n\t    forceUseGlobalHTML5Audio: false,  // if true, a single Audio() object is used for all sounds - and only one can play at a time.\r\n\t    ignoreMobileRestrictions: false,  // if true, SM2 will not apply global HTML5 audio rules to mobile UAs. iOS > 7 and WebViews may allow multiple Audio() instances.\r\n\t    html5Test: /^(probably|maybe)$/i, // HTML5 Audio() format support test. Use /^probably$/i; if you want to be more conservative.\r\n\t    preferFlash: false,               // overrides useHTML5audio, will use Flash for MP3/MP4/AAC if present. Potential option if HTML5 playback with these formats is quirky.\r\n\t    noSWFCache: false,                // if true, appends ?ts={date} to break aggressive SWF caching.\r\n\t    idPrefix: 'sound'                 // if an id is not provided to createSound(), this prefix is used for generated IDs - 'sound0', 'sound1' etc.\r\n\t\r\n\t  };\r\n\t\r\n\t  this.defaultOptions = {\r\n\t\r\n\t    /**\r\n\t     * the default configuration for sound objects made with createSound() and related methods\r\n\t     * eg., volume, auto-load behaviour and so forth\r\n\t     */\r\n\t\r\n\t    autoLoad: false,        // enable automatic loading (otherwise .load() will be called on demand with .play(), the latter being nicer on bandwidth - if you want to .load yourself, you also can)\r\n\t    autoPlay: false,        // enable playing of file as soon as possible (much faster if \"stream\" is true)\r\n\t    from: null,             // position to start playback within a sound (msec), default = beginning\r\n\t    loops: 1,               // how many times to repeat the sound (position will wrap around to 0, setPosition() will break out of loop when >0)\r\n\t    onid3: null,            // callback function for \"ID3 data is added/available\"\r\n\t    onerror: null,          // callback function for \"load failed\" (or, playback/network/decode error under HTML5.)\r\n\t    onload: null,           // callback function for \"load finished\"\r\n\t    whileloading: null,     // callback function for \"download progress update\" (X of Y bytes received)\r\n\t    onplay: null,           // callback for \"play\" start\r\n\t    onpause: null,          // callback for \"pause\"\r\n\t    onresume: null,         // callback for \"resume\" (pause toggle)\r\n\t    whileplaying: null,     // callback during play (position update)\r\n\t    onposition: null,       // object containing times and function callbacks for positions of interest\r\n\t    onstop: null,           // callback for \"user stop\"\r\n\t    onfinish: null,         // callback function for \"sound finished playing\"\r\n\t    multiShot: true,        // let sounds \"restart\" or layer on top of each other when played multiple times, rather than one-shot/one at a time\r\n\t    multiShotEvents: false, // fire multiple sound events (currently onfinish() only) when multiShot is enabled\r\n\t    position: null,         // offset (milliseconds) to seek to within loaded sound data.\r\n\t    pan: 0,                 // \"pan\" settings, left-to-right, -100 to 100\r\n\t    playbackRate: 1,        // rate at which to play the sound (HTML5-only)\r\n\t    stream: true,           // allows playing before entire file has loaded (recommended)\r\n\t    to: null,               // position to end playback within a sound (msec), default = end\r\n\t    type: null,             // MIME-like hint for file pattern / canPlay() tests, eg. audio/mp3\r\n\t    usePolicyFile: false,   // enable crossdomain.xml request for audio on remote domains (for ID3/waveform access)\r\n\t    volume: 100             // self-explanatory. 0-100, the latter being the max.\r\n\t\r\n\t  };\r\n\t\r\n\t  this.flash9Options = {\r\n\t\r\n\t    /**\r\n\t     * flash 9-only options,\r\n\t     * merged into defaultOptions if flash 9 is being used\r\n\t     */\r\n\t\r\n\t    onfailure: null,        // callback function for when playing fails (Flash 9, MovieStar + RTMP-only)\r\n\t    isMovieStar: null,      // \"MovieStar\" MPEG4 audio mode. Null (default) = auto detect MP4, AAC etc. based on URL. true = force on, ignore URL\r\n\t    usePeakData: false,     // enable left/right channel peak (level) data\r\n\t    useWaveformData: false, // enable sound spectrum (raw waveform data) - NOTE: May increase CPU load.\r\n\t    useEQData: false,       // enable sound EQ (frequency spectrum data) - NOTE: May increase CPU load.\r\n\t    onbufferchange: null,   // callback for \"isBuffering\" property change\r\n\t    ondataerror: null       // callback for waveform/eq data access error (flash playing audio in other tabs/domains)\r\n\t\r\n\t  };\r\n\t\r\n\t  this.movieStarOptions = {\r\n\t\r\n\t    /**\r\n\t     * flash 9.0r115+ MPEG4 audio options,\r\n\t     * merged into defaultOptions if flash 9+movieStar mode is enabled\r\n\t     */\r\n\t\r\n\t    bufferTime: 3,          // seconds of data to buffer before playback begins (null = flash default of 0.1 seconds - if AAC playback is gappy, try increasing.)\r\n\t    serverURL: null,        // rtmp: FMS or FMIS server to connect to, required when requesting media via RTMP or one of its variants\r\n\t    onconnect: null,        // rtmp: callback for connection to flash media server\r\n\t    duration: null          // rtmp: song duration (msec)\r\n\t\r\n\t  };\r\n\t\r\n\t  this.audioFormats = {\r\n\t\r\n\t    /**\r\n\t     * determines HTML5 support + flash requirements.\r\n\t     * if no support (via flash and/or HTML5) for a \"required\" format, SM2 will fail to start.\r\n\t     * flash fallback is used for MP3 or MP4 if HTML5 can't play it (or if preferFlash = true)\r\n\t     */\r\n\t\r\n\t    mp3: {\r\n\t      type: ['audio/mpeg; codecs=\"mp3\"', 'audio/mpeg', 'audio/mp3', 'audio/MPA', 'audio/mpa-robust'],\r\n\t      required: true\r\n\t    },\r\n\t\r\n\t    mp4: {\r\n\t      related: ['aac', 'm4a', 'm4b'], // additional formats under the MP4 container\r\n\t      type: ['audio/mp4; codecs=\"mp4a.40.2\"', 'audio/aac', 'audio/x-m4a', 'audio/MP4A-LATM', 'audio/mpeg4-generic'],\r\n\t      required: false\r\n\t    },\r\n\t\r\n\t    ogg: {\r\n\t      type: ['audio/ogg; codecs=vorbis'],\r\n\t      required: false\r\n\t    },\r\n\t\r\n\t    opus: {\r\n\t      type: ['audio/ogg; codecs=opus', 'audio/opus'],\r\n\t      required: false\r\n\t    },\r\n\t\r\n\t    wav: {\r\n\t      type: ['audio/wav; codecs=\"1\"', 'audio/wav', 'audio/wave', 'audio/x-wav'],\r\n\t      required: false\r\n\t    },\r\n\t\r\n\t    flac: {\r\n\t      type: ['audio/flac'],\r\n\t      required: false\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  // HTML attributes (id + class names) for the SWF container\r\n\t\r\n\t  this.movieID = 'sm2-container';\r\n\t  this.id = (smID || 'sm2movie');\r\n\t\r\n\t  this.debugID = 'soundmanager-debug';\r\n\t  this.debugURLParam = /([#?&])debug=1/i;\r\n\t\r\n\t  // dynamic attributes\r\n\t\r\n\t  this.versionNumber = 'V2.97a.20170601';\r\n\t  this.version = null;\r\n\t  this.movieURL = null;\r\n\t  this.altURL = null;\r\n\t  this.swfLoaded = false;\r\n\t  this.enabled = false;\r\n\t  this.oMC = null;\r\n\t  this.sounds = {};\r\n\t  this.soundIDs = [];\r\n\t  this.muted = false;\r\n\t  this.didFlashBlock = false;\r\n\t  this.filePattern = null;\r\n\t\r\n\t  this.filePatterns = {\r\n\t    flash8: /\\.mp3(\\?.*)?$/i,\r\n\t    flash9: /\\.mp3(\\?.*)?$/i\r\n\t  };\r\n\t\r\n\t  // support indicators, set at init\r\n\t\r\n\t  this.features = {\r\n\t    buffering: false,\r\n\t    peakData: false,\r\n\t    waveformData: false,\r\n\t    eqData: false,\r\n\t    movieStar: false\r\n\t  };\r\n\t\r\n\t  // flash sandbox info, used primarily in troubleshooting\r\n\t\r\n\t  this.sandbox = {\r\n\t    // <d>\r\n\t    type: null,\r\n\t    types: {\r\n\t      remote: 'remote (domain-based) rules',\r\n\t      localWithFile: 'local with file access (no internet access)',\r\n\t      localWithNetwork: 'local with network (internet access only, no local access)',\r\n\t      localTrusted: 'local, trusted (local+internet access)'\r\n\t    },\r\n\t    description: null,\r\n\t    noRemote: null,\r\n\t    noLocal: null\r\n\t    // </d>\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * format support (html5/flash)\r\n\t   * stores canPlayType() results based on audioFormats.\r\n\t   * eg. { mp3: boolean, mp4: boolean }\r\n\t   * treat as read-only.\r\n\t   */\r\n\t\r\n\t  this.html5 = {\r\n\t    usingFlash: null // set if/when flash fallback is needed\r\n\t  };\r\n\t\r\n\t  // file type support hash\r\n\t  this.flash = {};\r\n\t\r\n\t  // determined at init time\r\n\t  this.html5Only = false;\r\n\t\r\n\t  // used for special cases (eg. iPad/iPhone/palm OS?)\r\n\t  this.ignoreFlash = false;\r\n\t\r\n\t  /**\r\n\t   * a few private internals (OK, a lot. :D)\r\n\t   */\r\n\t\r\n\t  var SMSound,\r\n\t  sm2 = this, globalHTML5Audio = null, flash = null, sm = 'soundManager', smc = sm + ': ', h5 = 'HTML5::', id, ua = navigator.userAgent, wl = window.location.href.toString(), doc = document, doNothing, setProperties, init, fV, on_queue = [], debugOpen = true, debugTS, didAppend = false, appendSuccess = false, didInit = false, disabled = false, windowLoaded = false, _wDS, wdCount = 0, initComplete, mixin, assign, extraOptions, addOnEvent, processOnEvents, initUserOnload, delayWaitForEI, waitForEI, rebootIntoHTML5, setVersionInfo, handleFocus, strings, initMovie, domContentLoaded, winOnLoad, didDCLoaded, getDocument, createMovie, catchError, setPolling, initDebug, debugLevels = ['log', 'info', 'warn', 'error'], defaultFlashVersion = 8, disableObject, failSafely, normalizeMovieURL, oRemoved = null, oRemovedHTML = null, str, flashBlockHandler, getSWFCSS, swfCSS, toggleDebug, loopFix, policyFix, complain, idCheck, waitingForEI = false, initPending = false, startTimer, stopTimer, timerExecute, h5TimerCount = 0, h5IntervalTimer = null, parseURL, messages = [],\r\n\t  canIgnoreFlash, needsFlash = null, featureCheck, html5OK, html5CanPlay, html5ErrorCodes, html5Ext, html5Unload, domContentLoadedIE, testHTML5, event, slice = Array.prototype.slice, useGlobalHTML5Audio = false, lastGlobalHTML5URL, hasFlash, detectFlash, badSafariFix, html5_events, showSupport, flushMessages, wrapCallback, idCounter = 0, didSetup, msecScale = 1000,\r\n\t  is_iDevice = ua.match(/(ipad|iphone|ipod)/i), isAndroid = ua.match(/android/i), isIE = ua.match(/msie|trident/i),\r\n\t  isWebkit = ua.match(/webkit/i),\r\n\t  isSafari = (ua.match(/safari/i) && !ua.match(/chrome/i)),\r\n\t  isOpera = (ua.match(/opera/i)),\r\n\t  mobileHTML5 = (ua.match(/(mobile|pre\\/|xoom)/i) || is_iDevice || isAndroid),\r\n\t  isBadSafari = (!wl.match(/usehtml5audio/i) && !wl.match(/sm2-ignorebadua/i) && isSafari && !ua.match(/silk/i) && ua.match(/OS\\sX\\s10_6_([3-7])/i)), // Safari 4 and 5 (excluding Kindle Fire, \"Silk\") occasionally fail to load/play HTML5 audio on Snow Leopard 10.6.3 through 10.6.7 due to bug(s) in QuickTime X and/or other underlying frameworks. :/ Confirmed bug. https://bugs.webkit.org/show_bug.cgi?id=32159\r\n\t  hasConsole = (window.console !== _undefined && console.log !== _undefined),\r\n\t  isFocused = (doc.hasFocus !== _undefined ? doc.hasFocus() : null),\r\n\t  tryInitOnFocus = (isSafari && (doc.hasFocus === _undefined || !doc.hasFocus())),\r\n\t  okToDisable = !tryInitOnFocus,\r\n\t  flashMIME = /(mp3|mp4|mpa|m4a|m4b)/i,\r\n\t  emptyURL = 'about:blank', // safe URL to unload, or load nothing from (flash 8 + most HTML5 UAs)\r\n\t  emptyWAV = 'data:audio/wave;base64,/UklGRiYAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQIAAAD//w==', // tiny WAV for HTML5 unloading\r\n\t  overHTTP = (doc.location ? doc.location.protocol.match(/http/i) : null),\r\n\t  http = (!overHTTP ? '//' : ''),\r\n\t  // mp3, mp4, aac etc.\r\n\t  netStreamMimeTypes = /^\\s*audio\\/(?:x-)?(?:mpeg4|aac|flv|mov|mp4|m4v|m4a|m4b|mp4v|3gp|3g2)\\s*(?:$|;)/i,\r\n\t  // Flash v9.0r115+ \"moviestar\" formats\r\n\t  netStreamTypes = ['mpeg4', 'aac', 'flv', 'mov', 'mp4', 'm4v', 'f4v', 'm4a', 'm4b', 'mp4v', '3gp', '3g2'],\r\n\t  netStreamPattern = new RegExp('\\\\.(' + netStreamTypes.join('|') + ')(\\\\?.*)?$', 'i');\r\n\t\r\n\t  this.mimePattern = /^\\s*audio\\/(?:x-)?(?:mp(?:eg|3))\\s*(?:$|;)/i; // default mp3 set\r\n\t\r\n\t  // use altURL if not \"online\"\r\n\t  this.useAltURL = !overHTTP;\r\n\t\r\n\t  swfCSS = {\r\n\t    swfBox: 'sm2-object-box',\r\n\t    swfDefault: 'movieContainer',\r\n\t    swfError: 'swf_error', // SWF loaded, but SM2 couldn't start (other error)\r\n\t    swfTimedout: 'swf_timedout',\r\n\t    swfLoaded: 'swf_loaded',\r\n\t    swfUnblocked: 'swf_unblocked', // or loaded OK\r\n\t    sm2Debug: 'sm2_debug',\r\n\t    highPerf: 'high_performance',\r\n\t    flashDebug: 'flash_debug'\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * HTML5 error codes, per W3C\r\n\t   * Error code 1, MEDIA_ERR_ABORTED: Client aborted download at user's request.\r\n\t   * Error code 2, MEDIA_ERR_NETWORK: A network error of some description caused the user agent to stop fetching the media resource, after the resource was established to be usable.\r\n\t   * Error code 3, MEDIA_ERR_DECODE: An error of some description occurred while decoding the media resource, after the resource was established to be usable.\r\n\t   * Error code 4, MEDIA_ERR_SRC_NOT_SUPPORTED: Media (audio file) not supported (\"not usable.\")\r\n\t   * Reference: https://html.spec.whatwg.org/multipage/embedded-content.html#error-codes\r\n\t   */\r\n\t  html5ErrorCodes = [\r\n\t    null,\r\n\t    'MEDIA_ERR_ABORTED',\r\n\t    'MEDIA_ERR_NETWORK',\r\n\t    'MEDIA_ERR_DECODE',\r\n\t    'MEDIA_ERR_SRC_NOT_SUPPORTED'\r\n\t  ];\r\n\t\r\n\t  /**\r\n\t   * basic HTML5 Audio() support test\r\n\t   * try...catch because of IE 9 \"not implemented\" nonsense\r\n\t   * https://github.com/Modernizr/Modernizr/issues/224\r\n\t   */\r\n\t\r\n\t  this.hasHTML5 = (function() {\r\n\t    try {\r\n\t      // new Audio(null) for stupid Opera 9.64 case, which throws not_enough_arguments exception otherwise.\r\n\t      return (Audio !== _undefined && (isOpera && opera !== _undefined && opera.version() < 10 ? new Audio(null) : new Audio()).canPlayType !== _undefined);\r\n\t    } catch(e) {\r\n\t      return false;\r\n\t    }\r\n\t  }());\r\n\t\r\n\t  /**\r\n\t   * Public SoundManager API\r\n\t   * -----------------------\r\n\t   */\r\n\t\r\n\t  /**\r\n\t   * Configures top-level soundManager properties.\r\n\t   *\r\n\t   * @param {object} options Option parameters, eg. { flashVersion: 9, url: '/path/to/swfs/' }\r\n\t   * onready and ontimeout are also accepted parameters. call soundManager.setup() to see the full list.\r\n\t   */\r\n\t\r\n\t  this.setup = function(options) {\r\n\t\r\n\t    var noURL = (!sm2.url);\r\n\t\r\n\t    // warn if flash options have already been applied\r\n\t\r\n\t    if (options !== _undefined && didInit && needsFlash && sm2.ok() && (options.flashVersion !== _undefined || options.url !== _undefined || options.html5Test !== _undefined)) {\r\n\t      complain(str('setupLate'));\r\n\t    }\r\n\t\r\n\t    // TODO: defer: true?\r\n\t\r\n\t    assign(options);\r\n\t\r\n\t    if (!useGlobalHTML5Audio) {\r\n\t\r\n\t      if (mobileHTML5) {\r\n\t\r\n\t        // force the singleton HTML5 pattern on mobile, by default.\r\n\t        if (!sm2.setupOptions.ignoreMobileRestrictions || sm2.setupOptions.forceUseGlobalHTML5Audio) {\r\n\t          messages.push(strings.globalHTML5);\r\n\t          useGlobalHTML5Audio = true;\r\n\t        }\r\n\t\r\n\t      } else if (sm2.setupOptions.forceUseGlobalHTML5Audio) {\r\n\t\r\n\t        // only apply singleton HTML5 on desktop if forced.\r\n\t        messages.push(strings.globalHTML5);\r\n\t        useGlobalHTML5Audio = true;\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    if (!didSetup && mobileHTML5) {\r\n\t\r\n\t      if (sm2.setupOptions.ignoreMobileRestrictions) {\r\n\t\r\n\t        messages.push(strings.ignoreMobile);\r\n\t\r\n\t      } else {\r\n\t\r\n\t        // prefer HTML5 for mobile + tablet-like devices, probably more reliable vs. flash at this point.\r\n\t\r\n\t        // <d>\r\n\t        if (!sm2.setupOptions.useHTML5Audio || sm2.setupOptions.preferFlash) {\r\n\t          // notify that defaults are being changed.\r\n\t          sm2._wD(strings.mobileUA);\r\n\t        }\r\n\t        // </d>\r\n\t\r\n\t        sm2.setupOptions.useHTML5Audio = true;\r\n\t        sm2.setupOptions.preferFlash = false;\r\n\t\r\n\t        if (is_iDevice) {\r\n\t\r\n\t          // no flash here.\r\n\t          sm2.ignoreFlash = true;\r\n\t\r\n\t        } else if ((isAndroid && !ua.match(/android\\s2\\.3/i)) || !isAndroid) {\r\n\t\r\n\t          /**\r\n\t           * Android devices tend to work better with a single audio instance, specifically for chained playback of sounds in sequence.\r\n\t           * Common use case: exiting sound onfinish() -> createSound() -> play()\r\n\t           * Presuming similar restrictions for other mobile, non-Android, non-iOS devices.\r\n\t           */\r\n\t\r\n\t          // <d>\r\n\t          sm2._wD(strings.globalHTML5);\r\n\t          // </d>\r\n\t\r\n\t          useGlobalHTML5Audio = true;\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    // special case 1: \"Late setup\". SM2 loaded normally, but user didn't assign flash URL eg., setup({url:...}) before SM2 init. Treat as delayed init.\r\n\t\r\n\t    if (options) {\r\n\t\r\n\t      if (noURL && didDCLoaded && options.url !== _undefined) {\r\n\t        sm2.beginDelayedInit();\r\n\t      }\r\n\t\r\n\t      // special case 2: If lazy-loading SM2 (DOMContentLoaded has already happened) and user calls setup() with url: parameter, try to init ASAP.\r\n\t\r\n\t      if (!didDCLoaded && options.url !== _undefined && doc.readyState === 'complete') {\r\n\t        setTimeout(domContentLoaded, 1);\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    didSetup = true;\r\n\t\r\n\t    return sm2;\r\n\t\r\n\t  };\r\n\t\r\n\t  this.ok = function() {\r\n\t\r\n\t    return (needsFlash ? (didInit && !disabled) : (sm2.useHTML5Audio && sm2.hasHTML5));\r\n\t\r\n\t  };\r\n\t\r\n\t  this.supported = this.ok; // legacy\r\n\t\r\n\t  this.getMovie = function(movie_id) {\r\n\t\r\n\t    // safety net: some old browsers differ on SWF references, possibly related to ExternalInterface / flash version\r\n\t    return id(movie_id) || doc[movie_id] || window[movie_id];\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Creates a SMSound sound object instance. Can also be overloaded, e.g., createSound('mySound', '/some.mp3');\r\n\t   *\r\n\t   * @param {object} oOptions Sound options (at minimum, url parameter is required.)\r\n\t   * @return {object} SMSound The new SMSound object.\r\n\t   */\r\n\t\r\n\t  this.createSound = function(oOptions, _url) {\r\n\t\r\n\t    var cs, cs_string, options, oSound = null;\r\n\t\r\n\t    // <d>\r\n\t    cs = sm + '.createSound(): ';\r\n\t    cs_string = cs + str(!didInit ? 'notReady' : 'notOK');\r\n\t    // </d>\r\n\t\r\n\t    if (!didInit || !sm2.ok()) {\r\n\t      complain(cs_string);\r\n\t      return false;\r\n\t    }\r\n\t\r\n\t    if (_url !== _undefined) {\r\n\t      // function overloading in JS! :) ... assume simple createSound(id, url) use case.\r\n\t      oOptions = {\r\n\t        id: oOptions,\r\n\t        url: _url\r\n\t      };\r\n\t    }\r\n\t\r\n\t    // inherit from defaultOptions\r\n\t    options = mixin(oOptions);\r\n\t\r\n\t    options.url = parseURL(options.url);\r\n\t\r\n\t    // generate an id, if needed.\r\n\t    if (options.id === _undefined) {\r\n\t      options.id = sm2.setupOptions.idPrefix + (idCounter++);\r\n\t    }\r\n\t\r\n\t    // <d>\r\n\t    if (options.id.toString().charAt(0).match(/^[0-9]$/)) {\r\n\t      sm2._wD(cs + str('badID', options.id), 2);\r\n\t    }\r\n\t\r\n\t    sm2._wD(cs + options.id + (options.url ? ' (' + options.url + ')' : ''), 1);\r\n\t    // </d>\r\n\t\r\n\t    if (idCheck(options.id, true)) {\r\n\t      sm2._wD(cs + options.id + ' exists', 1);\r\n\t      return sm2.sounds[options.id];\r\n\t    }\r\n\t\r\n\t    function make() {\r\n\t\r\n\t      options = loopFix(options);\r\n\t      sm2.sounds[options.id] = new SMSound(options);\r\n\t      sm2.soundIDs.push(options.id);\r\n\t      return sm2.sounds[options.id];\r\n\t\r\n\t    }\r\n\t\r\n\t    if (html5OK(options)) {\r\n\t\r\n\t      oSound = make();\r\n\t      // <d>\r\n\t      if (!sm2.html5Only) {\r\n\t        sm2._wD(options.id + ': Using HTML5');\r\n\t      }\r\n\t      // </d>\r\n\t      oSound._setup_html5(options);\r\n\t\r\n\t    } else {\r\n\t\r\n\t      if (sm2.html5Only) {\r\n\t        sm2._wD(options.id + ': No HTML5 support for this sound, and no Flash. Exiting.');\r\n\t        return make();\r\n\t      }\r\n\t\r\n\t      // TODO: Move HTML5/flash checks into generic URL parsing/handling function.\r\n\t\r\n\t      if (sm2.html5.usingFlash && options.url && options.url.match(/data:/i)) {\r\n\t        // data: URIs not supported by Flash, either.\r\n\t        sm2._wD(options.id + ': data: URIs not supported via Flash. Exiting.');\r\n\t        return make();\r\n\t      }\r\n\t\r\n\t      if (fV > 8) {\r\n\t        if (options.isMovieStar === null) {\r\n\t          // attempt to detect MPEG-4 formats\r\n\t          options.isMovieStar = !!(options.serverURL || (options.type ? options.type.match(netStreamMimeTypes) : false) || (options.url && options.url.match(netStreamPattern)));\r\n\t        }\r\n\t        // <d>\r\n\t        if (options.isMovieStar) {\r\n\t          sm2._wD(cs + 'using MovieStar handling');\r\n\t          if (options.loops > 1) {\r\n\t            _wDS('noNSLoop');\r\n\t          }\r\n\t        }\r\n\t        // </d>\r\n\t      }\r\n\t\r\n\t      options = policyFix(options, cs);\r\n\t      oSound = make();\r\n\t\r\n\t      if (fV === 8) {\r\n\t        flash._createSound(options.id, options.loops || 1, options.usePolicyFile);\r\n\t      } else {\r\n\t        flash._createSound(options.id, options.url, options.usePeakData, options.useWaveformData, options.useEQData, options.isMovieStar, (options.isMovieStar ? options.bufferTime : false), options.loops || 1, options.serverURL, options.duration || null, options.autoPlay, true, options.autoLoad, options.usePolicyFile);\r\n\t        if (!options.serverURL) {\r\n\t          // We are connected immediately\r\n\t          oSound.connected = true;\r\n\t          if (options.onconnect) {\r\n\t            options.onconnect.apply(oSound);\r\n\t          }\r\n\t        }\r\n\t      }\r\n\t\r\n\t      if (!options.serverURL && (options.autoLoad || options.autoPlay)) {\r\n\t        // call load for non-rtmp streams\r\n\t        oSound.load(options);\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    // rtmp will play in onconnect\r\n\t    if (!options.serverURL && options.autoPlay) {\r\n\t      oSound.play();\r\n\t    }\r\n\t\r\n\t    return oSound;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Destroys a SMSound sound object instance.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound to destroy\r\n\t   */\r\n\t\r\n\t  this.destroySound = function(sID, _bFromSound) {\r\n\t\r\n\t    // explicitly destroy a sound before normal page unload, etc.\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    var oS = sm2.sounds[sID], i;\r\n\t\r\n\t    oS.stop();\r\n\t\r\n\t    // Disable all callbacks after stop(), when the sound is being destroyed\r\n\t    oS._iO = {};\r\n\t\r\n\t    oS.unload();\r\n\t\r\n\t    for (i = 0; i < sm2.soundIDs.length; i++) {\r\n\t      if (sm2.soundIDs[i] === sID) {\r\n\t        sm2.soundIDs.splice(i, 1);\r\n\t        break;\r\n\t      }\r\n\t    }\r\n\t\r\n\t    if (!_bFromSound) {\r\n\t      // ignore if being called from SMSound instance\r\n\t      oS.destruct(true);\r\n\t    }\r\n\t\r\n\t    oS = null;\r\n\t    delete sm2.sounds[sID];\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the load() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @param {object} oOptions Optional: Sound options\r\n\t   */\r\n\t\r\n\t  this.load = function(sID, oOptions) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].load(oOptions);\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the unload() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   */\r\n\t\r\n\t  this.unload = function(sID) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].unload();\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the onPosition() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @param {number} nPosition The position to watch for\r\n\t   * @param {function} oMethod The relevant callback to fire\r\n\t   * @param {object} oScope Optional: The scope to apply the callback to\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.onPosition = function(sID, nPosition, oMethod, oScope) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].onposition(nPosition, oMethod, oScope);\r\n\t\r\n\t  };\r\n\t\r\n\t  // legacy/backwards-compability: lower-case method name\r\n\t  this.onposition = this.onPosition;\r\n\t\r\n\t  /**\r\n\t   * Calls the clearOnPosition() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @param {number} nPosition The position to watch for\r\n\t   * @param {function} oMethod Optional: The relevant callback to fire\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.clearOnPosition = function(sID, nPosition, oMethod) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].clearOnPosition(nPosition, oMethod);\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the play() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @param {object} oOptions Optional: Sound options\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.play = function(sID, oOptions) {\r\n\t\r\n\t    var result = null,\r\n\t        // legacy function-overloading use case: play('mySound', '/path/to/some.mp3');\r\n\t        overloaded = (oOptions && !(oOptions instanceof Object));\r\n\t\r\n\t    if (!didInit || !sm2.ok()) {\r\n\t      complain(sm + '.play(): ' + str(!didInit ? 'notReady' : 'notOK'));\r\n\t      return false;\r\n\t    }\r\n\t\r\n\t    if (!idCheck(sID, overloaded)) {\r\n\t\r\n\t      // no sound found for the given ID. Bail.\r\n\t      if (!overloaded) return false;\r\n\t\r\n\t      if (overloaded) {\r\n\t        oOptions = {\r\n\t          url: oOptions\r\n\t        };\r\n\t      }\r\n\t\r\n\t      if (oOptions && oOptions.url) {\r\n\t        // overloading use case, create+play: .play('someID', {url:'/path/to.mp3'});\r\n\t        sm2._wD(sm + '.play(): Attempting to create \"' + sID + '\"', 1);\r\n\t        oOptions.id = sID;\r\n\t        result = sm2.createSound(oOptions).play();\r\n\t      }\r\n\t\r\n\t    } else if (overloaded) {\r\n\t\r\n\t      // existing sound object case\r\n\t      oOptions = {\r\n\t        url: oOptions\r\n\t      };\r\n\t\r\n\t    }\r\n\t\r\n\t    if (result === null) {\r\n\t      // default case\r\n\t      result = sm2.sounds[sID].play(oOptions);\r\n\t    }\r\n\t\r\n\t    return result;\r\n\t\r\n\t  };\r\n\t\r\n\t  // just for convenience\r\n\t  this.start = this.play;\r\n\t\r\n\t  /**\r\n\t   * Calls the setPlaybackRate() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.setPlaybackRate = function(sID, rate, allowOverride) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].setPlaybackRate(rate, allowOverride);\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the setPosition() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @param {number} nMsecOffset Position (milliseconds)\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.setPosition = function(sID, nMsecOffset) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].setPosition(nMsecOffset);\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the stop() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.stop = function(sID) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    sm2._wD(sm + '.stop(' + sID + ')', 1);\r\n\t\r\n\t    return sm2.sounds[sID].stop();\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Stops all currently-playing sounds.\r\n\t   */\r\n\t\r\n\t  this.stopAll = function() {\r\n\t\r\n\t    var oSound;\r\n\t    sm2._wD(sm + '.stopAll()', 1);\r\n\t\r\n\t    for (oSound in sm2.sounds) {\r\n\t      if (sm2.sounds.hasOwnProperty(oSound)) {\r\n\t        // apply only to sound objects\r\n\t        sm2.sounds[oSound].stop();\r\n\t      }\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the pause() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.pause = function(sID) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].pause();\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Pauses all currently-playing sounds.\r\n\t   */\r\n\t\r\n\t  this.pauseAll = function() {\r\n\t\r\n\t    var i;\r\n\t    for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n\t      sm2.sounds[sm2.soundIDs[i]].pause();\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the resume() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.resume = function(sID) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].resume();\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Resumes all currently-paused sounds.\r\n\t   */\r\n\t\r\n\t  this.resumeAll = function() {\r\n\t\r\n\t    var i;\r\n\t    for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n\t      sm2.sounds[sm2.soundIDs[i]].resume();\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the togglePause() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.togglePause = function(sID) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].togglePause();\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the setPan() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @param {number} nPan The pan value (-100 to 100)\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.setPan = function(sID, nPan) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].setPan(nPan);\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the setVolume() method of a SMSound object by ID\r\n\t   * Overloaded case: pass only volume argument eg., setVolume(50) to apply to all sounds.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @param {number} nVol The volume value (0 to 100)\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.setVolume = function(sID, nVol) {\r\n\t\r\n\t    // setVolume(50) function overloading case - apply to all sounds\r\n\t\r\n\t    var i, j;\r\n\t\r\n\t    if (sID !== _undefined && !isNaN(sID) && nVol === _undefined) {\r\n\t      for (i = 0, j = sm2.soundIDs.length; i < j; i++) {\r\n\t        sm2.sounds[sm2.soundIDs[i]].setVolume(sID);\r\n\t      }\r\n\t      return false;\r\n\t    }\r\n\t\r\n\t    // setVolume('mySound', 50) case\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].setVolume(nVol);\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the mute() method of either a single SMSound object by ID, or all sound objects.\r\n\t   *\r\n\t   * @param {string} sID Optional: The ID of the sound (if omitted, all sounds will be used.)\r\n\t   */\r\n\t\r\n\t  this.mute = function(sID) {\r\n\t\r\n\t    var i = 0;\r\n\t\r\n\t    if (sID instanceof String) {\r\n\t      sID = null;\r\n\t    }\r\n\t\r\n\t    if (!sID) {\r\n\t\r\n\t      sm2._wD(sm + '.mute(): Muting all sounds');\r\n\t      for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n\t        sm2.sounds[sm2.soundIDs[i]].mute();\r\n\t      }\r\n\t      sm2.muted = true;\r\n\t\r\n\t    } else {\r\n\t\r\n\t      if (!idCheck(sID)) return false;\r\n\t\r\n\t      sm2._wD(sm + '.mute(): Muting \"' + sID + '\"');\r\n\t      return sm2.sounds[sID].mute();\r\n\t\r\n\t    }\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Mutes all sounds.\r\n\t   */\r\n\t\r\n\t  this.muteAll = function() {\r\n\t\r\n\t    sm2.mute();\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the unmute() method of either a single SMSound object by ID, or all sound objects.\r\n\t   *\r\n\t   * @param {string} sID Optional: The ID of the sound (if omitted, all sounds will be used.)\r\n\t   */\r\n\t\r\n\t  this.unmute = function(sID) {\r\n\t\r\n\t    var i;\r\n\t\r\n\t    if (sID instanceof String) {\r\n\t      sID = null;\r\n\t    }\r\n\t\r\n\t    if (!sID) {\r\n\t\r\n\t      sm2._wD(sm + '.unmute(): Unmuting all sounds');\r\n\t      for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n\t        sm2.sounds[sm2.soundIDs[i]].unmute();\r\n\t      }\r\n\t      sm2.muted = false;\r\n\t\r\n\t    } else {\r\n\t\r\n\t      if (!idCheck(sID)) return false;\r\n\t\r\n\t      sm2._wD(sm + '.unmute(): Unmuting \"' + sID + '\"');\r\n\t\r\n\t      return sm2.sounds[sID].unmute();\r\n\t\r\n\t    }\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Unmutes all sounds.\r\n\t   */\r\n\t\r\n\t  this.unmuteAll = function() {\r\n\t\r\n\t    sm2.unmute();\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Calls the toggleMute() method of a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.toggleMute = function(sID) {\r\n\t\r\n\t    if (!idCheck(sID)) return false;\r\n\t\r\n\t    return sm2.sounds[sID].toggleMute();\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Retrieves the memory used by the flash plugin.\r\n\t   *\r\n\t   * @return {number} The amount of memory in use\r\n\t   */\r\n\t\r\n\t  this.getMemoryUse = function() {\r\n\t\r\n\t    // flash-only\r\n\t    var ram = 0;\r\n\t\r\n\t    if (flash && fV !== 8) {\r\n\t      ram = parseInt(flash._getMemoryUse(), 10);\r\n\t    }\r\n\t\r\n\t    return ram;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Undocumented: NOPs soundManager and all SMSound objects.\r\n\t   */\r\n\t\r\n\t  this.disable = function(bNoDisable) {\r\n\t\r\n\t    // destroy all functions\r\n\t    var i;\r\n\t\r\n\t    if (bNoDisable === _undefined) {\r\n\t      bNoDisable = false;\r\n\t    }\r\n\t\r\n\t    // already disabled?\r\n\t    if (disabled) return false;\r\n\t\r\n\t    disabled = true;\r\n\t\r\n\t    _wDS('shutdown', 1);\r\n\t\r\n\t    for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n\t      disableObject(sm2.sounds[sm2.soundIDs[i]]);\r\n\t    }\r\n\t\r\n\t    disableObject(sm2);\r\n\t\r\n\t    // fire \"complete\", despite fail\r\n\t    initComplete(bNoDisable);\r\n\t\r\n\t    event.remove(window, 'load', initUserOnload);\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Determines playability of a MIME type, eg. 'audio/mp3'.\r\n\t   */\r\n\t\r\n\t  this.canPlayMIME = function(sMIME) {\r\n\t\r\n\t    var result;\r\n\t\r\n\t    if (sm2.hasHTML5) {\r\n\t      result = html5CanPlay({\r\n\t        type: sMIME\r\n\t      });\r\n\t    }\r\n\t\r\n\t    if (!result && needsFlash) {\r\n\t      // if flash 9, test netStream (movieStar) types as well.\r\n\t      result = (sMIME && sm2.ok() ? !!((fV > 8 ? sMIME.match(netStreamMimeTypes) : null) || sMIME.match(sm2.mimePattern)) : null); // TODO: make less \"weird\" (per JSLint)\r\n\t    }\r\n\t\r\n\t    return result;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Determines playability of a URL based on audio support.\r\n\t   *\r\n\t   * @param {string} sURL The URL to test\r\n\t   * @return {boolean} URL playability\r\n\t   */\r\n\t\r\n\t  this.canPlayURL = function(sURL) {\r\n\t\r\n\t    var result;\r\n\t\r\n\t    if (sm2.hasHTML5) {\r\n\t      result = html5CanPlay({\r\n\t        url: sURL\r\n\t      });\r\n\t    }\r\n\t\r\n\t    if (!result && needsFlash) {\r\n\t      result = (sURL && sm2.ok() ? !!(sURL.match(sm2.filePattern)) : null);\r\n\t    }\r\n\t\r\n\t    return result;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Determines playability of an HTML DOM &lt;a&gt; object (or similar object literal) based on audio support.\r\n\t   *\r\n\t   * @param {object} oLink an HTML DOM &lt;a&gt; object or object literal including href and/or type attributes\r\n\t   * @return {boolean} URL playability\r\n\t   */\r\n\t\r\n\t  this.canPlayLink = function(oLink) {\r\n\t\r\n\t    if (oLink.type !== _undefined && oLink.type && sm2.canPlayMIME(oLink.type)) return true;\r\n\t\r\n\t    return sm2.canPlayURL(oLink.href);\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Retrieves a SMSound object by ID.\r\n\t   *\r\n\t   * @param {string} sID The ID of the sound\r\n\t   * @return {SMSound} The SMSound object\r\n\t   */\r\n\t\r\n\t  this.getSoundById = function(sID, _suppressDebug) {\r\n\t\r\n\t    if (!sID) return null;\r\n\t\r\n\t    var result = sm2.sounds[sID];\r\n\t\r\n\t    // <d>\r\n\t    if (!result && !_suppressDebug) {\r\n\t      sm2._wD(sm + '.getSoundById(): Sound \"' + sID + '\" not found.', 2);\r\n\t    }\r\n\t    // </d>\r\n\t\r\n\t    return result;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Queues a callback for execution when SoundManager has successfully initialized.\r\n\t   *\r\n\t   * @param {function} oMethod The callback method to fire\r\n\t   * @param {object} oScope Optional: The scope to apply to the callback\r\n\t   */\r\n\t\r\n\t  this.onready = function(oMethod, oScope) {\r\n\t\r\n\t    var sType = 'onready',\r\n\t        result = false;\r\n\t\r\n\t    if (typeof oMethod === 'function') {\r\n\t\r\n\t      // <d>\r\n\t      if (didInit) {\r\n\t        sm2._wD(str('queue', sType));\r\n\t      }\r\n\t      // </d>\r\n\t\r\n\t      if (!oScope) {\r\n\t        oScope = window;\r\n\t      }\r\n\t\r\n\t      addOnEvent(sType, oMethod, oScope);\r\n\t      processOnEvents();\r\n\t\r\n\t      result = true;\r\n\t\r\n\t    } else {\r\n\t\r\n\t      throw str('needFunction', sType);\r\n\t\r\n\t    }\r\n\t\r\n\t    return result;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Queues a callback for execution when SoundManager has failed to initialize.\r\n\t   *\r\n\t   * @param {function} oMethod The callback method to fire\r\n\t   * @param {object} oScope Optional: The scope to apply to the callback\r\n\t   */\r\n\t\r\n\t  this.ontimeout = function(oMethod, oScope) {\r\n\t\r\n\t    var sType = 'ontimeout',\r\n\t        result = false;\r\n\t\r\n\t    if (typeof oMethod === 'function') {\r\n\t\r\n\t      // <d>\r\n\t      if (didInit) {\r\n\t        sm2._wD(str('queue', sType));\r\n\t      }\r\n\t      // </d>\r\n\t\r\n\t      if (!oScope) {\r\n\t        oScope = window;\r\n\t      }\r\n\t\r\n\t      addOnEvent(sType, oMethod, oScope);\r\n\t      processOnEvents({ type: sType });\r\n\t\r\n\t      result = true;\r\n\t\r\n\t    } else {\r\n\t\r\n\t      throw str('needFunction', sType);\r\n\t\r\n\t    }\r\n\t\r\n\t    return result;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Writes console.log()-style debug output to a console or in-browser element.\r\n\t   * Applies when debugMode = true\r\n\t   *\r\n\t   * @param {string} sText The console message\r\n\t   * @param {object} nType Optional log level (number), or object. Number case: Log type/style where 0 = 'info', 1 = 'warn', 2 = 'error'. Object case: Object to be dumped.\r\n\t   */\r\n\t\r\n\t  this._writeDebug = function(sText, sTypeOrObject) {\r\n\t\r\n\t    // pseudo-private console.log()-style output\r\n\t    // <d>\r\n\t\r\n\t    var sDID = 'soundmanager-debug', o, oItem;\r\n\t\r\n\t    if (!sm2.setupOptions.debugMode) return false;\r\n\t\r\n\t    if (hasConsole && sm2.useConsole) {\r\n\t      if (sTypeOrObject && typeof sTypeOrObject === 'object') {\r\n\t        // object passed; dump to console.\r\n\t        console.log(sText, sTypeOrObject);\r\n\t      } else if (debugLevels[sTypeOrObject] !== _undefined) {\r\n\t        console[debugLevels[sTypeOrObject]](sText);\r\n\t      } else {\r\n\t        console.log(sText);\r\n\t      }\r\n\t      if (sm2.consoleOnly) return true;\r\n\t    }\r\n\t\r\n\t    o = id(sDID);\r\n\t\r\n\t    if (!o) return false;\r\n\t\r\n\t    oItem = doc.createElement('div');\r\n\t\r\n\t    if (++wdCount % 2 === 0) {\r\n\t      oItem.className = 'sm2-alt';\r\n\t    }\r\n\t\r\n\t    if (sTypeOrObject === _undefined) {\r\n\t      sTypeOrObject = 0;\r\n\t    } else {\r\n\t      sTypeOrObject = parseInt(sTypeOrObject, 10);\r\n\t    }\r\n\t\r\n\t    oItem.appendChild(doc.createTextNode(sText));\r\n\t\r\n\t    if (sTypeOrObject) {\r\n\t      if (sTypeOrObject >= 2) {\r\n\t        oItem.style.fontWeight = 'bold';\r\n\t      }\r\n\t      if (sTypeOrObject === 3) {\r\n\t        oItem.style.color = '#ff3333';\r\n\t      }\r\n\t    }\r\n\t\r\n\t    // top-to-bottom\r\n\t    // o.appendChild(oItem);\r\n\t\r\n\t    // bottom-to-top\r\n\t    o.insertBefore(oItem, o.firstChild);\r\n\t\r\n\t    o = null;\r\n\t    // </d>\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  // <d>\r\n\t  // last-resort debugging option\r\n\t  if (wl.indexOf('sm2-debug=alert') !== -1) {\r\n\t    this._writeDebug = function(sText) {\r\n\t      window.alert(sText);\r\n\t    };\r\n\t  }\r\n\t  // </d>\r\n\t\r\n\t  // alias\r\n\t  this._wD = this._writeDebug;\r\n\t\r\n\t  /**\r\n\t   * Provides debug / state information on all SMSound objects.\r\n\t   */\r\n\t\r\n\t  this._debug = function() {\r\n\t\r\n\t    // <d>\r\n\t    var i, j;\r\n\t    _wDS('currentObj', 1);\r\n\t\r\n\t    for (i = 0, j = sm2.soundIDs.length; i < j; i++) {\r\n\t      sm2.sounds[sm2.soundIDs[i]]._debug();\r\n\t    }\r\n\t    // </d>\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Restarts and re-initializes the SoundManager instance.\r\n\t   *\r\n\t   * @param {boolean} resetEvents Optional: When true, removes all registered onready and ontimeout event callbacks.\r\n\t   * @param {boolean} excludeInit Options: When true, does not call beginDelayedInit() (which would restart SM2).\r\n\t   * @return {object} soundManager The soundManager instance.\r\n\t   */\r\n\t\r\n\t  this.reboot = function(resetEvents, excludeInit) {\r\n\t\r\n\t    // reset some (or all) state, and re-init unless otherwise specified.\r\n\t\r\n\t    // <d>\r\n\t    if (sm2.soundIDs.length) {\r\n\t      sm2._wD('Destroying ' + sm2.soundIDs.length + ' SMSound object' + (sm2.soundIDs.length !== 1 ? 's' : '') + '...');\r\n\t    }\r\n\t    // </d>\r\n\t\r\n\t    var i, j, k;\r\n\t\r\n\t    for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n\t      sm2.sounds[sm2.soundIDs[i]].destruct();\r\n\t    }\r\n\t\r\n\t    // trash ze flash (remove from the DOM)\r\n\t\r\n\t    if (flash) {\r\n\t\r\n\t      try {\r\n\t\r\n\t        if (isIE) {\r\n\t          oRemovedHTML = flash.innerHTML;\r\n\t        }\r\n\t\r\n\t        oRemoved = flash.parentNode.removeChild(flash);\r\n\t\r\n\t      } catch(e) {\r\n\t\r\n\t        // Remove failed? May be due to flash blockers silently removing the SWF object/embed node from the DOM. Warn and continue.\r\n\t\r\n\t        _wDS('badRemove', 2);\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    // actually, force recreate of movie.\r\n\t\r\n\t    oRemovedHTML = oRemoved = needsFlash = flash = null;\r\n\t\r\n\t    sm2.enabled = didDCLoaded = didInit = waitingForEI = initPending = didAppend = appendSuccess = disabled = useGlobalHTML5Audio = sm2.swfLoaded = false;\r\n\t\r\n\t    sm2.soundIDs = [];\r\n\t    sm2.sounds = {};\r\n\t\r\n\t    idCounter = 0;\r\n\t    didSetup = false;\r\n\t\r\n\t    if (!resetEvents) {\r\n\t      // reset callbacks for onready, ontimeout etc. so that they will fire again on re-init\r\n\t      for (i in on_queue) {\r\n\t        if (on_queue.hasOwnProperty(i)) {\r\n\t          for (j = 0, k = on_queue[i].length; j < k; j++) {\r\n\t            on_queue[i][j].fired = false;\r\n\t          }\r\n\t        }\r\n\t      }\r\n\t    } else {\r\n\t      // remove all callbacks entirely\r\n\t      on_queue = [];\r\n\t    }\r\n\t\r\n\t    // <d>\r\n\t    if (!excludeInit) {\r\n\t      sm2._wD(sm + ': Rebooting...');\r\n\t    }\r\n\t    // </d>\r\n\t\r\n\t    // reset HTML5 and flash canPlay test results\r\n\t\r\n\t    sm2.html5 = {\r\n\t      usingFlash: null\r\n\t    };\r\n\t\r\n\t    sm2.flash = {};\r\n\t\r\n\t    // reset device-specific HTML/flash mode switches\r\n\t\r\n\t    sm2.html5Only = false;\r\n\t    sm2.ignoreFlash = false;\r\n\t\r\n\t    window.setTimeout(function() {\r\n\t\r\n\t      // by default, re-init\r\n\t\r\n\t      if (!excludeInit) {\r\n\t        sm2.beginDelayedInit();\r\n\t      }\r\n\t\r\n\t    }, 20);\r\n\t\r\n\t    return sm2;\r\n\t\r\n\t  };\r\n\t\r\n\t  this.reset = function() {\r\n\t\r\n\t    /**\r\n\t     * Shuts down and restores the SoundManager instance to its original loaded state, without an explicit reboot. All onready/ontimeout handlers are removed.\r\n\t     * After this call, SM2 may be re-initialized via soundManager.beginDelayedInit().\r\n\t     * @return {object} soundManager The soundManager instance.\r\n\t     */\r\n\t\r\n\t    _wDS('reset');\r\n\t\r\n\t    return sm2.reboot(true, true);\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Undocumented: Determines the SM2 flash movie's load progress.\r\n\t   *\r\n\t   * @return {number or null} Percent loaded, or if invalid/unsupported, null.\r\n\t   */\r\n\t\r\n\t  this.getMoviePercent = function() {\r\n\t\r\n\t    /**\r\n\t     * Interesting syntax notes...\r\n\t     * Flash/ExternalInterface (ActiveX/NPAPI) bridge methods are not typeof \"function\" nor instanceof Function, but are still valid.\r\n\t     * Furthermore, using (flash && flash.PercentLoaded) causes IE to throw \"object doesn't support this property or method\".\r\n\t     * Thus, 'in' syntax must be used.\r\n\t     */\r\n\t\r\n\t    return (flash && 'PercentLoaded' in flash ? flash.PercentLoaded() : null);\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Additional helper for manually invoking SM2's init process after DOM Ready / window.onload().\r\n\t   */\r\n\t\r\n\t  this.beginDelayedInit = function() {\r\n\t\r\n\t    windowLoaded = true;\r\n\t    domContentLoaded();\r\n\t\r\n\t    setTimeout(function() {\r\n\t\r\n\t      if (initPending) return false;\r\n\t\r\n\t      createMovie();\r\n\t      initMovie();\r\n\t      initPending = true;\r\n\t\r\n\t      return true;\r\n\t\r\n\t    }, 20);\r\n\t\r\n\t    delayWaitForEI();\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Destroys the SoundManager instance and all SMSound instances.\r\n\t   */\r\n\t\r\n\t  this.destruct = function() {\r\n\t\r\n\t    sm2._wD(sm + '.destruct()');\r\n\t    sm2.disable(true);\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * SMSound() (sound object) constructor\r\n\t   * ------------------------------------\r\n\t   *\r\n\t   * @param {object} oOptions Sound options (id and url are required attributes)\r\n\t   * @return {SMSound} The new SMSound object\r\n\t   */\r\n\t\r\n\t  SMSound = function(oOptions) {\r\n\t\r\n\t    var s = this, resetProperties, add_html5_events, remove_html5_events, stop_html5_timer, start_html5_timer, attachOnPosition, onplay_called = false, onPositionItems = [], onPositionFired = 0, detachOnPosition, applyFromTo, lastURL = null, lastHTML5State, urlOmitted;\r\n\t\r\n\t    lastHTML5State = {\r\n\t      // tracks duration + position (time)\r\n\t      duration: null,\r\n\t      time: null\r\n\t    };\r\n\t\r\n\t    this.id = oOptions.id;\r\n\t\r\n\t    // legacy\r\n\t    this.sID = this.id;\r\n\t\r\n\t    this.url = oOptions.url;\r\n\t    this.options = mixin(oOptions);\r\n\t\r\n\t    // per-play-instance-specific options\r\n\t    this.instanceOptions = this.options;\r\n\t\r\n\t    // short alias\r\n\t    this._iO = this.instanceOptions;\r\n\t\r\n\t    // assign property defaults\r\n\t    this.pan = this.options.pan;\r\n\t    this.volume = this.options.volume;\r\n\t\r\n\t    // whether or not this object is using HTML5\r\n\t    this.isHTML5 = false;\r\n\t\r\n\t    // internal HTML5 Audio() object reference\r\n\t    this._a = null;\r\n\t\r\n\t    // for flash 8 special-case createSound() without url, followed by load/play with url case\r\n\t    urlOmitted = (!this.url);\r\n\t\r\n\t    /**\r\n\t     * SMSound() public methods\r\n\t     * ------------------------\r\n\t     */\r\n\t\r\n\t    this.id3 = {};\r\n\t\r\n\t    /**\r\n\t     * Writes SMSound object parameters to debug console\r\n\t     */\r\n\t\r\n\t    this._debug = function() {\r\n\t\r\n\t      // <d>\r\n\t      sm2._wD(s.id + ': Merged options:', s.options);\r\n\t      // </d>\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Begins loading a sound per its *url*.\r\n\t     *\r\n\t     * @param {object} options Optional: Sound options\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.load = function(options) {\r\n\t\r\n\t      var oSound = null, instanceOptions;\r\n\t\r\n\t      if (options !== _undefined) {\r\n\t        s._iO = mixin(options, s.options);\r\n\t      } else {\r\n\t        options = s.options;\r\n\t        s._iO = options;\r\n\t        if (lastURL && lastURL !== s.url) {\r\n\t          _wDS('manURL');\r\n\t          s._iO.url = s.url;\r\n\t          s.url = null;\r\n\t        }\r\n\t      }\r\n\t\r\n\t      if (!s._iO.url) {\r\n\t        s._iO.url = s.url;\r\n\t      }\r\n\t\r\n\t      s._iO.url = parseURL(s._iO.url);\r\n\t\r\n\t      // ensure we're in sync\r\n\t      s.instanceOptions = s._iO;\r\n\t\r\n\t      // local shortcut\r\n\t      instanceOptions = s._iO;\r\n\t\r\n\t      sm2._wD(s.id + ': load (' + instanceOptions.url + ')');\r\n\t\r\n\t      if (!instanceOptions.url && !s.url) {\r\n\t        sm2._wD(s.id + ': load(): url is unassigned. Exiting.', 2);\r\n\t        return s;\r\n\t      }\r\n\t\r\n\t      // <d>\r\n\t      if (!s.isHTML5 && fV === 8 && !s.url && !instanceOptions.autoPlay) {\r\n\t        // flash 8 load() -> play() won't work before onload has fired.\r\n\t        sm2._wD(s.id + ': Flash 8 load() limitation: Wait for onload() before calling play().', 1);\r\n\t      }\r\n\t      // </d>\r\n\t\r\n\t      if (instanceOptions.url === s.url && s.readyState !== 0 && s.readyState !== 2) {\r\n\t        _wDS('onURL', 1);\r\n\t        // if loaded and an onload() exists, fire immediately.\r\n\t        if (s.readyState === 3 && instanceOptions.onload) {\r\n\t          // assume success based on truthy duration.\r\n\t          wrapCallback(s, function() {\r\n\t            instanceOptions.onload.apply(s, [(!!s.duration)]);\r\n\t          });\r\n\t        }\r\n\t        return s;\r\n\t      }\r\n\t\r\n\t      // reset a few state properties\r\n\t\r\n\t      s.loaded = false;\r\n\t      s.readyState = 1;\r\n\t      s.playState = 0;\r\n\t      s.id3 = {};\r\n\t\r\n\t      // TODO: If switching from HTML5 -> flash (or vice versa), stop currently-playing audio.\r\n\t\r\n\t      if (html5OK(instanceOptions)) {\r\n\t\r\n\t        oSound = s._setup_html5(instanceOptions);\r\n\t\r\n\t        if (!oSound._called_load) {\r\n\t\r\n\t          s._html5_canplay = false;\r\n\t\r\n\t          // TODO: review called_load / html5_canplay logic\r\n\t\r\n\t          // if url provided directly to load(), assign it here.\r\n\t\r\n\t          if (s.url !== instanceOptions.url) {\r\n\t\r\n\t            sm2._wD(_wDS('manURL') + ': ' + instanceOptions.url);\r\n\t\r\n\t            s._a.src = instanceOptions.url;\r\n\t\r\n\t            // TODO: review / re-apply all relevant options (volume, loop, onposition etc.)\r\n\t\r\n\t            // reset position for new URL\r\n\t            s.setPosition(0);\r\n\t\r\n\t          }\r\n\t\r\n\t          // given explicit load call, try to preload.\r\n\t\r\n\t          // early HTML5 implementation (non-standard)\r\n\t          s._a.autobuffer = 'auto';\r\n\t\r\n\t          // standard property, values: none / metadata / auto\r\n\t          // reference: http://msdn.microsoft.com/en-us/library/ie/ff974759%28v=vs.85%29.aspx\r\n\t          s._a.preload = 'auto';\r\n\t\r\n\t          s._a._called_load = true;\r\n\t\r\n\t        } else {\r\n\t\r\n\t          sm2._wD(s.id + ': Ignoring request to load again');\r\n\t\r\n\t        }\r\n\t\r\n\t      } else {\r\n\t\r\n\t        if (sm2.html5Only) {\r\n\t          sm2._wD(s.id + ': No flash support. Exiting.');\r\n\t          return s;\r\n\t        }\r\n\t\r\n\t        if (s._iO.url && s._iO.url.match(/data:/i)) {\r\n\t          // data: URIs not supported by Flash, either.\r\n\t          sm2._wD(s.id + ': data: URIs not supported via Flash. Exiting.');\r\n\t          return s;\r\n\t        }\r\n\t\r\n\t        try {\r\n\t          s.isHTML5 = false;\r\n\t          s._iO = policyFix(loopFix(instanceOptions));\r\n\t          // if we have \"position\", disable auto-play as we'll be seeking to that position at onload().\r\n\t          if (s._iO.autoPlay && (s._iO.position || s._iO.from)) {\r\n\t            sm2._wD(s.id + ': Disabling autoPlay because of non-zero offset case');\r\n\t            s._iO.autoPlay = false;\r\n\t          }\r\n\t          // re-assign local shortcut\r\n\t          instanceOptions = s._iO;\r\n\t          if (fV === 8) {\r\n\t            flash._load(s.id, instanceOptions.url, instanceOptions.stream, instanceOptions.autoPlay, instanceOptions.usePolicyFile);\r\n\t          } else {\r\n\t            flash._load(s.id, instanceOptions.url, !!(instanceOptions.stream), !!(instanceOptions.autoPlay), instanceOptions.loops || 1, !!(instanceOptions.autoLoad), instanceOptions.usePolicyFile);\r\n\t          }\r\n\t        } catch(e) {\r\n\t          _wDS('smError', 2);\r\n\t          debugTS('onload', false);\r\n\t          catchError({\r\n\t            type: 'SMSOUND_LOAD_JS_EXCEPTION',\r\n\t            fatal: true\r\n\t          });\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      // after all of this, ensure sound url is up to date.\r\n\t      s.url = instanceOptions.url;\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Unloads a sound, canceling any open HTTP requests.\r\n\t     *\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.unload = function() {\r\n\t\r\n\t      // Flash 8/AS2 can't \"close\" a stream - fake it by loading an empty URL\r\n\t      // Flash 9/AS3: Close stream, preventing further load\r\n\t      // HTML5: Most UAs will use empty URL\r\n\t\r\n\t      if (s.readyState !== 0) {\r\n\t\r\n\t        sm2._wD(s.id + ': unload()');\r\n\t\r\n\t        if (!s.isHTML5) {\r\n\t\r\n\t          if (fV === 8) {\r\n\t            flash._unload(s.id, emptyURL);\r\n\t          } else {\r\n\t            flash._unload(s.id);\r\n\t          }\r\n\t\r\n\t        } else {\r\n\t\r\n\t          stop_html5_timer();\r\n\t\r\n\t          if (s._a) {\r\n\t\r\n\t            s._a.pause();\r\n\t\r\n\t            // update empty URL, too\r\n\t            lastURL = html5Unload(s._a);\r\n\t\r\n\t          }\r\n\t\r\n\t        }\r\n\t\r\n\t        // reset load/status flags\r\n\t        resetProperties();\r\n\t\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Unloads and destroys a sound.\r\n\t     */\r\n\t\r\n\t    this.destruct = function(_bFromSM) {\r\n\t\r\n\t      sm2._wD(s.id + ': Destruct');\r\n\t\r\n\t      if (!s.isHTML5) {\r\n\t\r\n\t        // kill sound within Flash\r\n\t        // Disable the onfailure handler\r\n\t        s._iO.onfailure = null;\r\n\t        flash._destroySound(s.id);\r\n\t\r\n\t      } else {\r\n\t\r\n\t        stop_html5_timer();\r\n\t\r\n\t        if (s._a) {\r\n\t          s._a.pause();\r\n\t          html5Unload(s._a);\r\n\t          if (!useGlobalHTML5Audio) {\r\n\t            remove_html5_events();\r\n\t          }\r\n\t          // break obvious circular reference\r\n\t          s._a._s = null;\r\n\t          s._a = null;\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      if (!_bFromSM) {\r\n\t        // ensure deletion from controller\r\n\t        sm2.destroySound(s.id, true);\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Begins playing a sound.\r\n\t     *\r\n\t     * @param {object} options Optional: Sound options\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.play = function(options, _updatePlayState) {\r\n\t\r\n\t      var fN, allowMulti, a, onready,\r\n\t          audioClone, onended, oncanplay,\r\n\t          startOK = true;\r\n\t\r\n\t      // <d>\r\n\t      fN = s.id + ': play(): ';\r\n\t      // </d>\r\n\t\r\n\t      // default to true\r\n\t      _updatePlayState = (_updatePlayState === _undefined ? true : _updatePlayState);\r\n\t\r\n\t      if (!options) {\r\n\t        options = {};\r\n\t      }\r\n\t\r\n\t      // first, use local URL (if specified)\r\n\t      if (s.url) {\r\n\t        s._iO.url = s.url;\r\n\t      }\r\n\t\r\n\t      // mix in any options defined at createSound()\r\n\t      s._iO = mixin(s._iO, s.options);\r\n\t\r\n\t      // mix in any options specific to this method\r\n\t      s._iO = mixin(options, s._iO);\r\n\t\r\n\t      s._iO.url = parseURL(s._iO.url);\r\n\t\r\n\t      s.instanceOptions = s._iO;\r\n\t\r\n\t      // RTMP-only\r\n\t      if (!s.isHTML5 && s._iO.serverURL && !s.connected) {\r\n\t        if (!s.getAutoPlay()) {\r\n\t          sm2._wD(fN + ' Netstream not connected yet - setting autoPlay');\r\n\t          s.setAutoPlay(true);\r\n\t        }\r\n\t        // play will be called in onconnect()\r\n\t        return s;\r\n\t      }\r\n\t\r\n\t      if (html5OK(s._iO)) {\r\n\t        s._setup_html5(s._iO);\r\n\t        start_html5_timer();\r\n\t      }\r\n\t\r\n\t      if (s.playState === 1 && !s.paused) {\r\n\t\r\n\t        allowMulti = s._iO.multiShot;\r\n\t\r\n\t        if (!allowMulti) {\r\n\t\r\n\t          sm2._wD(fN + 'Already playing (one-shot)', 1);\r\n\t\r\n\t          if (s.isHTML5) {\r\n\t            // go back to original position.\r\n\t            s.setPosition(s._iO.position);\r\n\t          }\r\n\t\r\n\t          return s;\r\n\t\r\n\t        }\r\n\t\r\n\t        sm2._wD(fN + 'Already playing (multi-shot)', 1);\r\n\t\r\n\t      }\r\n\t\r\n\t      // edge case: play() with explicit URL parameter\r\n\t      if (options.url && options.url !== s.url) {\r\n\t\r\n\t        // special case for createSound() followed by load() / play() with url; avoid double-load case.\r\n\t        if (!s.readyState && !s.isHTML5 && fV === 8 && urlOmitted) {\r\n\t\r\n\t          urlOmitted = false;\r\n\t\r\n\t        } else {\r\n\t\r\n\t          // load using merged options\r\n\t          s.load(s._iO);\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      if (!s.loaded) {\r\n\t\r\n\t        if (s.readyState === 0) {\r\n\t\r\n\t          sm2._wD(fN + 'Attempting to load');\r\n\t\r\n\t          // try to get this sound playing ASAP\r\n\t          if (!s.isHTML5 && !sm2.html5Only) {\r\n\t\r\n\t            // flash: assign directly because setAutoPlay() increments the instanceCount\r\n\t            s._iO.autoPlay = true;\r\n\t            s.load(s._iO);\r\n\t\r\n\t          } else if (s.isHTML5) {\r\n\t\r\n\t            // iOS needs this when recycling sounds, loading a new URL on an existing object.\r\n\t            s.load(s._iO);\r\n\t\r\n\t          } else {\r\n\t\r\n\t            sm2._wD(fN + 'Unsupported type. Exiting.');\r\n\t\r\n\t            return s;\r\n\t\r\n\t          }\r\n\t\r\n\t          // HTML5 hack - re-set instanceOptions?\r\n\t          s.instanceOptions = s._iO;\r\n\t\r\n\t        } else if (s.readyState === 2) {\r\n\t\r\n\t          sm2._wD(fN + 'Could not load - exiting', 2);\r\n\t\r\n\t          return s;\r\n\t\r\n\t        } else {\r\n\t\r\n\t          sm2._wD(fN + 'Loading - attempting to play...');\r\n\t\r\n\t        }\r\n\t\r\n\t      } else {\r\n\t\r\n\t        // \"play()\"\r\n\t        sm2._wD(fN.substr(0, fN.lastIndexOf(':')));\r\n\t\r\n\t      }\r\n\t\r\n\t      if (!s.isHTML5 && fV === 9 && s.position > 0 && s.position === s.duration) {\r\n\t        // flash 9 needs a position reset if play() is called while at the end of a sound.\r\n\t        sm2._wD(fN + 'Sound at end, resetting to position: 0');\r\n\t        options.position = 0;\r\n\t      }\r\n\t\r\n\t      /**\r\n\t       * Streams will pause when their buffer is full if they are being loaded.\r\n\t       * In this case paused is true, but the song hasn't started playing yet.\r\n\t       * If we just call resume() the onplay() callback will never be called.\r\n\t       * So only call resume() if the position is > 0.\r\n\t       * Another reason is because options like volume won't have been applied yet.\r\n\t       * For normal sounds, just resume.\r\n\t       */\r\n\t\r\n\t      if (s.paused && s.position >= 0 && (!s._iO.serverURL || s.position > 0)) {\r\n\t\r\n\t        // https://gist.github.com/37b17df75cc4d7a90bf6\r\n\t        sm2._wD(fN + 'Resuming from paused state', 1);\r\n\t        s.resume();\r\n\t\r\n\t      } else {\r\n\t\r\n\t        s._iO = mixin(options, s._iO);\r\n\t\r\n\t        /**\r\n\t         * Preload in the event of play() with position under Flash,\r\n\t         * or from/to parameters and non-RTMP case\r\n\t         */\r\n\t        if (((!s.isHTML5 && s._iO.position !== null && s._iO.position > 0) || (s._iO.from !== null && s._iO.from > 0) || s._iO.to !== null) && s.instanceCount === 0 && s.playState === 0 && !s._iO.serverURL) {\r\n\t\r\n\t          onready = function() {\r\n\t            // sound \"canplay\" or onload()\r\n\t            // re-apply position/from/to to instance options, and start playback\r\n\t            s._iO = mixin(options, s._iO);\r\n\t            s.play(s._iO);\r\n\t          };\r\n\t\r\n\t          // HTML5 needs to at least have \"canplay\" fired before seeking.\r\n\t          if (s.isHTML5 && !s._html5_canplay) {\r\n\t\r\n\t            // this hasn't been loaded yet. load it first, and then do this again.\r\n\t            sm2._wD(fN + 'Beginning load for non-zero offset case');\r\n\t\r\n\t            s.load({\r\n\t              // note: custom HTML5-only event added for from/to implementation.\r\n\t              _oncanplay: onready\r\n\t            });\r\n\t\r\n\t          } else if (!s.isHTML5 && !s.loaded && (!s.readyState || s.readyState !== 2)) {\r\n\t\r\n\t            // to be safe, preload the whole thing in Flash.\r\n\t\r\n\t            sm2._wD(fN + 'Preloading for non-zero offset case');\r\n\t\r\n\t            s.load({\r\n\t              onload: onready\r\n\t            });\r\n\t\r\n\t          }\r\n\t\r\n\t          // otherwise, we're ready to go. re-apply local options, and continue\r\n\t\r\n\t          s._iO = applyFromTo();\r\n\t\r\n\t        }\r\n\t\r\n\t        // sm2._wD(fN + 'Starting to play');\r\n\t\r\n\t        // increment instance counter, where enabled + supported\r\n\t        if (!s.instanceCount || s._iO.multiShotEvents || (s.isHTML5 && s._iO.multiShot && !useGlobalHTML5Audio) || (!s.isHTML5 && fV > 8 && !s.getAutoPlay())) {\r\n\t          s.instanceCount++;\r\n\t        }\r\n\t\r\n\t        // if first play and onposition parameters exist, apply them now\r\n\t        if (s._iO.onposition && s.playState === 0) {\r\n\t          attachOnPosition(s);\r\n\t        }\r\n\t\r\n\t        s.playState = 1;\r\n\t        s.paused = false;\r\n\t\r\n\t        s.position = (s._iO.position !== _undefined && !isNaN(s._iO.position) ? s._iO.position : 0);\r\n\t\r\n\t        if (!s.isHTML5) {\r\n\t          s._iO = policyFix(loopFix(s._iO));\r\n\t        }\r\n\t\r\n\t        if (s._iO.onplay && _updatePlayState) {\r\n\t          s._iO.onplay.apply(s);\r\n\t          onplay_called = true;\r\n\t        }\r\n\t\r\n\t        s.setVolume(s._iO.volume, true);\r\n\t        s.setPan(s._iO.pan, true);\r\n\t\r\n\t        if (s._iO.playbackRate !== 1) {\r\n\t          s.setPlaybackRate(s._iO.playbackRate);\r\n\t        }\r\n\t\r\n\t        if (!s.isHTML5) {\r\n\t\r\n\t          startOK = flash._start(s.id, s._iO.loops || 1, (fV === 9 ? s.position : s.position / msecScale), s._iO.multiShot || false);\r\n\t\r\n\t          if (fV === 9 && !startOK) {\r\n\t            // edge case: no sound hardware, or 32-channel flash ceiling hit.\r\n\t            // applies only to Flash 9, non-NetStream/MovieStar sounds.\r\n\t            // http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/media/Sound.html#play%28%29\r\n\t            sm2._wD(fN + 'No sound hardware, or 32-sound ceiling hit', 2);\r\n\t            if (s._iO.onplayerror) {\r\n\t              s._iO.onplayerror.apply(s);\r\n\t            }\r\n\t\r\n\t          }\r\n\t\r\n\t        } else if (s.instanceCount < 2) {\r\n\t\r\n\t            // HTML5 single-instance case\r\n\t\r\n\t            start_html5_timer();\r\n\t\r\n\t            a = s._setup_html5();\r\n\t\r\n\t            s.setPosition(s._iO.position);\r\n\t\r\n\t            a.play();\r\n\t\r\n\t          } else {\r\n\t\r\n\t            // HTML5 multi-shot case\r\n\t\r\n\t            sm2._wD(s.id + ': Cloning Audio() for instance #' + s.instanceCount + '...');\r\n\t\r\n\t            audioClone = new Audio(s._iO.url);\r\n\t\r\n\t            onended = function() {\r\n\t              event.remove(audioClone, 'ended', onended);\r\n\t              s._onfinish(s);\r\n\t              // cleanup\r\n\t              html5Unload(audioClone);\r\n\t              audioClone = null;\r\n\t            };\r\n\t\r\n\t            oncanplay = function() {\r\n\t              event.remove(audioClone, 'canplay', oncanplay);\r\n\t              try {\r\n\t                audioClone.currentTime = s._iO.position / msecScale;\r\n\t              } catch(err) {\r\n\t                complain(s.id + ': multiShot play() failed to apply position of ' + (s._iO.position / msecScale));\r\n\t              }\r\n\t              audioClone.play();\r\n\t            };\r\n\t\r\n\t            event.add(audioClone, 'ended', onended);\r\n\t\r\n\t            // apply volume to clones, too\r\n\t            if (s._iO.volume !== _undefined) {\r\n\t              audioClone.volume = Math.max(0, Math.min(1, s._iO.volume / 100));\r\n\t            }\r\n\t\r\n\t            // playing multiple muted sounds? if you do this, you're weird ;) - but let's cover it.\r\n\t            if (s.muted) {\r\n\t              audioClone.muted = true;\r\n\t            }\r\n\t\r\n\t            if (s._iO.position) {\r\n\t              // HTML5 audio can't seek before onplay() event has fired.\r\n\t              // wait for canplay, then seek to position and start playback.\r\n\t              event.add(audioClone, 'canplay', oncanplay);\r\n\t            } else {\r\n\t              // begin playback at currentTime: 0\r\n\t              audioClone.play();\r\n\t            }\r\n\t\r\n\t          }\r\n\t\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    // just for convenience\r\n\t    this.start = this.play;\r\n\t\r\n\t    /**\r\n\t     * Stops playing a sound (and optionally, all sounds)\r\n\t     *\r\n\t     * @param {boolean} bAll Optional: Whether to stop all sounds\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.stop = function(bAll) {\r\n\t\r\n\t      var instanceOptions = s._iO,\r\n\t          originalPosition;\r\n\t\r\n\t      if (s.playState === 1) {\r\n\t\r\n\t        sm2._wD(s.id + ': stop()');\r\n\t\r\n\t        s._onbufferchange(0);\r\n\t        s._resetOnPosition(0);\r\n\t        s.paused = false;\r\n\t\r\n\t        if (!s.isHTML5) {\r\n\t          s.playState = 0;\r\n\t        }\r\n\t\r\n\t        // remove onPosition listeners, if any\r\n\t        detachOnPosition();\r\n\t\r\n\t        // and \"to\" position, if set\r\n\t        if (instanceOptions.to) {\r\n\t          s.clearOnPosition(instanceOptions.to);\r\n\t        }\r\n\t\r\n\t        if (!s.isHTML5) {\r\n\t\r\n\t          flash._stop(s.id, bAll);\r\n\t\r\n\t          // hack for netStream: just unload\r\n\t          if (instanceOptions.serverURL) {\r\n\t            s.unload();\r\n\t          }\r\n\t\r\n\t        } else if (s._a) {\r\n\t\r\n\t            originalPosition = s.position;\r\n\t\r\n\t            // act like Flash, though\r\n\t            s.setPosition(0);\r\n\t\r\n\t            // hack: reflect old position for onstop() (also like Flash)\r\n\t            s.position = originalPosition;\r\n\t\r\n\t            // html5 has no stop()\r\n\t            // NOTE: pausing means iOS requires interaction to resume.\r\n\t            s._a.pause();\r\n\t\r\n\t            s.playState = 0;\r\n\t\r\n\t            // and update UI\r\n\t            s._onTimer();\r\n\t\r\n\t            stop_html5_timer();\r\n\t\r\n\t          }\r\n\t\r\n\t        s.instanceCount = 0;\r\n\t        s._iO = {};\r\n\t\r\n\t        if (instanceOptions.onstop) {\r\n\t          instanceOptions.onstop.apply(s);\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Undocumented/internal: Sets autoPlay for RTMP.\r\n\t     *\r\n\t     * @param {boolean} autoPlay state\r\n\t     */\r\n\t\r\n\t    this.setAutoPlay = function(autoPlay) {\r\n\t\r\n\t      sm2._wD(s.id + ': Autoplay turned ' + (autoPlay ? 'on' : 'off'));\r\n\t      s._iO.autoPlay = autoPlay;\r\n\t\r\n\t      if (!s.isHTML5) {\r\n\t        flash._setAutoPlay(s.id, autoPlay);\r\n\t        if (autoPlay) {\r\n\t          // only increment the instanceCount if the sound isn't loaded (TODO: verify RTMP)\r\n\t          if (!s.instanceCount && s.readyState === 1) {\r\n\t            s.instanceCount++;\r\n\t            sm2._wD(s.id + ': Incremented instance count to ' + s.instanceCount);\r\n\t          }\r\n\t        }\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Undocumented/internal: Returns the autoPlay boolean.\r\n\t     *\r\n\t     * @return {boolean} The current autoPlay value\r\n\t     */\r\n\t\r\n\t    this.getAutoPlay = function() {\r\n\t\r\n\t      return s._iO.autoPlay;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Sets the playback rate of a sound (HTML5-only.)\r\n\t     *\r\n\t     * @param {number} playbackRate (+/-)\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.setPlaybackRate = function(playbackRate) {\r\n\t\r\n\t      // Per Mozilla, limit acceptable values to prevent playback from stopping (unless allowOverride is truthy.)\r\n\t      // https://developer.mozilla.org/en-US/Apps/Build/Audio_and_video_delivery/WebAudio_playbackRate_explained\r\n\t      var normalizedRate = Math.max(0.5, Math.min(4, playbackRate));\r\n\t\r\n\t      // <d>\r\n\t      if (normalizedRate !== playbackRate) {\r\n\t        sm2._wD(s.id + ': setPlaybackRate(' + playbackRate + '): limiting rate to ' + normalizedRate, 2);\r\n\t      }\r\n\t      // </d>\r\n\t\r\n\t      if (s.isHTML5) {\r\n\t        try {\r\n\t          s._iO.playbackRate = normalizedRate;\r\n\t          s._a.playbackRate = normalizedRate;\r\n\t        } catch(e) {\r\n\t          sm2._wD(s.id + ': setPlaybackRate(' + normalizedRate + ') failed: ' + e.message, 2);\r\n\t        }\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Sets the position of a sound.\r\n\t     *\r\n\t     * @param {number} nMsecOffset Position (milliseconds)\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.setPosition = function(nMsecOffset) {\r\n\t\r\n\t      if (nMsecOffset === _undefined) {\r\n\t        nMsecOffset = 0;\r\n\t      }\r\n\t\r\n\t      var position, position1K,\r\n\t          // Use the duration from the instance options, if we don't have a track duration yet.\r\n\t          // position >= 0 and <= current available (loaded) duration\r\n\t          offset = (s.isHTML5 ? Math.max(nMsecOffset, 0) : Math.min(s.duration || s._iO.duration, Math.max(nMsecOffset, 0)));\r\n\t\r\n\t      s.position = offset;\r\n\t      position1K = s.position / msecScale;\r\n\t      s._resetOnPosition(s.position);\r\n\t      s._iO.position = offset;\r\n\t\r\n\t      if (!s.isHTML5) {\r\n\t\r\n\t        position = (fV === 9 ? s.position : position1K);\r\n\t\r\n\t        if (s.readyState && s.readyState !== 2) {\r\n\t          // if paused or not playing, will not resume (by playing)\r\n\t          flash._setPosition(s.id, position, (s.paused || !s.playState), s._iO.multiShot);\r\n\t        }\r\n\t\r\n\t      } else if (s._a) {\r\n\t\r\n\t        // Set the position in the canplay handler if the sound is not ready yet\r\n\t        if (s._html5_canplay) {\r\n\t\r\n\t          if (s._a.currentTime.toFixed(3) !== position1K.toFixed(3)) {\r\n\t\r\n\t            /**\r\n\t             * DOM/JS errors/exceptions to watch out for:\r\n\t             * if seek is beyond (loaded?) position, \"DOM exception 11\"\r\n\t             * \"INDEX_SIZE_ERR\": DOM exception 1\r\n\t             */\r\n\t            sm2._wD(s.id + ': setPosition(' + position1K + ')');\r\n\t\r\n\t            try {\r\n\t              s._a.currentTime = position1K;\r\n\t              if (s.playState === 0 || s.paused) {\r\n\t                // allow seek without auto-play/resume\r\n\t                s._a.pause();\r\n\t              }\r\n\t            } catch(e) {\r\n\t              sm2._wD(s.id + ': setPosition(' + position1K + ') failed: ' + e.message, 2);\r\n\t            }\r\n\t\r\n\t          }\r\n\t\r\n\t        } else if (position1K) {\r\n\t\r\n\t          // warn on non-zero seek attempts\r\n\t          sm2._wD(s.id + ': setPosition(' + position1K + '): Cannot seek yet, sound not ready', 2);\r\n\t          return s;\r\n\t\r\n\t        }\r\n\t\r\n\t        if (s.paused) {\r\n\t\r\n\t          // if paused, refresh UI right away by forcing update\r\n\t          s._onTimer(true);\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Pauses sound playback.\r\n\t     *\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.pause = function(_bCallFlash) {\r\n\t\r\n\t      if (s.paused || (s.playState === 0 && s.readyState !== 1)) return s;\r\n\t\r\n\t      sm2._wD(s.id + ': pause()');\r\n\t      s.paused = true;\r\n\t\r\n\t      if (!s.isHTML5) {\r\n\t        if (_bCallFlash || _bCallFlash === _undefined) {\r\n\t          flash._pause(s.id, s._iO.multiShot);\r\n\t        }\r\n\t      } else {\r\n\t        s._setup_html5().pause();\r\n\t        stop_html5_timer();\r\n\t      }\r\n\t\r\n\t      if (s._iO.onpause) {\r\n\t        s._iO.onpause.apply(s);\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Resumes sound playback.\r\n\t     *\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    /**\r\n\t     * When auto-loaded streams pause on buffer full they have a playState of 0.\r\n\t     * We need to make sure that the playState is set to 1 when these streams \"resume\".\r\n\t     * When a paused stream is resumed, we need to trigger the onplay() callback if it\r\n\t     * hasn't been called already. In this case since the sound is being played for the\r\n\t     * first time, I think it's more appropriate to call onplay() rather than onresume().\r\n\t     */\r\n\t\r\n\t    this.resume = function() {\r\n\t\r\n\t      var instanceOptions = s._iO;\r\n\t\r\n\t      if (!s.paused) return s;\r\n\t\r\n\t      sm2._wD(s.id + ': resume()');\r\n\t      s.paused = false;\r\n\t      s.playState = 1;\r\n\t\r\n\t      if (!s.isHTML5) {\r\n\t\r\n\t        if (instanceOptions.isMovieStar && !instanceOptions.serverURL) {\r\n\t          // Bizarre Webkit bug (Chrome reported via 8tracks.com dudes): AAC content paused for 30+ seconds(?) will not resume without a reposition.\r\n\t          s.setPosition(s.position);\r\n\t        }\r\n\t\r\n\t        // flash method is toggle-based (pause/resume)\r\n\t        flash._pause(s.id, instanceOptions.multiShot);\r\n\t\r\n\t      } else {\r\n\t\r\n\t        s._setup_html5().play();\r\n\t        start_html5_timer();\r\n\t\r\n\t      }\r\n\t\r\n\t      if (!onplay_called && instanceOptions.onplay) {\r\n\t\r\n\t        instanceOptions.onplay.apply(s);\r\n\t        onplay_called = true;\r\n\t\r\n\t      } else if (instanceOptions.onresume) {\r\n\t\r\n\t        instanceOptions.onresume.apply(s);\r\n\t\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Toggles sound playback.\r\n\t     *\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.togglePause = function() {\r\n\t\r\n\t      sm2._wD(s.id + ': togglePause()');\r\n\t\r\n\t      if (s.playState === 0) {\r\n\t        s.play({\r\n\t          position: (fV === 9 && !s.isHTML5 ? s.position : s.position / msecScale)\r\n\t        });\r\n\t        return s;\r\n\t      }\r\n\t\r\n\t      if (s.paused) {\r\n\t        s.resume();\r\n\t      } else {\r\n\t        s.pause();\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Sets the panning (L-R) effect.\r\n\t     *\r\n\t     * @param {number} nPan The pan value (-100 to 100)\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.setPan = function(nPan, bInstanceOnly) {\r\n\t\r\n\t      if (nPan === _undefined) {\r\n\t        nPan = 0;\r\n\t      }\r\n\t\r\n\t      if (bInstanceOnly === _undefined) {\r\n\t        bInstanceOnly = false;\r\n\t      }\r\n\t\r\n\t      if (!s.isHTML5) {\r\n\t        flash._setPan(s.id, nPan);\r\n\t      } // else { no HTML5 pan? }\r\n\t\r\n\t      s._iO.pan = nPan;\r\n\t\r\n\t      if (!bInstanceOnly) {\r\n\t        s.pan = nPan;\r\n\t        s.options.pan = nPan;\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Sets the volume.\r\n\t     *\r\n\t     * @param {number} nVol The volume value (0 to 100)\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.setVolume = function(nVol, _bInstanceOnly) {\r\n\t\r\n\t      /**\r\n\t       * Note: Setting volume has no effect on iOS \"special snowflake\" devices.\r\n\t       * Hardware volume control overrides software, and volume\r\n\t       * will always return 1 per Apple docs. (iOS 4 + 5.)\r\n\t       * http://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/AddingSoundtoCanvasAnimations/AddingSoundtoCanvasAnimations.html\r\n\t       */\r\n\t\r\n\t      if (nVol === _undefined) {\r\n\t        nVol = 100;\r\n\t      }\r\n\t\r\n\t      if (_bInstanceOnly === _undefined) {\r\n\t        _bInstanceOnly = false;\r\n\t      }\r\n\t\r\n\t      if (!s.isHTML5) {\r\n\t\r\n\t        flash._setVolume(s.id, (sm2.muted && !s.muted) || s.muted ? 0 : nVol);\r\n\t\r\n\t      } else if (s._a) {\r\n\t\r\n\t        if (sm2.muted && !s.muted) {\r\n\t          s.muted = true;\r\n\t          s._a.muted = true;\r\n\t        }\r\n\t\r\n\t        // valid range for native HTML5 Audio(): 0-1\r\n\t        s._a.volume = Math.max(0, Math.min(1, nVol / 100));\r\n\t\r\n\t      }\r\n\t\r\n\t      s._iO.volume = nVol;\r\n\t\r\n\t      if (!_bInstanceOnly) {\r\n\t        s.volume = nVol;\r\n\t        s.options.volume = nVol;\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Mutes the sound.\r\n\t     *\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.mute = function() {\r\n\t\r\n\t      s.muted = true;\r\n\t\r\n\t      if (!s.isHTML5) {\r\n\t        flash._setVolume(s.id, 0);\r\n\t      } else if (s._a) {\r\n\t        s._a.muted = true;\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Unmutes the sound.\r\n\t     *\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.unmute = function() {\r\n\t\r\n\t      s.muted = false;\r\n\t      var hasIO = (s._iO.volume !== _undefined);\r\n\t\r\n\t      if (!s.isHTML5) {\r\n\t        flash._setVolume(s.id, hasIO ? s._iO.volume : s.options.volume);\r\n\t      } else if (s._a) {\r\n\t        s._a.muted = false;\r\n\t      }\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Toggles the muted state of a sound.\r\n\t     *\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.toggleMute = function() {\r\n\t\r\n\t      return (s.muted ? s.unmute() : s.mute());\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Registers a callback to be fired when a sound reaches a given position during playback.\r\n\t     *\r\n\t     * @param {number} nPosition The position to watch for\r\n\t     * @param {function} oMethod The relevant callback to fire\r\n\t     * @param {object} oScope Optional: The scope to apply the callback to\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.onPosition = function(nPosition, oMethod, oScope) {\r\n\t\r\n\t      // TODO: basic dupe checking?\r\n\t\r\n\t      onPositionItems.push({\r\n\t        position: parseInt(nPosition, 10),\r\n\t        method: oMethod,\r\n\t        scope: (oScope !== _undefined ? oScope : s),\r\n\t        fired: false\r\n\t      });\r\n\t\r\n\t      return s;\r\n\t\r\n\t    };\r\n\t\r\n\t    // legacy/backwards-compability: lower-case method name\r\n\t    this.onposition = this.onPosition;\r\n\t\r\n\t    /**\r\n\t     * Removes registered callback(s) from a sound, by position and/or callback.\r\n\t     *\r\n\t     * @param {number} nPosition The position to clear callback(s) for\r\n\t     * @param {function} oMethod Optional: Identify one callback to be removed when multiple listeners exist for one position\r\n\t     * @return {SMSound} The SMSound object\r\n\t     */\r\n\t\r\n\t    this.clearOnPosition = function(nPosition, oMethod) {\r\n\t\r\n\t      var i;\r\n\t\r\n\t      nPosition = parseInt(nPosition, 10);\r\n\t\r\n\t      if (isNaN(nPosition)) {\r\n\t        // safety check\r\n\t        return;\r\n\t      }\r\n\t\r\n\t      for (i = 0; i < onPositionItems.length; i++) {\r\n\t\r\n\t        if (nPosition === onPositionItems[i].position) {\r\n\t          // remove this item if no method was specified, or, if the method matches\r\n\t\r\n\t          if (!oMethod || (oMethod === onPositionItems[i].method)) {\r\n\t\r\n\t            if (onPositionItems[i].fired) {\r\n\t              // decrement \"fired\" counter, too\r\n\t              onPositionFired--;\r\n\t            }\r\n\t\r\n\t            onPositionItems.splice(i, 1);\r\n\t\r\n\t          }\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    this._processOnPosition = function() {\r\n\t\r\n\t      var i, item, j = onPositionItems.length;\r\n\t\r\n\t      if (!j || !s.playState || onPositionFired >= j) return false;\r\n\t\r\n\t      for (i = j - 1; i >= 0; i--) {\r\n\t\r\n\t        item = onPositionItems[i];\r\n\t\r\n\t        if (!item.fired && s.position >= item.position) {\r\n\t\r\n\t          item.fired = true;\r\n\t          onPositionFired++;\r\n\t          item.method.apply(item.scope, [item.position]);\r\n\t\r\n\t          //  reset j -- onPositionItems.length can be changed in the item callback above... occasionally breaking the loop.\r\n\t          j = onPositionItems.length;\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      return true;\r\n\t\r\n\t    };\r\n\t\r\n\t    this._resetOnPosition = function(nPosition) {\r\n\t\r\n\t      // reset \"fired\" for items interested in this position\r\n\t      var i, item, j = onPositionItems.length;\r\n\t\r\n\t      if (!j) return false;\r\n\t\r\n\t      for (i = j - 1; i >= 0; i--) {\r\n\t\r\n\t        item = onPositionItems[i];\r\n\t\r\n\t        if (item.fired && nPosition <= item.position) {\r\n\t          item.fired = false;\r\n\t          onPositionFired--;\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      return true;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * SMSound() private internals\r\n\t     * --------------------------------\r\n\t     */\r\n\t\r\n\t    applyFromTo = function() {\r\n\t\r\n\t      var instanceOptions = s._iO,\r\n\t          f = instanceOptions.from,\r\n\t          t = instanceOptions.to,\r\n\t          start, end;\r\n\t\r\n\t      end = function() {\r\n\t\r\n\t        // end has been reached.\r\n\t        sm2._wD(s.id + ': \"To\" time of ' + t + ' reached.');\r\n\t\r\n\t        // detach listener\r\n\t        s.clearOnPosition(t, end);\r\n\t\r\n\t        // stop should clear this, too\r\n\t        s.stop();\r\n\t\r\n\t      };\r\n\t\r\n\t      start = function() {\r\n\t\r\n\t        sm2._wD(s.id + ': Playing \"from\" ' + f);\r\n\t\r\n\t        // add listener for end\r\n\t        if (t !== null && !isNaN(t)) {\r\n\t          s.onPosition(t, end);\r\n\t        }\r\n\t\r\n\t      };\r\n\t\r\n\t      if (f !== null && !isNaN(f)) {\r\n\t\r\n\t        // apply to instance options, guaranteeing correct start position.\r\n\t        instanceOptions.position = f;\r\n\t\r\n\t        // multiShot timing can't be tracked, so prevent that.\r\n\t        instanceOptions.multiShot = false;\r\n\t\r\n\t        start();\r\n\t\r\n\t      }\r\n\t\r\n\t      // return updated instanceOptions including starting position\r\n\t      return instanceOptions;\r\n\t\r\n\t    };\r\n\t\r\n\t    attachOnPosition = function() {\r\n\t\r\n\t      var item,\r\n\t          op = s._iO.onposition;\r\n\t\r\n\t      // attach onposition things, if any, now.\r\n\t\r\n\t      if (op) {\r\n\t\r\n\t        for (item in op) {\r\n\t          if (op.hasOwnProperty(item)) {\r\n\t            s.onPosition(parseInt(item, 10), op[item]);\r\n\t          }\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    detachOnPosition = function() {\r\n\t\r\n\t      var item,\r\n\t          op = s._iO.onposition;\r\n\t\r\n\t      // detach any onposition()-style listeners.\r\n\t\r\n\t      if (op) {\r\n\t\r\n\t        for (item in op) {\r\n\t          if (op.hasOwnProperty(item)) {\r\n\t            s.clearOnPosition(parseInt(item, 10));\r\n\t          }\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    start_html5_timer = function() {\r\n\t\r\n\t      if (s.isHTML5) {\r\n\t        startTimer(s);\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    stop_html5_timer = function() {\r\n\t\r\n\t      if (s.isHTML5) {\r\n\t        stopTimer(s);\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    resetProperties = function(retainPosition) {\r\n\t\r\n\t      if (!retainPosition) {\r\n\t        onPositionItems = [];\r\n\t        onPositionFired = 0;\r\n\t      }\r\n\t\r\n\t      onplay_called = false;\r\n\t\r\n\t      s._hasTimer = null;\r\n\t      s._a = null;\r\n\t      s._html5_canplay = false;\r\n\t      s.bytesLoaded = null;\r\n\t      s.bytesTotal = null;\r\n\t      s.duration = (s._iO && s._iO.duration ? s._iO.duration : null);\r\n\t      s.durationEstimate = null;\r\n\t      s.buffered = [];\r\n\t\r\n\t      // legacy: 1D array\r\n\t      s.eqData = [];\r\n\t\r\n\t      s.eqData.left = [];\r\n\t      s.eqData.right = [];\r\n\t\r\n\t      s.failures = 0;\r\n\t      s.isBuffering = false;\r\n\t      s.instanceOptions = {};\r\n\t      s.instanceCount = 0;\r\n\t      s.loaded = false;\r\n\t      s.metadata = {};\r\n\t\r\n\t      // 0 = uninitialised, 1 = loading, 2 = failed/error, 3 = loaded/success\r\n\t      s.readyState = 0;\r\n\t\r\n\t      s.muted = false;\r\n\t      s.paused = false;\r\n\t\r\n\t      s.peakData = {\r\n\t        left: 0,\r\n\t        right: 0\r\n\t      };\r\n\t\r\n\t      s.waveformData = {\r\n\t        left: [],\r\n\t        right: []\r\n\t      };\r\n\t\r\n\t      s.playState = 0;\r\n\t      s.position = null;\r\n\t\r\n\t      s.id3 = {};\r\n\t\r\n\t    };\r\n\t\r\n\t    resetProperties();\r\n\t\r\n\t    /**\r\n\t     * Pseudo-private SMSound internals\r\n\t     * --------------------------------\r\n\t     */\r\n\t\r\n\t    this._onTimer = function(bForce) {\r\n\t\r\n\t      /**\r\n\t       * HTML5-only _whileplaying() etc.\r\n\t       * called from both HTML5 native events, and polling/interval-based timers\r\n\t       * mimics flash and fires only when time/duration change, so as to be polling-friendly\r\n\t       */\r\n\t\r\n\t      var duration, isNew = false, time, x = {};\r\n\t\r\n\t      if (s._hasTimer || bForce) {\r\n\t\r\n\t        // TODO: May not need to track readyState (1 = loading)\r\n\t\r\n\t        if (s._a && (bForce || ((s.playState > 0 || s.readyState === 1) && !s.paused))) {\r\n\t\r\n\t          duration = s._get_html5_duration();\r\n\t\r\n\t          if (duration !== lastHTML5State.duration) {\r\n\t\r\n\t            lastHTML5State.duration = duration;\r\n\t            s.duration = duration;\r\n\t            isNew = true;\r\n\t\r\n\t          }\r\n\t\r\n\t          // TODO: investigate why this goes wack if not set/re-set each time.\r\n\t          s.durationEstimate = s.duration;\r\n\t\r\n\t          time = (s._a.currentTime * msecScale || 0);\r\n\t\r\n\t          if (time !== lastHTML5State.time) {\r\n\t\r\n\t            lastHTML5State.time = time;\r\n\t            isNew = true;\r\n\t\r\n\t          }\r\n\t\r\n\t          if (isNew || bForce) {\r\n\t\r\n\t            s._whileplaying(time, x, x, x, x);\r\n\t\r\n\t          }\r\n\t\r\n\t        }/* else {\r\n\t\r\n\t          // sm2._wD('_onTimer: Warn for \"'+s.id+'\": '+(!s._a?'Could not find element. ':'')+(s.playState === 0?'playState bad, 0?':'playState = '+s.playState+', OK'));\r\n\t\r\n\t          return false;\r\n\t\r\n\t        }*/\r\n\t\r\n\t      }\r\n\t\r\n\t      return isNew;\r\n\t\r\n\t    };\r\n\t\r\n\t    this._get_html5_duration = function() {\r\n\t\r\n\t      var instanceOptions = s._iO,\r\n\t          // if audio object exists, use its duration - else, instance option duration (if provided - it's a hack, really, and should be retired) OR null\r\n\t          d = (s._a && s._a.duration ? s._a.duration * msecScale : (instanceOptions && instanceOptions.duration ? instanceOptions.duration : null)),\r\n\t          result = (d && !isNaN(d) && d !== Infinity ? d : null);\r\n\t\r\n\t      return result;\r\n\t\r\n\t    };\r\n\t\r\n\t    this._apply_loop = function(a, nLoops) {\r\n\t\r\n\t      /**\r\n\t       * boolean instead of \"loop\", for webkit? - spec says string. http://www.w3.org/TR/html-markup/audio.html#audio.attrs.loop\r\n\t       * note that loop is either off or infinite under HTML5, unlike Flash which allows arbitrary loop counts to be specified.\r\n\t       */\r\n\t\r\n\t      // <d>\r\n\t      if (!a.loop && nLoops > 1) {\r\n\t        sm2._wD('Note: Native HTML5 looping is infinite.', 1);\r\n\t      }\r\n\t      // </d>\r\n\t\r\n\t      a.loop = (nLoops > 1 ? 'loop' : '');\r\n\t\r\n\t    };\r\n\t\r\n\t    this._setup_html5 = function(options) {\r\n\t\r\n\t      var instanceOptions = mixin(s._iO, options),\r\n\t          a = useGlobalHTML5Audio ? globalHTML5Audio : s._a,\r\n\t          dURL = decodeURI(instanceOptions.url),\r\n\t          sameURL;\r\n\t\r\n\t      /**\r\n\t       * \"First things first, I, Poppa...\" (reset the previous state of the old sound, if playing)\r\n\t       * Fixes case with devices that can only play one sound at a time\r\n\t       * Otherwise, other sounds in mid-play will be terminated without warning and in a stuck state\r\n\t       */\r\n\t\r\n\t      if (useGlobalHTML5Audio) {\r\n\t\r\n\t        if (dURL === decodeURI(lastGlobalHTML5URL)) {\r\n\t          // global HTML5 audio: re-use of URL\r\n\t          sameURL = true;\r\n\t        }\r\n\t\r\n\t      } else if (dURL === decodeURI(lastURL)) {\r\n\t\r\n\t        // options URL is the same as the \"last\" URL, and we used (loaded) it\r\n\t        sameURL = true;\r\n\t\r\n\t      }\r\n\t\r\n\t      if (a) {\r\n\t\r\n\t        if (a._s) {\r\n\t\r\n\t          if (useGlobalHTML5Audio) {\r\n\t\r\n\t            if (a._s && a._s.playState && !sameURL) {\r\n\t\r\n\t              // global HTML5 audio case, and loading a new URL. stop the currently-playing one.\r\n\t              a._s.stop();\r\n\t\r\n\t            }\r\n\t\r\n\t          } else if (!useGlobalHTML5Audio && dURL === decodeURI(lastURL)) {\r\n\t\r\n\t            // non-global HTML5 reuse case: same url, ignore request\r\n\t            s._apply_loop(a, instanceOptions.loops);\r\n\t\r\n\t            return a;\r\n\t\r\n\t          }\r\n\t\r\n\t        }\r\n\t\r\n\t        if (!sameURL) {\r\n\t\r\n\t          // don't retain onPosition() stuff with new URLs.\r\n\t\r\n\t          if (lastURL) {\r\n\t            resetProperties(false);\r\n\t          }\r\n\t\r\n\t          // assign new HTML5 URL\r\n\t\r\n\t          a.src = instanceOptions.url;\r\n\t\r\n\t          s.url = instanceOptions.url;\r\n\t\r\n\t          lastURL = instanceOptions.url;\r\n\t\r\n\t          lastGlobalHTML5URL = instanceOptions.url;\r\n\t\r\n\t          a._called_load = false;\r\n\t\r\n\t        }\r\n\t\r\n\t      } else {\r\n\t\r\n\t        if (instanceOptions.autoLoad || instanceOptions.autoPlay) {\r\n\t\r\n\t          s._a = new Audio(instanceOptions.url);\r\n\t          s._a.load();\r\n\t\r\n\t        } else {\r\n\t\r\n\t          // null for stupid Opera 9.64 case\r\n\t          s._a = (isOpera && opera.version() < 10 ? new Audio(null) : new Audio());\r\n\t\r\n\t        }\r\n\t\r\n\t        // assign local reference\r\n\t        a = s._a;\r\n\t\r\n\t        a._called_load = false;\r\n\t\r\n\t        if (useGlobalHTML5Audio) {\r\n\t\r\n\t          globalHTML5Audio = a;\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      s.isHTML5 = true;\r\n\t\r\n\t      // store a ref on the track\r\n\t      s._a = a;\r\n\t\r\n\t      // store a ref on the audio\r\n\t      a._s = s;\r\n\t\r\n\t      add_html5_events();\r\n\t\r\n\t      s._apply_loop(a, instanceOptions.loops);\r\n\t\r\n\t      if (instanceOptions.autoLoad || instanceOptions.autoPlay) {\r\n\t\r\n\t        s.load();\r\n\t\r\n\t      } else {\r\n\t\r\n\t        // early HTML5 implementation (non-standard)\r\n\t        a.autobuffer = false;\r\n\t\r\n\t        // standard ('none' is also an option.)\r\n\t        a.preload = 'auto';\r\n\t\r\n\t      }\r\n\t\r\n\t      return a;\r\n\t\r\n\t    };\r\n\t\r\n\t    add_html5_events = function() {\r\n\t\r\n\t      if (s._a._added_events) return false;\r\n\t\r\n\t      var f;\r\n\t\r\n\t      function add(oEvt, oFn, bCapture) {\r\n\t        return s._a ? s._a.addEventListener(oEvt, oFn, bCapture || false) : null;\r\n\t      }\r\n\t\r\n\t      s._a._added_events = true;\r\n\t\r\n\t      for (f in html5_events) {\r\n\t        if (html5_events.hasOwnProperty(f)) {\r\n\t          add(f, html5_events[f]);\r\n\t        }\r\n\t      }\r\n\t\r\n\t      return true;\r\n\t\r\n\t    };\r\n\t\r\n\t    remove_html5_events = function() {\r\n\t\r\n\t      // Remove event listeners\r\n\t\r\n\t      var f;\r\n\t\r\n\t      function remove(oEvt, oFn, bCapture) {\r\n\t        return (s._a ? s._a.removeEventListener(oEvt, oFn, bCapture || false) : null);\r\n\t      }\r\n\t\r\n\t      sm2._wD(s.id + ': Removing event listeners');\r\n\t      s._a._added_events = false;\r\n\t\r\n\t      for (f in html5_events) {\r\n\t        if (html5_events.hasOwnProperty(f)) {\r\n\t          remove(f, html5_events[f]);\r\n\t        }\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Pseudo-private event internals\r\n\t     * ------------------------------\r\n\t     */\r\n\t\r\n\t    this._onload = function(nSuccess) {\r\n\t\r\n\t      var fN,\r\n\t          // check for duration to prevent false positives from flash 8 when loading from cache.\r\n\t          loadOK = !!nSuccess || (!s.isHTML5 && fV === 8 && s.duration);\r\n\t\r\n\t      // <d>\r\n\t      fN = s.id + ': ';\r\n\t      sm2._wD(fN + (loadOK ? 'onload()' : 'Failed to load / invalid sound?' + (!s.duration ? ' Zero-length duration reported.' : ' -') + ' (' + s.url + ')'), (loadOK ? 1 : 2));\r\n\t\r\n\t      if (!loadOK && !s.isHTML5) {\r\n\t        if (sm2.sandbox.noRemote === true) {\r\n\t          sm2._wD(fN + str('noNet'), 1);\r\n\t        }\r\n\t        if (sm2.sandbox.noLocal === true) {\r\n\t          sm2._wD(fN + str('noLocal'), 1);\r\n\t        }\r\n\t      }\r\n\t      // </d>\r\n\t\r\n\t      s.loaded = loadOK;\r\n\t      s.readyState = (loadOK ? 3 : 2);\r\n\t      s._onbufferchange(0);\r\n\t\r\n\t      if (!loadOK && !s.isHTML5) {\r\n\t        // note: no error code from Flash.\r\n\t        s._onerror();\r\n\t      }\r\n\t\r\n\t      if (s._iO.onload) {\r\n\t        wrapCallback(s, function() {\r\n\t          s._iO.onload.apply(s, [loadOK]);\r\n\t        });\r\n\t      }\r\n\t\r\n\t      return true;\r\n\t\r\n\t    };\r\n\t\r\n\t    this._onerror = function(errorCode, description) {\r\n\t\r\n\t      // https://html.spec.whatwg.org/multipage/embedded-content.html#error-codes\r\n\t      if (s._iO.onerror) {\r\n\t        wrapCallback(s, function() {\r\n\t          s._iO.onerror.apply(s, [errorCode, description]);\r\n\t        });\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    this._onbufferchange = function(nIsBuffering) {\r\n\t\r\n\t      // ignore if not playing\r\n\t      if (s.playState === 0) return false;\r\n\t\r\n\t      if ((nIsBuffering && s.isBuffering) || (!nIsBuffering && !s.isBuffering)) return false;\r\n\t\r\n\t      s.isBuffering = (nIsBuffering === 1);\r\n\t\r\n\t      if (s._iO.onbufferchange) {\r\n\t        sm2._wD(s.id + ': Buffer state change: ' + nIsBuffering);\r\n\t        s._iO.onbufferchange.apply(s, [nIsBuffering]);\r\n\t      }\r\n\t\r\n\t      return true;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Playback may have stopped due to buffering, or related reason.\r\n\t     * This state can be encountered on iOS < 6 when auto-play is blocked.\r\n\t     */\r\n\t\r\n\t    this._onsuspend = function() {\r\n\t\r\n\t      if (s._iO.onsuspend) {\r\n\t        sm2._wD(s.id + ': Playback suspended');\r\n\t        s._iO.onsuspend.apply(s);\r\n\t      }\r\n\t\r\n\t      return true;\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * flash 9/movieStar + RTMP-only method, should fire only once at most\r\n\t     * at this point we just recreate failed sounds rather than trying to reconnect\r\n\t     */\r\n\t\r\n\t    this._onfailure = function(msg, level, code) {\r\n\t\r\n\t      s.failures++;\r\n\t      sm2._wD(s.id + ': Failure (' + s.failures + '): ' + msg);\r\n\t\r\n\t      if (s._iO.onfailure && s.failures === 1) {\r\n\t        s._iO.onfailure(msg, level, code);\r\n\t      } else {\r\n\t        sm2._wD(s.id + ': Ignoring failure');\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * flash 9/movieStar + RTMP-only method for unhandled warnings/exceptions from Flash\r\n\t     * e.g., RTMP \"method missing\" warning (non-fatal) for getStreamLength on server\r\n\t     */\r\n\t\r\n\t    this._onwarning = function(msg, level, code) {\r\n\t\r\n\t      if (s._iO.onwarning) {\r\n\t        s._iO.onwarning(msg, level, code);\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    this._onfinish = function() {\r\n\t\r\n\t      // store local copy before it gets trashed...\r\n\t      var io_onfinish = s._iO.onfinish;\r\n\t\r\n\t      s._onbufferchange(0);\r\n\t      s._resetOnPosition(0);\r\n\t\r\n\t      // reset some state items\r\n\t      if (s.instanceCount) {\r\n\t\r\n\t        s.instanceCount--;\r\n\t\r\n\t        if (!s.instanceCount) {\r\n\t\r\n\t          // remove onPosition listeners, if any\r\n\t          detachOnPosition();\r\n\t\r\n\t          // reset instance options\r\n\t          s.playState = 0;\r\n\t          s.paused = false;\r\n\t          s.instanceCount = 0;\r\n\t          s.instanceOptions = {};\r\n\t          s._iO = {};\r\n\t          stop_html5_timer();\r\n\t\r\n\t          // reset position, too\r\n\t          if (s.isHTML5) {\r\n\t            s.position = 0;\r\n\t          }\r\n\t\r\n\t        }\r\n\t\r\n\t        if (!s.instanceCount || s._iO.multiShotEvents) {\r\n\t          // fire onfinish for last, or every instance\r\n\t          if (io_onfinish) {\r\n\t            sm2._wD(s.id + ': onfinish()');\r\n\t            wrapCallback(s, function() {\r\n\t              io_onfinish.apply(s);\r\n\t            });\r\n\t          }\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    this._whileloading = function(nBytesLoaded, nBytesTotal, nDuration, nBufferLength) {\r\n\t\r\n\t      var instanceOptions = s._iO;\r\n\t\r\n\t      s.bytesLoaded = nBytesLoaded;\r\n\t      s.bytesTotal = nBytesTotal;\r\n\t      s.duration = Math.floor(nDuration);\r\n\t      s.bufferLength = nBufferLength;\r\n\t\r\n\t      if (!s.isHTML5 && !instanceOptions.isMovieStar) {\r\n\t\r\n\t        if (instanceOptions.duration) {\r\n\t          // use duration from options, if specified and larger. nobody should be specifying duration in options, actually, and it should be retired.\r\n\t          s.durationEstimate = (s.duration > instanceOptions.duration) ? s.duration : instanceOptions.duration;\r\n\t        } else {\r\n\t          s.durationEstimate = parseInt((s.bytesTotal / s.bytesLoaded) * s.duration, 10);\r\n\t        }\r\n\t\r\n\t      } else {\r\n\t\r\n\t        s.durationEstimate = s.duration;\r\n\t\r\n\t      }\r\n\t\r\n\t      // for flash, reflect sequential-load-style buffering\r\n\t      if (!s.isHTML5) {\r\n\t        s.buffered = [{\r\n\t          start: 0,\r\n\t          end: s.duration\r\n\t        }];\r\n\t      }\r\n\t\r\n\t      // allow whileloading to fire even if \"load\" fired under HTML5, due to HTTP range/partials\r\n\t      if ((s.readyState !== 3 || s.isHTML5) && instanceOptions.whileloading) {\r\n\t        instanceOptions.whileloading.apply(s);\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    this._whileplaying = function(nPosition, oPeakData, oWaveformDataLeft, oWaveformDataRight, oEQData) {\r\n\t\r\n\t      var instanceOptions = s._iO,\r\n\t          eqLeft;\r\n\t\r\n\t      // flash safety net\r\n\t      if (isNaN(nPosition) || nPosition === null) return false;\r\n\t\r\n\t      // Safari HTML5 play() may return small -ve values when starting from position: 0, eg. -50.120396875. Unexpected/invalid per W3, I think. Normalize to 0.\r\n\t      s.position = Math.max(0, nPosition);\r\n\t\r\n\t      s._processOnPosition();\r\n\t\r\n\t      if (!s.isHTML5 && fV > 8) {\r\n\t\r\n\t        if (instanceOptions.usePeakData && oPeakData !== _undefined && oPeakData) {\r\n\t          s.peakData = {\r\n\t            left: oPeakData.leftPeak,\r\n\t            right: oPeakData.rightPeak\r\n\t          };\r\n\t        }\r\n\t\r\n\t        if (instanceOptions.useWaveformData && oWaveformDataLeft !== _undefined && oWaveformDataLeft) {\r\n\t          s.waveformData = {\r\n\t            left: oWaveformDataLeft.split(','),\r\n\t            right: oWaveformDataRight.split(',')\r\n\t          };\r\n\t        }\r\n\t\r\n\t        if (instanceOptions.useEQData) {\r\n\t          if (oEQData !== _undefined && oEQData && oEQData.leftEQ) {\r\n\t            eqLeft = oEQData.leftEQ.split(',');\r\n\t            s.eqData = eqLeft;\r\n\t            s.eqData.left = eqLeft;\r\n\t            if (oEQData.rightEQ !== _undefined && oEQData.rightEQ) {\r\n\t              s.eqData.right = oEQData.rightEQ.split(',');\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      if (s.playState === 1) {\r\n\t\r\n\t        // special case/hack: ensure buffering is false if loading from cache (and not yet started)\r\n\t        if (!s.isHTML5 && fV === 8 && !s.position && s.isBuffering) {\r\n\t          s._onbufferchange(0);\r\n\t        }\r\n\t\r\n\t        if (instanceOptions.whileplaying) {\r\n\t          // flash may call after actual finish\r\n\t          instanceOptions.whileplaying.apply(s);\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      return true;\r\n\t\r\n\t    };\r\n\t\r\n\t    this._oncaptiondata = function(oData) {\r\n\t\r\n\t      /**\r\n\t       * internal: flash 9 + NetStream (MovieStar/RTMP-only) feature\r\n\t       *\r\n\t       * @param {object} oData\r\n\t       */\r\n\t\r\n\t      sm2._wD(s.id + ': Caption data received.');\r\n\t\r\n\t      s.captiondata = oData;\r\n\t\r\n\t      if (s._iO.oncaptiondata) {\r\n\t        s._iO.oncaptiondata.apply(s, [oData]);\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    this._onmetadata = function(oMDProps, oMDData) {\r\n\t\r\n\t      /**\r\n\t       * internal: flash 9 + NetStream (MovieStar/RTMP-only) feature\r\n\t       * RTMP may include song title, MovieStar content may include encoding info\r\n\t       *\r\n\t       * @param {array} oMDProps (names)\r\n\t       * @param {array} oMDData (values)\r\n\t       */\r\n\t\r\n\t      sm2._wD(s.id + ': Metadata received.');\r\n\t\r\n\t      var oData = {}, i, j;\r\n\t\r\n\t      for (i = 0, j = oMDProps.length; i < j; i++) {\r\n\t        oData[oMDProps[i]] = oMDData[i];\r\n\t      }\r\n\t\r\n\t      s.metadata = oData;\r\n\t\r\n\t      if (s._iO.onmetadata) {\r\n\t        s._iO.onmetadata.call(s, s.metadata);\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    this._onid3 = function(oID3Props, oID3Data) {\r\n\t\r\n\t      /**\r\n\t       * internal: flash 8 + flash 9 ID3 feature\r\n\t       * may include artist, song title etc.\r\n\t       *\r\n\t       * @param {array} oID3Props (names)\r\n\t       * @param {array} oID3Data (values)\r\n\t       */\r\n\t\r\n\t      sm2._wD(s.id + ': ID3 data received.');\r\n\t\r\n\t      var oData = [], i, j;\r\n\t\r\n\t      for (i = 0, j = oID3Props.length; i < j; i++) {\r\n\t        oData[oID3Props[i]] = oID3Data[i];\r\n\t      }\r\n\t\r\n\t      s.id3 = mixin(s.id3, oData);\r\n\t\r\n\t      if (s._iO.onid3) {\r\n\t        s._iO.onid3.apply(s);\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    // flash/RTMP-only\r\n\t\r\n\t    this._onconnect = function(bSuccess) {\r\n\t\r\n\t      bSuccess = (bSuccess === 1);\r\n\t      sm2._wD(s.id + ': ' + (bSuccess ? 'Connected.' : 'Failed to connect? - ' + s.url), (bSuccess ? 1 : 2));\r\n\t      s.connected = bSuccess;\r\n\t\r\n\t      if (bSuccess) {\r\n\t\r\n\t        s.failures = 0;\r\n\t\r\n\t        if (idCheck(s.id)) {\r\n\t          if (s.getAutoPlay()) {\r\n\t            // only update the play state if auto playing\r\n\t            s.play(_undefined, s.getAutoPlay());\r\n\t          } else if (s._iO.autoLoad) {\r\n\t            s.load();\r\n\t          }\r\n\t        }\r\n\t\r\n\t        if (s._iO.onconnect) {\r\n\t          s._iO.onconnect.apply(s, [bSuccess]);\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    this._ondataerror = function(sError) {\r\n\t\r\n\t      // flash 9 wave/eq data handler\r\n\t      // hack: called at start, and end from flash at/after onfinish()\r\n\t      if (s.playState > 0) {\r\n\t        sm2._wD(s.id + ': Data error: ' + sError);\r\n\t        if (s._iO.ondataerror) {\r\n\t          s._iO.ondataerror.apply(s);\r\n\t        }\r\n\t      }\r\n\t\r\n\t    };\r\n\t\r\n\t    // <d>\r\n\t    this._debug();\r\n\t    // </d>\r\n\t\r\n\t  }; // SMSound()\r\n\t\r\n\t  /**\r\n\t   * Private SoundManager internals\r\n\t   * ------------------------------\r\n\t   */\r\n\t\r\n\t  getDocument = function() {\r\n\t\r\n\t    return (doc.body || doc.getElementsByTagName('div')[0]);\r\n\t\r\n\t  };\r\n\t\r\n\t  id = function(sID) {\r\n\t\r\n\t    return doc.getElementById(sID);\r\n\t\r\n\t  };\r\n\t\r\n\t  mixin = function(oMain, oAdd) {\r\n\t\r\n\t    // non-destructive merge\r\n\t    var o1 = (oMain || {}), o2, o;\r\n\t\r\n\t    // if unspecified, o2 is the default options object\r\n\t    o2 = (oAdd === _undefined ? sm2.defaultOptions : oAdd);\r\n\t\r\n\t    for (o in o2) {\r\n\t\r\n\t      if (o2.hasOwnProperty(o) && o1[o] === _undefined) {\r\n\t\r\n\t        if (typeof o2[o] !== 'object' || o2[o] === null) {\r\n\t\r\n\t          // assign directly\r\n\t          o1[o] = o2[o];\r\n\t\r\n\t        } else {\r\n\t\r\n\t          // recurse through o2\r\n\t          o1[o] = mixin(o1[o], o2[o]);\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    return o1;\r\n\t\r\n\t  };\r\n\t\r\n\t  wrapCallback = function(oSound, callback) {\r\n\t\r\n\t    /**\r\n\t     * 03/03/2013: Fix for Flash Player 11.6.602.171 + Flash 8 (flashVersion = 8) SWF issue\r\n\t     * setTimeout() fix for certain SMSound callbacks like onload() and onfinish(), where subsequent calls like play() and load() fail when Flash Player 11.6.602.171 is installed, and using soundManager with flashVersion = 8 (which is the default).\r\n\t     * Not sure of exact cause. Suspect race condition and/or invalid (NaN-style) position argument trickling down to the next JS -> Flash _start() call, in the play() case.\r\n\t     * Fix: setTimeout() to yield, plus safer null / NaN checking on position argument provided to Flash.\r\n\t     * https://getsatisfaction.com/schillmania/topics/recent_chrome_update_seems_to_have_broken_my_sm2_audio_player\r\n\t     */\r\n\t    if (!oSound.isHTML5 && fV === 8) {\r\n\t      window.setTimeout(callback, 0);\r\n\t    } else {\r\n\t      callback();\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  // additional soundManager properties that soundManager.setup() will accept\r\n\t\r\n\t  extraOptions = {\r\n\t    onready: 1,\r\n\t    ontimeout: 1,\r\n\t    defaultOptions: 1,\r\n\t    flash9Options: 1,\r\n\t    movieStarOptions: 1\r\n\t  };\r\n\t\r\n\t  assign = function(o, oParent) {\r\n\t\r\n\t    /**\r\n\t     * recursive assignment of properties, soundManager.setup() helper\r\n\t     * allows property assignment based on whitelist\r\n\t     */\r\n\t\r\n\t    var i,\r\n\t        result = true,\r\n\t        hasParent = (oParent !== _undefined),\r\n\t        setupOptions = sm2.setupOptions,\r\n\t        bonusOptions = extraOptions;\r\n\t\r\n\t    // <d>\r\n\t\r\n\t    // if soundManager.setup() called, show accepted parameters.\r\n\t\r\n\t    if (o === _undefined) {\r\n\t\r\n\t      result = [];\r\n\t\r\n\t      for (i in setupOptions) {\r\n\t\r\n\t        if (setupOptions.hasOwnProperty(i)) {\r\n\t          result.push(i);\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      for (i in bonusOptions) {\r\n\t\r\n\t        if (bonusOptions.hasOwnProperty(i)) {\r\n\t\r\n\t          if (typeof sm2[i] === 'object') {\r\n\t            result.push(i + ': {...}');\r\n\t          } else if (sm2[i] instanceof Function) {\r\n\t            result.push(i + ': function() {...}');\r\n\t          } else {\r\n\t            result.push(i);\r\n\t          }\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      sm2._wD(str('setup', result.join(', ')));\r\n\t\r\n\t      return false;\r\n\t\r\n\t    }\r\n\t\r\n\t    // </d>\r\n\t\r\n\t    for (i in o) {\r\n\t\r\n\t      if (o.hasOwnProperty(i)) {\r\n\t\r\n\t        // if not an {object} we want to recurse through...\r\n\t\r\n\t        if (typeof o[i] !== 'object' || o[i] === null || o[i] instanceof Array || o[i] instanceof RegExp) {\r\n\t\r\n\t          // check \"allowed\" options\r\n\t\r\n\t          if (hasParent && bonusOptions[oParent] !== _undefined) {\r\n\t\r\n\t            // valid recursive / nested object option, eg., { defaultOptions: { volume: 50 } }\r\n\t            sm2[oParent][i] = o[i];\r\n\t\r\n\t          } else if (setupOptions[i] !== _undefined) {\r\n\t\r\n\t            // special case: assign to setupOptions object, which soundManager property references\r\n\t            sm2.setupOptions[i] = o[i];\r\n\t\r\n\t            // assign directly to soundManager, too\r\n\t            sm2[i] = o[i];\r\n\t\r\n\t          } else if (bonusOptions[i] === _undefined) {\r\n\t\r\n\t            // invalid or disallowed parameter. complain.\r\n\t            complain(str((sm2[i] === _undefined ? 'setupUndef' : 'setupError'), i), 2);\r\n\t\r\n\t            result = false;\r\n\t\r\n\t          } else if (sm2[i] instanceof Function) {\r\n\t\r\n\t            /**\r\n\t             * valid extraOptions (bonusOptions) parameter.\r\n\t             * is it a method, like onready/ontimeout? call it.\r\n\t             * multiple parameters should be in an array, eg. soundManager.setup({onready: [myHandler, myScope]});\r\n\t             */\r\n\t            sm2[i].apply(sm2, (o[i] instanceof Array ? o[i] : [o[i]]));\r\n\t\r\n\t          } else {\r\n\t\r\n\t            // good old-fashioned direct assignment\r\n\t            sm2[i] = o[i];\r\n\t\r\n\t          }\r\n\t\r\n\t        } else if (bonusOptions[i] === _undefined) {\r\n\t\r\n\t          // recursion case, eg., { defaultOptions: { ... } }\r\n\t\r\n\t          // invalid or disallowed parameter. complain.\r\n\t          complain(str((sm2[i] === _undefined ? 'setupUndef' : 'setupError'), i), 2);\r\n\t\r\n\t          result = false;\r\n\t\r\n\t        } else {\r\n\t\r\n\t          // recurse through object\r\n\t          return assign(o[i], i);\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    return result;\r\n\t\r\n\t  };\r\n\t\r\n\t  function preferFlashCheck(kind) {\r\n\t\r\n\t    // whether flash should play a given type\r\n\t    return (sm2.preferFlash && hasFlash && !sm2.ignoreFlash && (sm2.flash[kind] !== _undefined && sm2.flash[kind]));\r\n\t\r\n\t  }\r\n\t\r\n\t  /**\r\n\t   * Internal DOM2-level event helpers\r\n\t   * ---------------------------------\r\n\t   */\r\n\t\r\n\t  event = (function() {\r\n\t\r\n\t    // normalize event methods\r\n\t    var old = (window.attachEvent),\r\n\t    evt = {\r\n\t      add: (old ? 'attachEvent' : 'addEventListener'),\r\n\t      remove: (old ? 'detachEvent' : 'removeEventListener')\r\n\t    };\r\n\t\r\n\t    // normalize \"on\" event prefix, optional capture argument\r\n\t    function getArgs(oArgs) {\r\n\t\r\n\t      var args = slice.call(oArgs),\r\n\t          len = args.length;\r\n\t\r\n\t      if (old) {\r\n\t        // prefix\r\n\t        args[1] = 'on' + args[1];\r\n\t        if (len > 3) {\r\n\t          // no capture\r\n\t          args.pop();\r\n\t        }\r\n\t      } else if (len === 3) {\r\n\t        args.push(false);\r\n\t      }\r\n\t\r\n\t      return args;\r\n\t\r\n\t    }\r\n\t\r\n\t    function apply(args, sType) {\r\n\t\r\n\t      // normalize and call the event method, with the proper arguments\r\n\t      var element = args.shift(),\r\n\t          method = [evt[sType]];\r\n\t\r\n\t      if (old) {\r\n\t        // old IE can't do apply().\r\n\t        element[method](args[0], args[1]);\r\n\t      } else {\r\n\t        element[method].apply(element, args);\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    function add() {\r\n\t      apply(getArgs(arguments), 'add');\r\n\t    }\r\n\t\r\n\t    function remove() {\r\n\t      apply(getArgs(arguments), 'remove');\r\n\t    }\r\n\t\r\n\t    return {\r\n\t      add: add,\r\n\t      remove: remove\r\n\t    };\r\n\t\r\n\t  }());\r\n\t\r\n\t  /**\r\n\t   * Internal HTML5 event handling\r\n\t   * -----------------------------\r\n\t   */\r\n\t\r\n\t  function html5_event(oFn) {\r\n\t\r\n\t    // wrap html5 event handlers so we don't call them on destroyed and/or unloaded sounds\r\n\t\r\n\t    return function(e) {\r\n\t\r\n\t      var s = this._s,\r\n\t          result;\r\n\t\r\n\t      if (!s || !s._a) {\r\n\t        // <d>\r\n\t        if (s && s.id) {\r\n\t          sm2._wD(s.id + ': Ignoring ' + e.type);\r\n\t        } else {\r\n\t          sm2._wD(h5 + 'Ignoring ' + e.type);\r\n\t        }\r\n\t        // </d>\r\n\t        result = null;\r\n\t      } else {\r\n\t        result = oFn.call(this, e);\r\n\t      }\r\n\t\r\n\t      return result;\r\n\t\r\n\t    };\r\n\t\r\n\t  }\r\n\t\r\n\t  html5_events = {\r\n\t\r\n\t    // HTML5 event-name-to-handler map\r\n\t\r\n\t    abort: html5_event(function() {\r\n\t\r\n\t      sm2._wD(this._s.id + ': abort');\r\n\t\r\n\t    }),\r\n\t\r\n\t    // enough has loaded to play\r\n\t\r\n\t    canplay: html5_event(function() {\r\n\t\r\n\t      var s = this._s,\r\n\t          position1K;\r\n\t\r\n\t      if (s._html5_canplay) {\r\n\t        // this event has already fired. ignore.\r\n\t        return;\r\n\t      }\r\n\t\r\n\t      s._html5_canplay = true;\r\n\t      sm2._wD(s.id + ': canplay');\r\n\t      s._onbufferchange(0);\r\n\t\r\n\t      // position according to instance options\r\n\t      position1K = (s._iO.position !== _undefined && !isNaN(s._iO.position) ? s._iO.position / msecScale : null);\r\n\t\r\n\t      // set the position if position was provided before the sound loaded\r\n\t      if (this.currentTime !== position1K) {\r\n\t        sm2._wD(s.id + ': canplay: Setting position to ' + position1K);\r\n\t        try {\r\n\t          this.currentTime = position1K;\r\n\t        } catch(ee) {\r\n\t          sm2._wD(s.id + ': canplay: Setting position of ' + position1K + ' failed: ' + ee.message, 2);\r\n\t        }\r\n\t      }\r\n\t\r\n\t      // hack for HTML5 from/to case\r\n\t      if (s._iO._oncanplay) {\r\n\t        s._iO._oncanplay();\r\n\t      }\r\n\t\r\n\t    }),\r\n\t\r\n\t    canplaythrough: html5_event(function() {\r\n\t\r\n\t      var s = this._s;\r\n\t\r\n\t      if (!s.loaded) {\r\n\t        s._onbufferchange(0);\r\n\t        s._whileloading(s.bytesLoaded, s.bytesTotal, s._get_html5_duration());\r\n\t        s._onload(true);\r\n\t      }\r\n\t\r\n\t    }),\r\n\t\r\n\t    durationchange: html5_event(function() {\r\n\t\r\n\t      // durationchange may fire at various times, probably the safest way to capture accurate/final duration.\r\n\t\r\n\t      var s = this._s,\r\n\t          duration;\r\n\t\r\n\t      duration = s._get_html5_duration();\r\n\t\r\n\t      if (!isNaN(duration) && duration !== s.duration) {\r\n\t\r\n\t        sm2._wD(this._s.id + ': durationchange (' + duration + ')' + (s.duration ? ', previously ' + s.duration : ''));\r\n\t\r\n\t        s.durationEstimate = s.duration = duration;\r\n\t\r\n\t      }\r\n\t\r\n\t    }),\r\n\t\r\n\t    // TODO: Reserved for potential use\r\n\t    /*\r\n\t    emptied: html5_event(function() {\r\n\t\r\n\t      sm2._wD(this._s.id + ': emptied');\r\n\t\r\n\t    }),\r\n\t    */\r\n\t\r\n\t    ended: html5_event(function() {\r\n\t\r\n\t      var s = this._s;\r\n\t\r\n\t      sm2._wD(s.id + ': ended');\r\n\t\r\n\t      s._onfinish();\r\n\t\r\n\t    }),\r\n\t\r\n\t    error: html5_event(function() {\r\n\t\r\n\t      var description = (html5ErrorCodes[this.error.code] || null);\r\n\t      sm2._wD(this._s.id + ': HTML5 error, code ' + this.error.code + (description ? ' (' + description + ')' : ''));\r\n\t      this._s._onload(false);\r\n\t      this._s._onerror(this.error.code, description);\r\n\t\r\n\t    }),\r\n\t\r\n\t    loadeddata: html5_event(function() {\r\n\t\r\n\t      var s = this._s;\r\n\t\r\n\t      sm2._wD(s.id + ': loadeddata');\r\n\t\r\n\t      // safari seems to nicely report progress events, eventually totalling 100%\r\n\t      if (!s._loaded && !isSafari) {\r\n\t        s.duration = s._get_html5_duration();\r\n\t      }\r\n\t\r\n\t    }),\r\n\t\r\n\t    loadedmetadata: html5_event(function() {\r\n\t\r\n\t      sm2._wD(this._s.id + ': loadedmetadata');\r\n\t\r\n\t    }),\r\n\t\r\n\t    loadstart: html5_event(function() {\r\n\t\r\n\t      sm2._wD(this._s.id + ': loadstart');\r\n\t      // assume buffering at first\r\n\t      this._s._onbufferchange(1);\r\n\t\r\n\t    }),\r\n\t\r\n\t    play: html5_event(function() {\r\n\t\r\n\t      // sm2._wD(this._s.id + ': play()');\r\n\t      // once play starts, no buffering\r\n\t      this._s._onbufferchange(0);\r\n\t\r\n\t    }),\r\n\t\r\n\t    playing: html5_event(function() {\r\n\t\r\n\t      sm2._wD(this._s.id + ': playing ' + String.fromCharCode(9835));\r\n\t      // once play starts, no buffering\r\n\t      this._s._onbufferchange(0);\r\n\t\r\n\t    }),\r\n\t\r\n\t    progress: html5_event(function(e) {\r\n\t\r\n\t      // note: can fire repeatedly after \"loaded\" event, due to use of HTTP range/partials\r\n\t\r\n\t      var s = this._s,\r\n\t          i, j, progStr, buffered = 0,\r\n\t          isProgress = (e.type === 'progress'),\r\n\t          ranges = e.target.buffered,\r\n\t          // firefox 3.6 implements e.loaded/total (bytes)\r\n\t          loaded = (e.loaded || 0),\r\n\t          total = (e.total || 1);\r\n\t\r\n\t      // reset the \"buffered\" (loaded byte ranges) array\r\n\t      s.buffered = [];\r\n\t\r\n\t      if (ranges && ranges.length) {\r\n\t\r\n\t        // if loaded is 0, try TimeRanges implementation as % of load\r\n\t        // https://developer.mozilla.org/en/DOM/TimeRanges\r\n\t\r\n\t        // re-build \"buffered\" array\r\n\t        // HTML5 returns seconds. SM2 API uses msec for setPosition() etc., whether Flash or HTML5.\r\n\t        for (i = 0, j = ranges.length; i < j; i++) {\r\n\t          s.buffered.push({\r\n\t            start: ranges.start(i) * msecScale,\r\n\t            end: ranges.end(i) * msecScale\r\n\t          });\r\n\t        }\r\n\t\r\n\t        // use the last value locally\r\n\t        buffered = (ranges.end(0) - ranges.start(0)) * msecScale;\r\n\t\r\n\t        // linear case, buffer sum; does not account for seeking and HTTP partials / byte ranges\r\n\t        loaded = Math.min(1, buffered / (e.target.duration * msecScale));\r\n\t\r\n\t        // <d>\r\n\t        if (isProgress && ranges.length > 1) {\r\n\t          progStr = [];\r\n\t          j = ranges.length;\r\n\t          for (i = 0; i < j; i++) {\r\n\t            progStr.push((e.target.buffered.start(i) * msecScale) + '-' + (e.target.buffered.end(i) * msecScale));\r\n\t          }\r\n\t          sm2._wD(this._s.id + ': progress, timeRanges: ' + progStr.join(', '));\r\n\t        }\r\n\t\r\n\t        if (isProgress && !isNaN(loaded)) {\r\n\t          sm2._wD(this._s.id + ': progress, ' + Math.floor(loaded * 100) + '% loaded');\r\n\t        }\r\n\t        // </d>\r\n\t\r\n\t      }\r\n\t\r\n\t      if (!isNaN(loaded)) {\r\n\t\r\n\t        // TODO: prevent calls with duplicate values.\r\n\t        s._whileloading(loaded, total, s._get_html5_duration());\r\n\t        if (loaded && total && loaded === total) {\r\n\t          // in case \"onload\" doesn't fire (eg. gecko 1.9.2)\r\n\t          html5_events.canplaythrough.call(this, e);\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    }),\r\n\t\r\n\t    ratechange: html5_event(function() {\r\n\t\r\n\t      sm2._wD(this._s.id + ': ratechange');\r\n\t\r\n\t    }),\r\n\t\r\n\t    suspend: html5_event(function(e) {\r\n\t\r\n\t      // download paused/stopped, may have finished (eg. onload)\r\n\t      var s = this._s;\r\n\t\r\n\t      sm2._wD(this._s.id + ': suspend');\r\n\t      html5_events.progress.call(this, e);\r\n\t      s._onsuspend();\r\n\t\r\n\t    }),\r\n\t\r\n\t    stalled: html5_event(function() {\r\n\t\r\n\t      sm2._wD(this._s.id + ': stalled');\r\n\t\r\n\t    }),\r\n\t\r\n\t    timeupdate: html5_event(function() {\r\n\t\r\n\t      this._s._onTimer();\r\n\t\r\n\t    }),\r\n\t\r\n\t    waiting: html5_event(function() {\r\n\t\r\n\t      var s = this._s;\r\n\t\r\n\t      // see also: seeking\r\n\t      sm2._wD(this._s.id + ': waiting');\r\n\t\r\n\t      // playback faster than download rate, etc.\r\n\t      s._onbufferchange(1);\r\n\t\r\n\t    })\r\n\t\r\n\t  };\r\n\t\r\n\t  html5OK = function(iO) {\r\n\t\r\n\t    // playability test based on URL or MIME type\r\n\t\r\n\t    var result;\r\n\t\r\n\t    if (!iO || (!iO.type && !iO.url && !iO.serverURL)) {\r\n\t\r\n\t      // nothing to check\r\n\t      result = false;\r\n\t\r\n\t    } else if (iO.serverURL || (iO.type && preferFlashCheck(iO.type))) {\r\n\t\r\n\t      // RTMP, or preferring flash\r\n\t      result = false;\r\n\t\r\n\t    } else {\r\n\t\r\n\t      // Use type, if specified. Pass data: URIs to HTML5. If HTML5-only mode, no other options, so just give 'er\r\n\t      result = ((iO.type ? html5CanPlay({ type: iO.type }) : html5CanPlay({ url: iO.url }) || sm2.html5Only || iO.url.match(/data:/i)));\r\n\t\r\n\t    }\r\n\t\r\n\t    return result;\r\n\t\r\n\t  };\r\n\t\r\n\t  html5Unload = function(oAudio) {\r\n\t\r\n\t    /**\r\n\t     * Internal method: Unload media, and cancel any current/pending network requests.\r\n\t     * Firefox can load an empty URL, which allegedly destroys the decoder and stops the download.\r\n\t     * https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Stopping_the_download_of_media\r\n\t     * However, Firefox has been seen loading a relative URL from '' and thus requesting the hosting page on unload.\r\n\t     * Other UA behaviour is unclear, so everyone else gets an about:blank-style URL.\r\n\t     */\r\n\t\r\n\t    var url;\r\n\t\r\n\t    if (oAudio) {\r\n\t\r\n\t      // Firefox and Chrome accept short WAVe data: URIs. Chome dislikes audio/wav, but accepts audio/wav for data: MIME.\r\n\t      // Desktop Safari complains / fails on data: URI, so it gets about:blank.\r\n\t      url = (isSafari ? emptyURL : (sm2.html5.canPlayType('audio/wav') ? emptyWAV : emptyURL));\r\n\t\r\n\t      oAudio.src = url;\r\n\t\r\n\t      // reset some state, too\r\n\t      if (oAudio._called_unload !== _undefined) {\r\n\t        oAudio._called_load = false;\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    if (useGlobalHTML5Audio) {\r\n\t\r\n\t      // ensure URL state is trashed, also\r\n\t      lastGlobalHTML5URL = null;\r\n\t\r\n\t    }\r\n\t\r\n\t    return url;\r\n\t\r\n\t  };\r\n\t\r\n\t  html5CanPlay = function(o) {\r\n\t\r\n\t    /**\r\n\t     * Try to find MIME, test and return truthiness\r\n\t     * o = {\r\n\t     *  url: '/path/to/an.mp3',\r\n\t     *  type: 'audio/mp3'\r\n\t     * }\r\n\t     */\r\n\t\r\n\t    if (!sm2.useHTML5Audio || !sm2.hasHTML5) return false;\r\n\t\r\n\t    var url = (o.url || null),\r\n\t        mime = (o.type || null),\r\n\t        aF = sm2.audioFormats,\r\n\t        result,\r\n\t        offset,\r\n\t        fileExt,\r\n\t        item;\r\n\t\r\n\t    // account for known cases like audio/mp3\r\n\t\r\n\t    if (mime && sm2.html5[mime] !== _undefined) return (sm2.html5[mime] && !preferFlashCheck(mime));\r\n\t\r\n\t    if (!html5Ext) {\r\n\t\r\n\t      html5Ext = [];\r\n\t\r\n\t      for (item in aF) {\r\n\t\r\n\t        if (aF.hasOwnProperty(item)) {\r\n\t\r\n\t          html5Ext.push(item);\r\n\t\r\n\t          if (aF[item].related) {\r\n\t            html5Ext = html5Ext.concat(aF[item].related);\r\n\t          }\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      html5Ext = new RegExp('\\\\.(' + html5Ext.join('|') + ')(\\\\?.*)?$', 'i');\r\n\t\r\n\t    }\r\n\t\r\n\t    // TODO: Strip URL queries, etc.\r\n\t    fileExt = (url ? url.toLowerCase().match(html5Ext) : null);\r\n\t\r\n\t    if (!fileExt || !fileExt.length) {\r\n\t\r\n\t      if (!mime) {\r\n\t\r\n\t        result = false;\r\n\t\r\n\t      } else {\r\n\t\r\n\t        // audio/mp3 -> mp3, result should be known\r\n\t        offset = mime.indexOf(';');\r\n\t\r\n\t        // strip \"audio/X; codecs...\"\r\n\t        fileExt = (offset !== -1 ? mime.substr(0, offset) : mime).substr(6);\r\n\t\r\n\t      }\r\n\t\r\n\t    } else {\r\n\t\r\n\t      // match the raw extension name - \"mp3\", for example\r\n\t      fileExt = fileExt[1];\r\n\t\r\n\t    }\r\n\t\r\n\t    if (fileExt && sm2.html5[fileExt] !== _undefined) {\r\n\t\r\n\t      // result known\r\n\t      result = (sm2.html5[fileExt] && !preferFlashCheck(fileExt));\r\n\t\r\n\t    } else {\r\n\t\r\n\t      mime = 'audio/' + fileExt;\r\n\t      result = sm2.html5.canPlayType({ type: mime });\r\n\t\r\n\t      sm2.html5[fileExt] = result;\r\n\t\r\n\t      // sm2._wD('canPlayType, found result: ' + result);\r\n\t      result = (result && sm2.html5[mime] && !preferFlashCheck(mime));\r\n\t    }\r\n\t\r\n\t    return result;\r\n\t\r\n\t  };\r\n\t\r\n\t  testHTML5 = function() {\r\n\t\r\n\t    /**\r\n\t     * Internal: Iterates over audioFormats, determining support eg. audio/mp3, audio/mpeg and so on\r\n\t     * assigns results to html5[] and flash[].\r\n\t     */\r\n\t\r\n\t    if (!sm2.useHTML5Audio || !sm2.hasHTML5) {\r\n\t\r\n\t      // without HTML5, we need Flash.\r\n\t      sm2.html5.usingFlash = true;\r\n\t      needsFlash = true;\r\n\t\r\n\t      return false;\r\n\t\r\n\t    }\r\n\t\r\n\t    // double-whammy: Opera 9.64 throws WRONG_ARGUMENTS_ERR if no parameter passed to Audio(), and Webkit + iOS happily tries to load \"null\" as a URL. :/\r\n\t    var a = (Audio !== _undefined ? (isOpera && opera.version() < 10 ? new Audio(null) : new Audio()) : null),\r\n\t        item, lookup, support = {}, aF, i;\r\n\t\r\n\t    function cp(m) {\r\n\t\r\n\t      var canPlay, j,\r\n\t          result = false,\r\n\t          isOK = false;\r\n\t\r\n\t      if (!a || typeof a.canPlayType !== 'function') return result;\r\n\t\r\n\t      if (m instanceof Array) {\r\n\t\r\n\t        // iterate through all mime types, return any successes\r\n\t\r\n\t        for (i = 0, j = m.length; i < j; i++) {\r\n\t\r\n\t          if (sm2.html5[m[i]] || a.canPlayType(m[i]).match(sm2.html5Test)) {\r\n\t\r\n\t            isOK = true;\r\n\t            sm2.html5[m[i]] = true;\r\n\t\r\n\t            // note flash support, too\r\n\t            sm2.flash[m[i]] = !!(m[i].match(flashMIME));\r\n\t\r\n\t          }\r\n\t\r\n\t        }\r\n\t\r\n\t        result = isOK;\r\n\t\r\n\t      } else {\r\n\t\r\n\t        canPlay = (a && typeof a.canPlayType === 'function' ? a.canPlayType(m) : false);\r\n\t        result = !!(canPlay && (canPlay.match(sm2.html5Test)));\r\n\t\r\n\t      }\r\n\t\r\n\t      return result;\r\n\t\r\n\t    }\r\n\t\r\n\t    // test all registered formats + codecs\r\n\t\r\n\t    aF = sm2.audioFormats;\r\n\t\r\n\t    for (item in aF) {\r\n\t\r\n\t      if (aF.hasOwnProperty(item)) {\r\n\t\r\n\t        lookup = 'audio/' + item;\r\n\t\r\n\t        support[item] = cp(aF[item].type);\r\n\t\r\n\t        // write back generic type too, eg. audio/mp3\r\n\t        support[lookup] = support[item];\r\n\t\r\n\t        // assign flash\r\n\t        if (item.match(flashMIME)) {\r\n\t\r\n\t          sm2.flash[item] = true;\r\n\t          sm2.flash[lookup] = true;\r\n\t\r\n\t        } else {\r\n\t\r\n\t          sm2.flash[item] = false;\r\n\t          sm2.flash[lookup] = false;\r\n\t\r\n\t        }\r\n\t\r\n\t        // assign result to related formats, too\r\n\t\r\n\t        if (aF[item] && aF[item].related) {\r\n\t\r\n\t          for (i = aF[item].related.length - 1; i >= 0; i--) {\r\n\t\r\n\t            // eg. audio/m4a\r\n\t            support['audio/' + aF[item].related[i]] = support[item];\r\n\t            sm2.html5[aF[item].related[i]] = support[item];\r\n\t            sm2.flash[aF[item].related[i]] = support[item];\r\n\t\r\n\t          }\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    support.canPlayType = (a ? cp : null);\r\n\t    sm2.html5 = mixin(sm2.html5, support);\r\n\t\r\n\t    sm2.html5.usingFlash = featureCheck();\r\n\t    needsFlash = sm2.html5.usingFlash;\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  strings = {\r\n\t\r\n\t    // <d>\r\n\t    notReady: 'Unavailable - wait until onready() has fired.',\r\n\t    notOK: 'Audio support is not available.',\r\n\t    domError: sm + 'exception caught while appending SWF to DOM.',\r\n\t    spcWmode: 'Removing wmode, preventing known SWF loading issue(s)',\r\n\t    swf404: smc + 'Verify that %s is a valid path.',\r\n\t    tryDebug: 'Try ' + sm + '.debugFlash = true for more security details (output goes to SWF.)',\r\n\t    checkSWF: 'See SWF output for more debug info.',\r\n\t    localFail: smc + 'Non-HTTP page (' + doc.location.protocol + ' URL?) Review Flash player security settings for this special case:\\nhttp://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html\\nMay need to add/allow path, eg. c:/sm2/ or /users/me/sm2/',\r\n\t    waitFocus: smc + 'Special case: Waiting for SWF to load with window focus...',\r\n\t    waitForever: smc + 'Waiting indefinitely for Flash (will recover if unblocked)...',\r\n\t    waitSWF: smc + 'Waiting for 100% SWF load...',\r\n\t    needFunction: smc + 'Function object expected for %s',\r\n\t    badID: 'Sound ID \"%s\" should be a string, starting with a non-numeric character',\r\n\t    currentObj: smc + '_debug(): Current sound objects',\r\n\t    waitOnload: smc + 'Waiting for window.onload()',\r\n\t    docLoaded: smc + 'Document already loaded',\r\n\t    onload: smc + 'initComplete(): calling soundManager.onload()',\r\n\t    onloadOK: sm + '.onload() complete',\r\n\t    didInit: smc + 'init(): Already called?',\r\n\t    secNote: 'Flash security note: Network/internet URLs will not load due to security restrictions. Access can be configured via Flash Player Global Security Settings Page: http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html',\r\n\t    badRemove: smc + 'Failed to remove Flash node.',\r\n\t    shutdown: sm + '.disable(): Shutting down',\r\n\t    queue: smc + 'Queueing %s handler',\r\n\t    smError: 'SMSound.load(): Exception: JS-Flash communication failed, or JS error.',\r\n\t    fbTimeout: 'No flash response, applying .' + swfCSS.swfTimedout + ' CSS...',\r\n\t    fbLoaded: 'Flash loaded',\r\n\t    fbHandler: smc + 'flashBlockHandler()',\r\n\t    manURL: 'SMSound.load(): Using manually-assigned URL',\r\n\t    onURL: sm + '.load(): current URL already assigned.',\r\n\t    badFV: sm + '.flashVersion must be 8 or 9. \"%s\" is invalid. Reverting to %s.',\r\n\t    as2loop: 'Note: Setting stream:false so looping can work (flash 8 limitation)',\r\n\t    noNSLoop: 'Note: Looping not implemented for MovieStar formats',\r\n\t    needfl9: 'Note: Switching to flash 9, required for MP4 formats.',\r\n\t    mfTimeout: 'Setting flashLoadTimeout = 0 (infinite) for off-screen, mobile flash case',\r\n\t    needFlash: smc + 'Fatal error: Flash is needed to play some required formats, but is not available.',\r\n\t    gotFocus: smc + 'Got window focus.',\r\n\t    policy: 'Enabling usePolicyFile for data access',\r\n\t    setup: sm + '.setup(): allowed parameters: %s',\r\n\t    setupError: sm + '.setup(): \"%s\" cannot be assigned with this method.',\r\n\t    setupUndef: sm + '.setup(): Could not find option \"%s\"',\r\n\t    setupLate: sm + '.setup(): url, flashVersion and html5Test property changes will not take effect until reboot().',\r\n\t    noURL: smc + 'Flash URL required. Call soundManager.setup({url:...}) to get started.',\r\n\t    sm2Loaded: 'SoundManager 2: Ready. ' + String.fromCharCode(10003),\r\n\t    reset: sm + '.reset(): Removing event callbacks',\r\n\t    mobileUA: 'Mobile UA detected, preferring HTML5 by default.',\r\n\t    globalHTML5: 'Using singleton HTML5 Audio() pattern for this device.',\r\n\t    ignoreMobile: 'Ignoring mobile restrictions for this device.'\r\n\t    // </d>\r\n\t\r\n\t  };\r\n\t\r\n\t  str = function() {\r\n\t\r\n\t    // internal string replace helper.\r\n\t    // arguments: o [,items to replace]\r\n\t    // <d>\r\n\t\r\n\t    var args,\r\n\t        i, j, o,\r\n\t        sstr;\r\n\t\r\n\t    // real array, please\r\n\t    args = slice.call(arguments);\r\n\t\r\n\t    // first argument\r\n\t    o = args.shift();\r\n\t\r\n\t    sstr = (strings && strings[o] ? strings[o] : '');\r\n\t\r\n\t    if (sstr && args && args.length) {\r\n\t      for (i = 0, j = args.length; i < j; i++) {\r\n\t        sstr = sstr.replace('%s', args[i]);\r\n\t      }\r\n\t    }\r\n\t\r\n\t    return sstr;\r\n\t    // </d>\r\n\t\r\n\t  };\r\n\t\r\n\t  loopFix = function(sOpt) {\r\n\t\r\n\t    // flash 8 requires stream = false for looping to work\r\n\t    if (fV === 8 && sOpt.loops > 1 && sOpt.stream) {\r\n\t      _wDS('as2loop');\r\n\t      sOpt.stream = false;\r\n\t    }\r\n\t\r\n\t    return sOpt;\r\n\t\r\n\t  };\r\n\t\r\n\t  policyFix = function(sOpt, sPre) {\r\n\t\r\n\t    if (sOpt && !sOpt.usePolicyFile && (sOpt.onid3 || sOpt.usePeakData || sOpt.useWaveformData || sOpt.useEQData)) {\r\n\t      sm2._wD((sPre || '') + str('policy'));\r\n\t      sOpt.usePolicyFile = true;\r\n\t    }\r\n\t\r\n\t    return sOpt;\r\n\t\r\n\t  };\r\n\t\r\n\t  complain = function(sMsg) {\r\n\t\r\n\t    // <d>\r\n\t    if (hasConsole && console.warn !== _undefined) {\r\n\t      console.warn(sMsg);\r\n\t    } else {\r\n\t      sm2._wD(sMsg);\r\n\t    }\r\n\t    // </d>\r\n\t\r\n\t  };\r\n\t\r\n\t  doNothing = function() {\r\n\t\r\n\t    return false;\r\n\t\r\n\t  };\r\n\t\r\n\t  disableObject = function(o) {\r\n\t\r\n\t    var oProp;\r\n\t\r\n\t    for (oProp in o) {\r\n\t      if (o.hasOwnProperty(oProp) && typeof o[oProp] === 'function') {\r\n\t        o[oProp] = doNothing;\r\n\t      }\r\n\t    }\r\n\t\r\n\t    oProp = null;\r\n\t\r\n\t  };\r\n\t\r\n\t  failSafely = function(bNoDisable) {\r\n\t\r\n\t    // general failure exception handler\r\n\t\r\n\t    if (bNoDisable === _undefined) {\r\n\t      bNoDisable = false;\r\n\t    }\r\n\t\r\n\t    if (disabled || bNoDisable) {\r\n\t      sm2.disable(bNoDisable);\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  normalizeMovieURL = function(movieURL) {\r\n\t\r\n\t    var urlParams = null, url;\r\n\t\r\n\t    if (movieURL) {\r\n\t\r\n\t      if (movieURL.match(/\\.swf(\\?.*)?$/i)) {\r\n\t\r\n\t        urlParams = movieURL.substr(movieURL.toLowerCase().lastIndexOf('.swf?') + 4);\r\n\t\r\n\t        // assume user knows what they're doing\r\n\t        if (urlParams) return movieURL;\r\n\t\r\n\t      } else if (movieURL.lastIndexOf('/') !== movieURL.length - 1) {\r\n\t\r\n\t        // append trailing slash, if needed\r\n\t        movieURL += '/';\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    url = (movieURL && movieURL.lastIndexOf('/') !== -1 ? movieURL.substr(0, movieURL.lastIndexOf('/') + 1) : './') + sm2.movieURL;\r\n\t\r\n\t    if (sm2.noSWFCache) {\r\n\t      url += ('?ts=' + new Date().getTime());\r\n\t    }\r\n\t\r\n\t    return url;\r\n\t\r\n\t  };\r\n\t\r\n\t  setVersionInfo = function() {\r\n\t\r\n\t    // short-hand for internal use\r\n\t\r\n\t    fV = parseInt(sm2.flashVersion, 10);\r\n\t\r\n\t    if (fV !== 8 && fV !== 9) {\r\n\t      sm2._wD(str('badFV', fV, defaultFlashVersion));\r\n\t      sm2.flashVersion = fV = defaultFlashVersion;\r\n\t    }\r\n\t\r\n\t    // debug flash movie, if applicable\r\n\t\r\n\t    var isDebug = (sm2.debugMode || sm2.debugFlash ? '_debug.swf' : '.swf');\r\n\t\r\n\t    if (sm2.useHTML5Audio && !sm2.html5Only && sm2.audioFormats.mp4.required && fV < 9) {\r\n\t      sm2._wD(str('needfl9'));\r\n\t      sm2.flashVersion = fV = 9;\r\n\t    }\r\n\t\r\n\t    sm2.version = sm2.versionNumber + (sm2.html5Only ? ' (HTML5-only mode)' : (fV === 9 ? ' (AS3/Flash 9)' : ' (AS2/Flash 8)'));\r\n\t\r\n\t    // set up default options\r\n\t    if (fV > 8) {\r\n\t\r\n\t      // +flash 9 base options\r\n\t      sm2.defaultOptions = mixin(sm2.defaultOptions, sm2.flash9Options);\r\n\t      sm2.features.buffering = true;\r\n\t\r\n\t      // +moviestar support\r\n\t      sm2.defaultOptions = mixin(sm2.defaultOptions, sm2.movieStarOptions);\r\n\t      sm2.filePatterns.flash9 = new RegExp('\\\\.(mp3|' + netStreamTypes.join('|') + ')(\\\\?.*)?$', 'i');\r\n\t      sm2.features.movieStar = true;\r\n\t\r\n\t    } else {\r\n\t\r\n\t      sm2.features.movieStar = false;\r\n\t\r\n\t    }\r\n\t\r\n\t    // regExp for flash canPlay(), etc.\r\n\t    sm2.filePattern = sm2.filePatterns[(fV !== 8 ? 'flash9' : 'flash8')];\r\n\t\r\n\t    // if applicable, use _debug versions of SWFs\r\n\t    sm2.movieURL = (fV === 8 ? 'soundmanager2.swf' : 'soundmanager2_flash9.swf').replace('.swf', isDebug);\r\n\t\r\n\t    sm2.features.peakData = sm2.features.waveformData = sm2.features.eqData = (fV > 8);\r\n\t\r\n\t  };\r\n\t\r\n\t  setPolling = function(bPolling, bHighPerformance) {\r\n\t\r\n\t    if (!flash) {\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    flash._setPolling(bPolling, bHighPerformance);\r\n\t\r\n\t  };\r\n\t\r\n\t  initDebug = function() {\r\n\t\r\n\t    // starts debug mode, creating output <div> for UAs without console object\r\n\t\r\n\t    // allow force of debug mode via URL\r\n\t    // <d>\r\n\t    if (sm2.debugURLParam.test(wl)) {\r\n\t      sm2.setupOptions.debugMode = sm2.debugMode = true;\r\n\t    }\r\n\t\r\n\t    if (id(sm2.debugID)) {\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    var oD, oDebug, oTarget, oToggle, tmp;\r\n\t\r\n\t    if (sm2.debugMode && !id(sm2.debugID) && (!hasConsole || !sm2.useConsole || !sm2.consoleOnly)) {\r\n\t\r\n\t      oD = doc.createElement('div');\r\n\t      oD.id = sm2.debugID + '-toggle';\r\n\t\r\n\t      oToggle = {\r\n\t        position: 'fixed',\r\n\t        bottom: '0px',\r\n\t        right: '0px',\r\n\t        width: '1.2em',\r\n\t        height: '1.2em',\r\n\t        lineHeight: '1.2em',\r\n\t        margin: '2px',\r\n\t        textAlign: 'center',\r\n\t        border: '1px solid #999',\r\n\t        cursor: 'pointer',\r\n\t        background: '#fff',\r\n\t        color: '#333',\r\n\t        zIndex: 10001\r\n\t      };\r\n\t\r\n\t      oD.appendChild(doc.createTextNode('-'));\r\n\t      oD.onclick = toggleDebug;\r\n\t      oD.title = 'Toggle SM2 debug console';\r\n\t\r\n\t      if (ua.match(/msie 6/i)) {\r\n\t        oD.style.position = 'absolute';\r\n\t        oD.style.cursor = 'hand';\r\n\t      }\r\n\t\r\n\t      for (tmp in oToggle) {\r\n\t        if (oToggle.hasOwnProperty(tmp)) {\r\n\t          oD.style[tmp] = oToggle[tmp];\r\n\t        }\r\n\t      }\r\n\t\r\n\t      oDebug = doc.createElement('div');\r\n\t      oDebug.id = sm2.debugID;\r\n\t      oDebug.style.display = (sm2.debugMode ? 'block' : 'none');\r\n\t\r\n\t      if (sm2.debugMode && !id(oD.id)) {\r\n\t        try {\r\n\t          oTarget = getDocument();\r\n\t          oTarget.appendChild(oD);\r\n\t        } catch(e2) {\r\n\t          throw new Error(str('domError') + ' \\n' + e2.toString());\r\n\t        }\r\n\t        oTarget.appendChild(oDebug);\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    oTarget = null;\r\n\t    // </d>\r\n\t\r\n\t  };\r\n\t\r\n\t  idCheck = this.getSoundById;\r\n\t\r\n\t  // <d>\r\n\t  _wDS = function(o, errorLevel) {\r\n\t\r\n\t    return (!o ? '' : sm2._wD(str(o), errorLevel));\r\n\t\r\n\t  };\r\n\t\r\n\t  toggleDebug = function() {\r\n\t\r\n\t    var o = id(sm2.debugID),\r\n\t    oT = id(sm2.debugID + '-toggle');\r\n\t\r\n\t    if (!o) {\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    if (debugOpen) {\r\n\t      // minimize\r\n\t      oT.innerHTML = '+';\r\n\t      o.style.display = 'none';\r\n\t    } else {\r\n\t      oT.innerHTML = '-';\r\n\t      o.style.display = 'block';\r\n\t    }\r\n\t\r\n\t    debugOpen = !debugOpen;\r\n\t\r\n\t  };\r\n\t\r\n\t  debugTS = function(sEventType, bSuccess, sMessage) {\r\n\t\r\n\t    // troubleshooter debug hooks\r\n\t\r\n\t    if (window.sm2Debugger !== _undefined) {\r\n\t      try {\r\n\t        sm2Debugger.handleEvent(sEventType, bSuccess, sMessage);\r\n\t      } catch(e) {\r\n\t        // oh well\r\n\t        return false;\r\n\t      }\r\n\t    }\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t  // </d>\r\n\t\r\n\t  getSWFCSS = function() {\r\n\t\r\n\t    var css = [];\r\n\t\r\n\t    if (sm2.debugMode) {\r\n\t      css.push(swfCSS.sm2Debug);\r\n\t    }\r\n\t\r\n\t    if (sm2.debugFlash) {\r\n\t      css.push(swfCSS.flashDebug);\r\n\t    }\r\n\t\r\n\t    if (sm2.useHighPerformance) {\r\n\t      css.push(swfCSS.highPerf);\r\n\t    }\r\n\t\r\n\t    return css.join(' ');\r\n\t\r\n\t  };\r\n\t\r\n\t  flashBlockHandler = function() {\r\n\t\r\n\t    // *possible* flash block situation.\r\n\t\r\n\t    var name = str('fbHandler'),\r\n\t        p = sm2.getMoviePercent(),\r\n\t        css = swfCSS,\r\n\t        error = {\r\n\t          type: 'FLASHBLOCK'\r\n\t        };\r\n\t\r\n\t    if (sm2.html5Only) {\r\n\t      // no flash, or unused\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    if (!sm2.ok()) {\r\n\t\r\n\t      if (needsFlash) {\r\n\t        // make the movie more visible, so user can fix\r\n\t        sm2.oMC.className = getSWFCSS() + ' ' + css.swfDefault + ' ' + (p === null ? css.swfTimedout : css.swfError);\r\n\t        sm2._wD(name + ': ' + str('fbTimeout') + (p ? ' (' + str('fbLoaded') + ')' : ''));\r\n\t      }\r\n\t\r\n\t      sm2.didFlashBlock = true;\r\n\t\r\n\t      // fire onready(), complain lightly\r\n\t      processOnEvents({\r\n\t        type: 'ontimeout',\r\n\t        ignoreInit: true,\r\n\t        error: error\r\n\t      });\r\n\t\r\n\t      catchError(error);\r\n\t\r\n\t    } else {\r\n\t\r\n\t      // SM2 loaded OK (or recovered)\r\n\t\r\n\t      // <d>\r\n\t      if (sm2.didFlashBlock) {\r\n\t        sm2._wD(name + ': Unblocked');\r\n\t      }\r\n\t      // </d>\r\n\t\r\n\t      if (sm2.oMC) {\r\n\t        sm2.oMC.className = [getSWFCSS(), css.swfDefault, css.swfLoaded + (sm2.didFlashBlock ? ' ' + css.swfUnblocked : '')].join(' ');\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  addOnEvent = function(sType, oMethod, oScope) {\r\n\t\r\n\t    if (on_queue[sType] === _undefined) {\r\n\t      on_queue[sType] = [];\r\n\t    }\r\n\t\r\n\t    on_queue[sType].push({\r\n\t      method: oMethod,\r\n\t      scope: (oScope || null),\r\n\t      fired: false\r\n\t    });\r\n\t\r\n\t  };\r\n\t\r\n\t  processOnEvents = function(oOptions) {\r\n\t\r\n\t    // if unspecified, assume OK/error\r\n\t\r\n\t    if (!oOptions) {\r\n\t      oOptions = {\r\n\t        type: (sm2.ok() ? 'onready' : 'ontimeout')\r\n\t      };\r\n\t    }\r\n\t\r\n\t    // not ready yet.\r\n\t    if (!didInit && oOptions && !oOptions.ignoreInit) return false;\r\n\t\r\n\t    // invalid case\r\n\t    if (oOptions.type === 'ontimeout' && (sm2.ok() || (disabled && !oOptions.ignoreInit))) return false;\r\n\t\r\n\t    var status = {\r\n\t          success: (oOptions && oOptions.ignoreInit ? sm2.ok() : !disabled)\r\n\t        },\r\n\t\r\n\t        // queue specified by type, or none\r\n\t        srcQueue = (oOptions && oOptions.type ? on_queue[oOptions.type] || [] : []),\r\n\t\r\n\t        queue = [], i, j,\r\n\t        args = [status],\r\n\t        canRetry = (needsFlash && !sm2.ok());\r\n\t\r\n\t    if (oOptions.error) {\r\n\t      args[0].error = oOptions.error;\r\n\t    }\r\n\t\r\n\t    for (i = 0, j = srcQueue.length; i < j; i++) {\r\n\t      if (srcQueue[i].fired !== true) {\r\n\t        queue.push(srcQueue[i]);\r\n\t      }\r\n\t    }\r\n\t\r\n\t    if (queue.length) {\r\n\t\r\n\t      // sm2._wD(sm + ': Firing ' + queue.length + ' ' + oOptions.type + '() item' + (queue.length === 1 ? '' : 's'));\r\n\t      for (i = 0, j = queue.length; i < j; i++) {\r\n\t\r\n\t        if (queue[i].scope) {\r\n\t          queue[i].method.apply(queue[i].scope, args);\r\n\t        } else {\r\n\t          queue[i].method.apply(this, args);\r\n\t        }\r\n\t\r\n\t        if (!canRetry) {\r\n\t          // useFlashBlock and SWF timeout case doesn't count here.\r\n\t          queue[i].fired = true;\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  initUserOnload = function() {\r\n\t\r\n\t    window.setTimeout(function() {\r\n\t\r\n\t      if (sm2.useFlashBlock) {\r\n\t        flashBlockHandler();\r\n\t      }\r\n\t\r\n\t      processOnEvents();\r\n\t\r\n\t      // call user-defined \"onload\", scoped to window\r\n\t\r\n\t      if (typeof sm2.onload === 'function') {\r\n\t        _wDS('onload', 1);\r\n\t        sm2.onload.apply(window);\r\n\t        _wDS('onloadOK', 1);\r\n\t      }\r\n\t\r\n\t      if (sm2.waitForWindowLoad) {\r\n\t        event.add(window, 'load', initUserOnload);\r\n\t      }\r\n\t\r\n\t    }, 1);\r\n\t\r\n\t  };\r\n\t\r\n\t  detectFlash = function() {\r\n\t\r\n\t    /**\r\n\t     * Hat tip: Flash Detect library (BSD, (C) 2007) by Carl \"DocYes\" S. Yestrau\r\n\t     * http://featureblend.com/javascript-flash-detection-library.html / http://featureblend.com/license.txt\r\n\t     */\r\n\t\r\n\t    // this work has already been done.\r\n\t    if (hasFlash !== _undefined) return hasFlash;\r\n\t\r\n\t    var hasPlugin = false, n = navigator, obj, type, types, AX = window.ActiveXObject;\r\n\t\r\n\t    // MS Edge 14 throws an \"Unspecified Error\" because n.plugins is inaccessible due to permissions\r\n\t    var nP;\r\n\t\r\n\t    try {\r\n\t      nP = n.plugins;\r\n\t    } catch(e) {\r\n\t      nP = undefined;\r\n\t    }\r\n\t\r\n\t    if (nP && nP.length) {\r\n\t\r\n\t      type = 'application/x-shockwave-flash';\r\n\t      types = n.mimeTypes;\r\n\t\r\n\t      if (types && types[type] && types[type].enabledPlugin && types[type].enabledPlugin.description) {\r\n\t        hasPlugin = true;\r\n\t      }\r\n\t\r\n\t    } else if (AX !== _undefined && !ua.match(/MSAppHost/i)) {\r\n\t\r\n\t      // Windows 8 Store Apps (MSAppHost) are weird (compatibility?) and won't complain here, but will barf if Flash/ActiveX object is appended to the DOM.\r\n\t      try {\r\n\t        obj = new AX('ShockwaveFlash.ShockwaveFlash');\r\n\t      } catch(e) {\r\n\t        // oh well\r\n\t        obj = null;\r\n\t      }\r\n\t\r\n\t      hasPlugin = (!!obj);\r\n\t\r\n\t      // cleanup, because it is ActiveX after all\r\n\t      obj = null;\r\n\t\r\n\t    }\r\n\t\r\n\t    hasFlash = hasPlugin;\r\n\t\r\n\t    return hasPlugin;\r\n\t\r\n\t  };\r\n\t\r\n\t  featureCheck = function() {\r\n\t\r\n\t    var flashNeeded,\r\n\t        item,\r\n\t        formats = sm2.audioFormats,\r\n\t        // iPhone <= 3.1 has broken HTML5 audio(), but firmware 3.2 (original iPad) + iOS4 works.\r\n\t        isSpecial = (is_iDevice && !!(ua.match(/os (1|2|3_0|3_1)\\s/i)));\r\n\t\r\n\t    if (isSpecial) {\r\n\t\r\n\t      // has Audio(), but is broken; let it load links directly.\r\n\t      sm2.hasHTML5 = false;\r\n\t\r\n\t      // ignore flash case, however\r\n\t      sm2.html5Only = true;\r\n\t\r\n\t      // hide the SWF, if present\r\n\t      if (sm2.oMC) {\r\n\t        sm2.oMC.style.display = 'none';\r\n\t      }\r\n\t\r\n\t    } else if (sm2.useHTML5Audio) {\r\n\t\r\n\t        if (!sm2.html5 || !sm2.html5.canPlayType) {\r\n\t          sm2._wD('SoundManager: No HTML5 Audio() support detected.');\r\n\t          sm2.hasHTML5 = false;\r\n\t        }\r\n\t\r\n\t        // <d>\r\n\t        if (isBadSafari) {\r\n\t          sm2._wD(smc + 'Note: Buggy HTML5 Audio in Safari on this OS X release, see https://bugs.webkit.org/show_bug.cgi?id=32159 - ' + (!hasFlash ? ' would use flash fallback for MP3/MP4, but none detected.' : 'will use flash fallback for MP3/MP4, if available'), 1);\r\n\t        }\r\n\t        // </d>\r\n\t\r\n\t      }\r\n\t\r\n\t    if (sm2.useHTML5Audio && sm2.hasHTML5) {\r\n\t\r\n\t      // sort out whether flash is optional, required or can be ignored.\r\n\t\r\n\t      // innocent until proven guilty.\r\n\t      canIgnoreFlash = true;\r\n\t\r\n\t      for (item in formats) {\r\n\t\r\n\t        if (formats.hasOwnProperty(item)) {\r\n\t\r\n\t          if (formats[item].required) {\r\n\t\r\n\t            if (!sm2.html5.canPlayType(formats[item].type)) {\r\n\t\r\n\t              // 100% HTML5 mode is not possible.\r\n\t              canIgnoreFlash = false;\r\n\t              flashNeeded = true;\r\n\t\r\n\t            } else if (sm2.preferFlash && (sm2.flash[item] || sm2.flash[formats[item].type])) {\r\n\t\r\n\t              // flash may be required, or preferred for this format.\r\n\t              flashNeeded = true;\r\n\t\r\n\t            }\r\n\t\r\n\t          }\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    // sanity check...\r\n\t    if (sm2.ignoreFlash) {\r\n\t      flashNeeded = false;\r\n\t      canIgnoreFlash = true;\r\n\t    }\r\n\t\r\n\t    sm2.html5Only = (sm2.hasHTML5 && sm2.useHTML5Audio && !flashNeeded);\r\n\t\r\n\t    return (!sm2.html5Only);\r\n\t\r\n\t  };\r\n\t\r\n\t  parseURL = function(url) {\r\n\t\r\n\t    /**\r\n\t     * Internal: Finds and returns the first playable URL (or failing that, the first URL.)\r\n\t     * @param {string or array} url A single URL string, OR, an array of URL strings or {url:'/path/to/resource', type:'audio/mp3'} objects.\r\n\t     */\r\n\t\r\n\t    var i, j, urlResult = 0, result;\r\n\t\r\n\t    if (url instanceof Array) {\r\n\t\r\n\t      // find the first good one\r\n\t      for (i = 0, j = url.length; i < j; i++) {\r\n\t\r\n\t        if (url[i] instanceof Object) {\r\n\t\r\n\t          // MIME check\r\n\t          if (sm2.canPlayMIME(url[i].type)) {\r\n\t            urlResult = i;\r\n\t            break;\r\n\t          }\r\n\t\r\n\t        } else if (sm2.canPlayURL(url[i])) {\r\n\t\r\n\t          // URL string check\r\n\t          urlResult = i;\r\n\t          break;\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t      // normalize to string\r\n\t      if (url[urlResult].url) {\r\n\t        url[urlResult] = url[urlResult].url;\r\n\t      }\r\n\t\r\n\t      result = url[urlResult];\r\n\t\r\n\t    } else {\r\n\t\r\n\t      // single URL case\r\n\t      result = url;\r\n\t\r\n\t    }\r\n\t\r\n\t    return result;\r\n\t\r\n\t  };\r\n\t\r\n\t\r\n\t  startTimer = function(oSound) {\r\n\t\r\n\t    /**\r\n\t     * attach a timer to this sound, and start an interval if needed\r\n\t     */\r\n\t\r\n\t    if (!oSound._hasTimer) {\r\n\t\r\n\t      oSound._hasTimer = true;\r\n\t\r\n\t      if (!mobileHTML5 && sm2.html5PollingInterval) {\r\n\t\r\n\t        if (h5IntervalTimer === null && h5TimerCount === 0) {\r\n\t\r\n\t          h5IntervalTimer = setInterval(timerExecute, sm2.html5PollingInterval);\r\n\t\r\n\t        }\r\n\t\r\n\t        h5TimerCount++;\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  stopTimer = function(oSound) {\r\n\t\r\n\t    /**\r\n\t     * detach a timer\r\n\t     */\r\n\t\r\n\t    if (oSound._hasTimer) {\r\n\t\r\n\t      oSound._hasTimer = false;\r\n\t\r\n\t      if (!mobileHTML5 && sm2.html5PollingInterval) {\r\n\t\r\n\t        // interval will stop itself at next execution.\r\n\t\r\n\t        h5TimerCount--;\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  timerExecute = function() {\r\n\t\r\n\t    /**\r\n\t     * manual polling for HTML5 progress events, ie., whileplaying()\r\n\t     * (can achieve greater precision than conservative default HTML5 interval)\r\n\t     */\r\n\t\r\n\t    var i;\r\n\t\r\n\t    if (h5IntervalTimer !== null && !h5TimerCount) {\r\n\t\r\n\t      // no active timers, stop polling interval.\r\n\t\r\n\t      clearInterval(h5IntervalTimer);\r\n\t\r\n\t      h5IntervalTimer = null;\r\n\t\r\n\t      return;\r\n\t\r\n\t    }\r\n\t\r\n\t    // check all HTML5 sounds with timers\r\n\t\r\n\t    for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n\t\r\n\t      if (sm2.sounds[sm2.soundIDs[i]].isHTML5 && sm2.sounds[sm2.soundIDs[i]]._hasTimer) {\r\n\t        sm2.sounds[sm2.soundIDs[i]]._onTimer();\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  catchError = function(options) {\r\n\t\r\n\t    options = (options !== _undefined ? options : {});\r\n\t\r\n\t    if (typeof sm2.onerror === 'function') {\r\n\t      sm2.onerror.apply(window, [{\r\n\t        type: (options.type !== _undefined ? options.type : null)\r\n\t      }]);\r\n\t    }\r\n\t\r\n\t    if (options.fatal !== _undefined && options.fatal) {\r\n\t      sm2.disable();\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  badSafariFix = function() {\r\n\t\r\n\t    // special case: \"bad\" Safari (OS X 10.3 - 10.7) must fall back to flash for MP3/MP4\r\n\t    if (!isBadSafari || !detectFlash()) {\r\n\t      // doesn't apply\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    var aF = sm2.audioFormats, i, item;\r\n\t\r\n\t    for (item in aF) {\r\n\t\r\n\t      if (aF.hasOwnProperty(item)) {\r\n\t\r\n\t        if (item === 'mp3' || item === 'mp4') {\r\n\t\r\n\t          sm2._wD(sm + ': Using flash fallback for ' + item + ' format');\r\n\t          sm2.html5[item] = false;\r\n\t\r\n\t          // assign result to related formats, too\r\n\t          if (aF[item] && aF[item].related) {\r\n\t            for (i = aF[item].related.length - 1; i >= 0; i--) {\r\n\t              sm2.html5[aF[item].related[i]] = false;\r\n\t            }\r\n\t          }\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Pseudo-private flash/ExternalInterface methods\r\n\t   * ----------------------------------------------\r\n\t   */\r\n\t\r\n\t  this._setSandboxType = function(sandboxType) {\r\n\t\r\n\t    // <d>\r\n\t    // Security sandbox according to Flash plugin\r\n\t    var sb = sm2.sandbox;\r\n\t\r\n\t    sb.type = sandboxType;\r\n\t    sb.description = sb.types[(sb.types[sandboxType] !== _undefined ? sandboxType : 'unknown')];\r\n\t\r\n\t    if (sb.type === 'localWithFile') {\r\n\t\r\n\t      sb.noRemote = true;\r\n\t      sb.noLocal = false;\r\n\t      _wDS('secNote', 2);\r\n\t\r\n\t    } else if (sb.type === 'localWithNetwork') {\r\n\t\r\n\t      sb.noRemote = false;\r\n\t      sb.noLocal = true;\r\n\t\r\n\t    } else if (sb.type === 'localTrusted') {\r\n\t\r\n\t      sb.noRemote = false;\r\n\t      sb.noLocal = false;\r\n\t\r\n\t    }\r\n\t    // </d>\r\n\t\r\n\t  };\r\n\t\r\n\t  this._externalInterfaceOK = function(swfVersion) {\r\n\t\r\n\t    // flash callback confirming flash loaded, EI working etc.\r\n\t    // swfVersion: SWF build string\r\n\t\r\n\t    if (sm2.swfLoaded) {\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    var e;\r\n\t\r\n\t    debugTS('swf', true);\r\n\t    debugTS('flashtojs', true);\r\n\t    sm2.swfLoaded = true;\r\n\t    tryInitOnFocus = false;\r\n\t\r\n\t    if (isBadSafari) {\r\n\t      badSafariFix();\r\n\t    }\r\n\t\r\n\t    // complain if JS + SWF build/version strings don't match, excluding +DEV builds\r\n\t    // <d>\r\n\t    if (!swfVersion || swfVersion.replace(/\\+dev/i, '') !== sm2.versionNumber.replace(/\\+dev/i, '')) {\r\n\t\r\n\t      e = sm + ': Fatal: JavaScript file build \"' + sm2.versionNumber + '\" does not match Flash SWF build \"' + swfVersion + '\" at ' + sm2.url + '. Ensure both are up-to-date.';\r\n\t\r\n\t      // escape flash -> JS stack so this error fires in window.\r\n\t      setTimeout(function() {\r\n\t        throw new Error(e);\r\n\t      }, 0);\r\n\t\r\n\t      // exit, init will fail with timeout\r\n\t      return;\r\n\t\r\n\t    }\r\n\t    // </d>\r\n\t\r\n\t    // IE needs a larger timeout\r\n\t    setTimeout(init, isIE ? 100 : 1);\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * Private initialization helpers\r\n\t   * ------------------------------\r\n\t   */\r\n\t\r\n\t  createMovie = function(movieID, movieURL) {\r\n\t\r\n\t    // ignore if already connected\r\n\t    if (didAppend && appendSuccess) return false;\r\n\t\r\n\t    function initMsg() {\r\n\t\r\n\t      // <d>\r\n\t\r\n\t      var options = [],\r\n\t          title,\r\n\t          msg = [],\r\n\t          delimiter = ' + ';\r\n\t\r\n\t      title = 'SoundManager ' + sm2.version + (!sm2.html5Only && sm2.useHTML5Audio ? (sm2.hasHTML5 ? ' + HTML5 audio' : ', no HTML5 audio support') : '');\r\n\t\r\n\t      if (!sm2.html5Only) {\r\n\t\r\n\t        if (sm2.preferFlash) {\r\n\t          options.push('preferFlash');\r\n\t        }\r\n\t\r\n\t        if (sm2.useHighPerformance) {\r\n\t          options.push('useHighPerformance');\r\n\t        }\r\n\t\r\n\t        if (sm2.flashPollingInterval) {\r\n\t          options.push('flashPollingInterval (' + sm2.flashPollingInterval + 'ms)');\r\n\t        }\r\n\t\r\n\t        if (sm2.html5PollingInterval) {\r\n\t          options.push('html5PollingInterval (' + sm2.html5PollingInterval + 'ms)');\r\n\t        }\r\n\t\r\n\t        if (sm2.wmode) {\r\n\t          options.push('wmode (' + sm2.wmode + ')');\r\n\t        }\r\n\t\r\n\t        if (sm2.debugFlash) {\r\n\t          options.push('debugFlash');\r\n\t        }\r\n\t\r\n\t        if (sm2.useFlashBlock) {\r\n\t          options.push('flashBlock');\r\n\t        }\r\n\t\r\n\t      } else if (sm2.html5PollingInterval) {\r\n\t          options.push('html5PollingInterval (' + sm2.html5PollingInterval + 'ms)');\r\n\t        }\r\n\t\r\n\t      if (options.length) {\r\n\t        msg = msg.concat([options.join(delimiter)]);\r\n\t      }\r\n\t\r\n\t      sm2._wD(title + (msg.length ? delimiter + msg.join(', ') : ''), 1);\r\n\t\r\n\t      showSupport();\r\n\t\r\n\t      // </d>\r\n\t\r\n\t    }\r\n\t\r\n\t    if (sm2.html5Only) {\r\n\t\r\n\t      // 100% HTML5 mode\r\n\t      setVersionInfo();\r\n\t\r\n\t      initMsg();\r\n\t      sm2.oMC = id(sm2.movieID);\r\n\t      init();\r\n\t\r\n\t      // prevent multiple init attempts\r\n\t      didAppend = true;\r\n\t\r\n\t      appendSuccess = true;\r\n\t\r\n\t      return false;\r\n\t\r\n\t    }\r\n\t\r\n\t    // flash path\r\n\t    var remoteURL = (movieURL || sm2.url),\r\n\t    localURL = (sm2.altURL || remoteURL),\r\n\t    swfTitle = 'JS/Flash audio component (SoundManager 2)',\r\n\t    oTarget = getDocument(),\r\n\t    extraClass = getSWFCSS(),\r\n\t    isRTL = null,\r\n\t    html = doc.getElementsByTagName('html')[0],\r\n\t    oEmbed, oMovie, tmp, movieHTML, oEl, s, x, sClass;\r\n\t\r\n\t    isRTL = (html && html.dir && html.dir.match(/rtl/i));\r\n\t    movieID = (movieID === _undefined ? sm2.id : movieID);\r\n\t\r\n\t    function param(name, value) {\r\n\t      return '<param name=\"' + name + '\" value=\"' + value + '\" />';\r\n\t    }\r\n\t\r\n\t    // safety check for legacy (change to Flash 9 URL)\r\n\t    setVersionInfo();\r\n\t    sm2.url = normalizeMovieURL(overHTTP ? remoteURL : localURL);\r\n\t    movieURL = sm2.url;\r\n\t\r\n\t    sm2.wmode = (!sm2.wmode && sm2.useHighPerformance ? 'transparent' : sm2.wmode);\r\n\t\r\n\t    if (sm2.wmode !== null && (ua.match(/msie 8/i) || (!isIE && !sm2.useHighPerformance)) && navigator.platform.match(/win32|win64/i)) {\r\n\t      /**\r\n\t       * extra-special case: movie doesn't load until scrolled into view when using wmode = anything but 'window' here\r\n\t       * does not apply when using high performance (position:fixed means on-screen), OR infinite flash load timeout\r\n\t       * wmode breaks IE 8 on Vista + Win7 too in some cases, as of January 2011 (?)\r\n\t       */\r\n\t      messages.push(strings.spcWmode);\r\n\t      sm2.wmode = null;\r\n\t    }\r\n\t\r\n\t    oEmbed = {\r\n\t      name: movieID,\r\n\t      id: movieID,\r\n\t      src: movieURL,\r\n\t      quality: 'high',\r\n\t      allowScriptAccess: sm2.allowScriptAccess,\r\n\t      bgcolor: sm2.bgColor,\r\n\t      pluginspage: http + 'www.macromedia.com/go/getflashplayer',\r\n\t      title: swfTitle,\r\n\t      type: 'application/x-shockwave-flash',\r\n\t      wmode: sm2.wmode,\r\n\t      // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\r\n\t      hasPriority: 'true'\r\n\t    };\r\n\t\r\n\t    if (sm2.debugFlash) {\r\n\t      oEmbed.FlashVars = 'debug=1';\r\n\t    }\r\n\t\r\n\t    if (!sm2.wmode) {\r\n\t      // don't write empty attribute\r\n\t      delete oEmbed.wmode;\r\n\t    }\r\n\t\r\n\t    if (isIE) {\r\n\t\r\n\t      // IE is \"special\".\r\n\t      oMovie = doc.createElement('div');\r\n\t      movieHTML = [\r\n\t        '<object id=\"' + movieID + '\" data=\"' + movieURL + '\" type=\"' + oEmbed.type + '\" title=\"' + oEmbed.title + '\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\">',\r\n\t        param('movie', movieURL),\r\n\t        param('AllowScriptAccess', sm2.allowScriptAccess),\r\n\t        param('quality', oEmbed.quality),\r\n\t        (sm2.wmode ? param('wmode', sm2.wmode) : ''),\r\n\t        param('bgcolor', sm2.bgColor),\r\n\t        param('hasPriority', 'true'),\r\n\t        (sm2.debugFlash ? param('FlashVars', oEmbed.FlashVars) : ''),\r\n\t        '</object>'\r\n\t      ].join('');\r\n\t\r\n\t    } else {\r\n\t\r\n\t      oMovie = doc.createElement('embed');\r\n\t      for (tmp in oEmbed) {\r\n\t        if (oEmbed.hasOwnProperty(tmp)) {\r\n\t          oMovie.setAttribute(tmp, oEmbed[tmp]);\r\n\t        }\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    initDebug();\r\n\t    extraClass = getSWFCSS();\r\n\t    oTarget = getDocument();\r\n\t\r\n\t    if (oTarget) {\r\n\t\r\n\t      sm2.oMC = (id(sm2.movieID) || doc.createElement('div'));\r\n\t\r\n\t      if (!sm2.oMC.id) {\r\n\t\r\n\t        sm2.oMC.id = sm2.movieID;\r\n\t        sm2.oMC.className = swfCSS.swfDefault + ' ' + extraClass;\r\n\t        s = null;\r\n\t        oEl = null;\r\n\t\r\n\t        if (!sm2.useFlashBlock) {\r\n\t          if (sm2.useHighPerformance) {\r\n\t            // on-screen at all times\r\n\t            s = {\r\n\t              position: 'fixed',\r\n\t              width: '8px',\r\n\t              height: '8px',\r\n\t              // >= 6px for flash to run fast, >= 8px to start up under Firefox/win32 in some cases. odd? yes.\r\n\t              bottom: '0px',\r\n\t              left: '0px',\r\n\t              overflow: 'hidden'\r\n\t            };\r\n\t          } else {\r\n\t            // hide off-screen, lower priority\r\n\t            s = {\r\n\t              position: 'absolute',\r\n\t              width: '6px',\r\n\t              height: '6px',\r\n\t              top: '-9999px',\r\n\t              left: '-9999px'\r\n\t            };\r\n\t            if (isRTL) {\r\n\t              s.left = Math.abs(parseInt(s.left, 10)) + 'px';\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t\r\n\t        if (isWebkit) {\r\n\t          // soundcloud-reported render/crash fix, safari 5\r\n\t          sm2.oMC.style.zIndex = 10000;\r\n\t        }\r\n\t\r\n\t        if (!sm2.debugFlash) {\r\n\t          for (x in s) {\r\n\t            if (s.hasOwnProperty(x)) {\r\n\t              sm2.oMC.style[x] = s[x];\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t\r\n\t        try {\r\n\t\r\n\t          if (!isIE) {\r\n\t            sm2.oMC.appendChild(oMovie);\r\n\t          }\r\n\t\r\n\t          oTarget.appendChild(sm2.oMC);\r\n\t\r\n\t          if (isIE) {\r\n\t            oEl = sm2.oMC.appendChild(doc.createElement('div'));\r\n\t            oEl.className = swfCSS.swfBox;\r\n\t            oEl.innerHTML = movieHTML;\r\n\t          }\r\n\t\r\n\t          appendSuccess = true;\r\n\t\r\n\t        } catch(e) {\r\n\t\r\n\t          throw new Error(str('domError') + ' \\n' + e.toString());\r\n\t\r\n\t        }\r\n\t\r\n\t      } else {\r\n\t\r\n\t        // SM2 container is already in the document (eg. flashblock use case)\r\n\t        sClass = sm2.oMC.className;\r\n\t        sm2.oMC.className = (sClass ? sClass + ' ' : swfCSS.swfDefault) + (extraClass ? ' ' + extraClass : '');\r\n\t        sm2.oMC.appendChild(oMovie);\r\n\t\r\n\t        if (isIE) {\r\n\t          oEl = sm2.oMC.appendChild(doc.createElement('div'));\r\n\t          oEl.className = swfCSS.swfBox;\r\n\t          oEl.innerHTML = movieHTML;\r\n\t        }\r\n\t\r\n\t        appendSuccess = true;\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    didAppend = true;\r\n\t\r\n\t    initMsg();\r\n\t\r\n\t    // sm2._wD(sm + ': Trying to load ' + movieURL + (!overHTTP && sm2.altURL ? ' (alternate URL)' : ''), 1);\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  initMovie = function() {\r\n\t\r\n\t    if (sm2.html5Only) {\r\n\t      createMovie();\r\n\t      return false;\r\n\t    }\r\n\t\r\n\t    // attempt to get, or create, movie (may already exist)\r\n\t    if (flash) return false;\r\n\t\r\n\t    if (!sm2.url) {\r\n\t\r\n\t      /**\r\n\t       * Something isn't right - we've reached init, but the soundManager url property has not been set.\r\n\t       * User has not called setup({url: ...}), or has not set soundManager.url (legacy use case) directly before init time.\r\n\t       * Notify and exit. If user calls setup() with a url: property, init will be restarted as in the deferred loading case.\r\n\t       */\r\n\t\r\n\t       _wDS('noURL');\r\n\t       return false;\r\n\t\r\n\t    }\r\n\t\r\n\t    // inline markup case\r\n\t    flash = sm2.getMovie(sm2.id);\r\n\t\r\n\t    if (!flash) {\r\n\t\r\n\t      if (!oRemoved) {\r\n\t\r\n\t        // try to create\r\n\t        createMovie(sm2.id, sm2.url);\r\n\t\r\n\t      } else {\r\n\t\r\n\t        // try to re-append removed movie after reboot()\r\n\t        if (!isIE) {\r\n\t          sm2.oMC.appendChild(oRemoved);\r\n\t        } else {\r\n\t          sm2.oMC.innerHTML = oRemovedHTML;\r\n\t        }\r\n\t\r\n\t        oRemoved = null;\r\n\t        didAppend = true;\r\n\t\r\n\t      }\r\n\t\r\n\t      flash = sm2.getMovie(sm2.id);\r\n\t\r\n\t    }\r\n\t\r\n\t    if (typeof sm2.oninitmovie === 'function') {\r\n\t      setTimeout(sm2.oninitmovie, 1);\r\n\t    }\r\n\t\r\n\t    // <d>\r\n\t    flushMessages();\r\n\t    // </d>\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  delayWaitForEI = function() {\r\n\t\r\n\t    setTimeout(waitForEI, 1000);\r\n\t\r\n\t  };\r\n\t\r\n\t  rebootIntoHTML5 = function() {\r\n\t\r\n\t    // special case: try for a reboot with preferFlash: false, if 100% HTML5 mode is possible and useFlashBlock is not enabled.\r\n\t\r\n\t    window.setTimeout(function() {\r\n\t\r\n\t      complain(smc + 'useFlashBlock is false, 100% HTML5 mode is possible. Rebooting with preferFlash: false...');\r\n\t\r\n\t      sm2.setup({\r\n\t        preferFlash: false\r\n\t      }).reboot();\r\n\t\r\n\t      // if for some reason you want to detect this case, use an ontimeout() callback and look for html5Only and didFlashBlock == true.\r\n\t      sm2.didFlashBlock = true;\r\n\t\r\n\t      sm2.beginDelayedInit();\r\n\t\r\n\t    }, 1);\r\n\t\r\n\t  };\r\n\t\r\n\t  waitForEI = function() {\r\n\t\r\n\t    var p,\r\n\t        loadIncomplete = false;\r\n\t\r\n\t    if (!sm2.url) {\r\n\t      // No SWF url to load (noURL case) - exit for now. Will be retried when url is set.\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    if (waitingForEI) {\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    waitingForEI = true;\r\n\t    event.remove(window, 'load', delayWaitForEI);\r\n\t\r\n\t    if (hasFlash && tryInitOnFocus && !isFocused) {\r\n\t      // Safari won't load flash in background tabs, only when focused.\r\n\t      _wDS('waitFocus');\r\n\t      return;\r\n\t    }\r\n\t\r\n\t    if (!didInit) {\r\n\t      p = sm2.getMoviePercent();\r\n\t      if (p > 0 && p < 100) {\r\n\t        loadIncomplete = true;\r\n\t      }\r\n\t    }\r\n\t\r\n\t    setTimeout(function() {\r\n\t\r\n\t      p = sm2.getMoviePercent();\r\n\t\r\n\t      if (loadIncomplete) {\r\n\t        // special case: if movie *partially* loaded, retry until it's 100% before assuming failure.\r\n\t        waitingForEI = false;\r\n\t        sm2._wD(str('waitSWF'));\r\n\t        window.setTimeout(delayWaitForEI, 1);\r\n\t        return;\r\n\t      }\r\n\t\r\n\t      // <d>\r\n\t      if (!didInit) {\r\n\t\r\n\t        sm2._wD(sm + ': No Flash response within expected time. Likely causes: ' + (p === 0 ? 'SWF load failed, ' : '') + 'Flash blocked or JS-Flash security error.' + (sm2.debugFlash ? ' ' + str('checkSWF') : ''), 2);\r\n\t\r\n\t        if (!overHTTP && p) {\r\n\t\r\n\t          _wDS('localFail', 2);\r\n\t\r\n\t          if (!sm2.debugFlash) {\r\n\t            _wDS('tryDebug', 2);\r\n\t          }\r\n\t\r\n\t        }\r\n\t\r\n\t        if (p === 0) {\r\n\t\r\n\t          // if 0 (not null), probably a 404.\r\n\t          sm2._wD(str('swf404', sm2.url), 1);\r\n\t\r\n\t        }\r\n\t\r\n\t        debugTS('flashtojs', false, ': Timed out' + (overHTTP ? ' (Check flash security or flash blockers)' : ' (No plugin/missing SWF?)'));\r\n\t\r\n\t      }\r\n\t      // </d>\r\n\t\r\n\t      // give up / time-out, depending\r\n\t\r\n\t      if (!didInit && okToDisable) {\r\n\t\r\n\t        if (p === null) {\r\n\t\r\n\t          // SWF failed to report load progress. Possibly blocked.\r\n\t\r\n\t          if (sm2.useFlashBlock || sm2.flashLoadTimeout === 0) {\r\n\t\r\n\t            if (sm2.useFlashBlock) {\r\n\t\r\n\t              flashBlockHandler();\r\n\t\r\n\t            }\r\n\t\r\n\t            _wDS('waitForever');\r\n\t\r\n\t          } else if (!sm2.useFlashBlock && canIgnoreFlash) {\r\n\t\r\n\t            // no custom flash block handling, but SWF has timed out. Will recover if user unblocks / allows SWF load.\r\n\t            rebootIntoHTML5();\r\n\t\r\n\t          } else {\r\n\t\r\n\t            _wDS('waitForever');\r\n\t\r\n\t            // fire any regular registered ontimeout() listeners.\r\n\t            processOnEvents({\r\n\t              type: 'ontimeout',\r\n\t              ignoreInit: true,\r\n\t              error: {\r\n\t                type: 'INIT_FLASHBLOCK'\r\n\t              }\r\n\t            });\r\n\t\r\n\t          }\r\n\t\r\n\t        } else if (sm2.flashLoadTimeout === 0) {\r\n\t\r\n\t          // SWF loaded? Shouldn't be a blocking issue, then.\r\n\t\r\n\t          _wDS('waitForever');\r\n\t\r\n\t        } else if (!sm2.useFlashBlock && canIgnoreFlash) {\r\n\t\r\n\t          rebootIntoHTML5();\r\n\t\r\n\t        } else {\r\n\t\r\n\t          failSafely(true);\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    }, sm2.flashLoadTimeout);\r\n\t\r\n\t  };\r\n\t\r\n\t  handleFocus = function() {\r\n\t\r\n\t    function cleanup() {\r\n\t      event.remove(window, 'focus', handleFocus);\r\n\t    }\r\n\t\r\n\t    if (isFocused || !tryInitOnFocus) {\r\n\t      // already focused, or not special Safari background tab case\r\n\t      cleanup();\r\n\t      return true;\r\n\t    }\r\n\t\r\n\t    okToDisable = true;\r\n\t    isFocused = true;\r\n\t    _wDS('gotFocus');\r\n\t\r\n\t    // allow init to restart\r\n\t    waitingForEI = false;\r\n\t\r\n\t    // kick off ExternalInterface timeout, now that the SWF has started\r\n\t    delayWaitForEI();\r\n\t\r\n\t    cleanup();\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  flushMessages = function() {\r\n\t\r\n\t    // <d>\r\n\t\r\n\t    // SM2 pre-init debug messages\r\n\t    if (messages.length) {\r\n\t      sm2._wD('SoundManager 2: ' + messages.join(' '), 1);\r\n\t      messages = [];\r\n\t    }\r\n\t\r\n\t    // </d>\r\n\t\r\n\t  };\r\n\t\r\n\t  showSupport = function() {\r\n\t\r\n\t    // <d>\r\n\t\r\n\t    flushMessages();\r\n\t\r\n\t    var item, tests = [];\r\n\t\r\n\t    if (sm2.useHTML5Audio && sm2.hasHTML5) {\r\n\t      for (item in sm2.audioFormats) {\r\n\t        if (sm2.audioFormats.hasOwnProperty(item)) {\r\n\t          tests.push(item + ' = ' + sm2.html5[item] + (!sm2.html5[item] && needsFlash && sm2.flash[item] ? ' (using flash)' : (sm2.preferFlash && sm2.flash[item] && needsFlash ? ' (preferring flash)' : (!sm2.html5[item] ? ' (' + (sm2.audioFormats[item].required ? 'required, ' : '') + 'and no flash support)' : ''))));\r\n\t        }\r\n\t      }\r\n\t      sm2._wD('SoundManager 2 HTML5 support: ' + tests.join(', '), 1);\r\n\t    }\r\n\t\r\n\t    // </d>\r\n\t\r\n\t  };\r\n\t\r\n\t  initComplete = function(bNoDisable) {\r\n\t\r\n\t    if (didInit) return false;\r\n\t\r\n\t    if (sm2.html5Only) {\r\n\t      // all good.\r\n\t      _wDS('sm2Loaded', 1);\r\n\t      didInit = true;\r\n\t      initUserOnload();\r\n\t      debugTS('onload', true);\r\n\t      return true;\r\n\t    }\r\n\t\r\n\t    var wasTimeout = (sm2.useFlashBlock && sm2.flashLoadTimeout && !sm2.getMoviePercent()),\r\n\t        result = true,\r\n\t        error;\r\n\t\r\n\t    if (!wasTimeout) {\r\n\t      didInit = true;\r\n\t    }\r\n\t\r\n\t    error = {\r\n\t      type: (!hasFlash && needsFlash ? 'NO_FLASH' : 'INIT_TIMEOUT')\r\n\t    };\r\n\t\r\n\t    sm2._wD('SoundManager 2 ' + (disabled ? 'failed to load' : 'loaded') + ' (' + (disabled ? 'Flash security/load error' : 'OK') + ') ' + String.fromCharCode(disabled ? 10006 : 10003), disabled ? 2 : 1);\r\n\t\r\n\t    if (disabled || bNoDisable) {\r\n\t\r\n\t      if (sm2.useFlashBlock && sm2.oMC) {\r\n\t        sm2.oMC.className = getSWFCSS() + ' ' + (sm2.getMoviePercent() === null ? swfCSS.swfTimedout : swfCSS.swfError);\r\n\t      }\r\n\t\r\n\t      processOnEvents({\r\n\t        type: 'ontimeout',\r\n\t        error: error,\r\n\t        ignoreInit: true\r\n\t      });\r\n\t\r\n\t      debugTS('onload', false);\r\n\t      catchError(error);\r\n\t\r\n\t      result = false;\r\n\t\r\n\t    } else {\r\n\t\r\n\t      debugTS('onload', true);\r\n\t\r\n\t    }\r\n\t\r\n\t    if (!disabled) {\r\n\t\r\n\t      if (sm2.waitForWindowLoad && !windowLoaded) {\r\n\t\r\n\t        _wDS('waitOnload');\r\n\t        event.add(window, 'load', initUserOnload);\r\n\t\r\n\t      } else {\r\n\t\r\n\t        // <d>\r\n\t        if (sm2.waitForWindowLoad && windowLoaded) {\r\n\t          _wDS('docLoaded');\r\n\t        }\r\n\t        // </d>\r\n\t\r\n\t        initUserOnload();\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t    return result;\r\n\t\r\n\t  };\r\n\t\r\n\t  /**\r\n\t   * apply top-level setupOptions object as local properties, eg., this.setupOptions.flashVersion -> this.flashVersion (soundManager.flashVersion)\r\n\t   * this maintains backward compatibility, and allows properties to be defined separately for use by soundManager.setup().\r\n\t   */\r\n\t\r\n\t  setProperties = function() {\r\n\t\r\n\t    var i,\r\n\t        o = sm2.setupOptions;\r\n\t\r\n\t    for (i in o) {\r\n\t\r\n\t      if (o.hasOwnProperty(i)) {\r\n\t\r\n\t        // assign local property if not already defined\r\n\t\r\n\t        if (sm2[i] === _undefined) {\r\n\t\r\n\t          sm2[i] = o[i];\r\n\t\r\n\t        } else if (sm2[i] !== o[i]) {\r\n\t\r\n\t          // legacy support: write manually-assigned property (eg., soundManager.url) back to setupOptions to keep things in sync\r\n\t          sm2.setupOptions[i] = sm2[i];\r\n\t\r\n\t        }\r\n\t\r\n\t      }\r\n\t\r\n\t    }\r\n\t\r\n\t  };\r\n\t\r\n\t\r\n\t  init = function() {\r\n\t\r\n\t    // called after onload()\r\n\t\r\n\t    if (didInit) {\r\n\t      _wDS('didInit');\r\n\t      return false;\r\n\t    }\r\n\t\r\n\t    function cleanup() {\r\n\t      event.remove(window, 'load', sm2.beginDelayedInit);\r\n\t    }\r\n\t\r\n\t    if (sm2.html5Only) {\r\n\t\r\n\t      if (!didInit) {\r\n\t        // we don't need no steenking flash!\r\n\t        cleanup();\r\n\t        sm2.enabled = true;\r\n\t        initComplete();\r\n\t      }\r\n\t\r\n\t      return true;\r\n\t\r\n\t    }\r\n\t\r\n\t    // flash path\r\n\t    initMovie();\r\n\t\r\n\t    try {\r\n\t\r\n\t      // attempt to talk to Flash\r\n\t      flash._externalInterfaceTest(false);\r\n\t\r\n\t      /**\r\n\t       * Apply user-specified polling interval, OR, if \"high performance\" set, faster vs. default polling\r\n\t       * (determines frequency of whileloading/whileplaying callbacks, effectively driving UI framerates)\r\n\t       */\r\n\t      setPolling(true, (sm2.flashPollingInterval || (sm2.useHighPerformance ? 10 : 50)));\r\n\t\r\n\t      if (!sm2.debugMode) {\r\n\t        // stop the SWF from making debug output calls to JS\r\n\t        flash._disableDebug();\r\n\t      }\r\n\t\r\n\t      sm2.enabled = true;\r\n\t      debugTS('jstoflash', true);\r\n\t\r\n\t      if (!sm2.html5Only) {\r\n\t        // prevent browser from showing cached page state (or rather, restoring \"suspended\" page state) via back button, because flash may be dead\r\n\t        // http://www.webkit.org/blog/516/webkit-page-cache-ii-the-unload-event/\r\n\t        event.add(window, 'unload', doNothing);\r\n\t      }\r\n\t\r\n\t    } catch(e) {\r\n\t\r\n\t      sm2._wD('js/flash exception: ' + e.toString());\r\n\t\r\n\t      debugTS('jstoflash', false);\r\n\t\r\n\t      catchError({\r\n\t        type: 'JS_TO_FLASH_EXCEPTION',\r\n\t        fatal: true\r\n\t      });\r\n\t\r\n\t      // don't disable, for reboot()\r\n\t      failSafely(true);\r\n\t\r\n\t      initComplete();\r\n\t\r\n\t      return false;\r\n\t\r\n\t    }\r\n\t\r\n\t    initComplete();\r\n\t\r\n\t    // disconnect events\r\n\t    cleanup();\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  domContentLoaded = function() {\r\n\t\r\n\t    if (didDCLoaded) return false;\r\n\t\r\n\t    didDCLoaded = true;\r\n\t\r\n\t    // assign top-level soundManager properties eg. soundManager.url\r\n\t    setProperties();\r\n\t\r\n\t    initDebug();\r\n\t\r\n\t    if (!hasFlash && sm2.hasHTML5) {\r\n\t\r\n\t      sm2._wD('SoundManager 2: No Flash detected' + (!sm2.useHTML5Audio ? ', enabling HTML5.' : '. Trying HTML5-only mode.'), 1);\r\n\t\r\n\t      sm2.setup({\r\n\t        useHTML5Audio: true,\r\n\t        // make sure we aren't preferring flash, either\r\n\t        // TODO: preferFlash should not matter if flash is not installed. Currently, stuff breaks without the below tweak.\r\n\t        preferFlash: false\r\n\t      });\r\n\t\r\n\t    }\r\n\t\r\n\t    testHTML5();\r\n\t\r\n\t    if (!hasFlash && needsFlash) {\r\n\t\r\n\t      messages.push(strings.needFlash);\r\n\t\r\n\t      // TODO: Fatal here vs. timeout approach, etc.\r\n\t      // hack: fail sooner.\r\n\t      sm2.setup({\r\n\t        flashLoadTimeout: 1\r\n\t      });\r\n\t\r\n\t    }\r\n\t\r\n\t    if (doc.removeEventListener) {\r\n\t      doc.removeEventListener('DOMContentLoaded', domContentLoaded, false);\r\n\t    }\r\n\t\r\n\t    initMovie();\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  domContentLoadedIE = function() {\r\n\t\r\n\t    if (doc.readyState === 'complete') {\r\n\t      domContentLoaded();\r\n\t      doc.detachEvent('onreadystatechange', domContentLoadedIE);\r\n\t    }\r\n\t\r\n\t    return true;\r\n\t\r\n\t  };\r\n\t\r\n\t  winOnLoad = function() {\r\n\t\r\n\t    // catch edge case of initComplete() firing after window.load()\r\n\t    windowLoaded = true;\r\n\t\r\n\t    // catch case where DOMContentLoaded has been sent, but we're still in doc.readyState = 'interactive'\r\n\t    domContentLoaded();\r\n\t\r\n\t    event.remove(window, 'load', winOnLoad);\r\n\t\r\n\t  };\r\n\t\r\n\t  // sniff up-front\r\n\t  detectFlash();\r\n\t\r\n\t  // focus and window load, init (primarily flash-driven)\r\n\t  event.add(window, 'focus', handleFocus);\r\n\t  event.add(window, 'load', delayWaitForEI);\r\n\t  event.add(window, 'load', winOnLoad);\r\n\t\r\n\t  if (doc.addEventListener) {\r\n\t\r\n\t    doc.addEventListener('DOMContentLoaded', domContentLoaded, false);\r\n\t\r\n\t  } else if (doc.attachEvent) {\r\n\t\r\n\t    doc.attachEvent('onreadystatechange', domContentLoadedIE);\r\n\t\r\n\t  } else {\r\n\t\r\n\t    // no add/attachevent support - safe to assume no JS -> Flash either\r\n\t    debugTS('onload', false);\r\n\t    catchError({\r\n\t      type: 'NO_DOM2_EVENTS',\r\n\t      fatal: true\r\n\t    });\r\n\t\r\n\t  }\r\n\t\r\n\t} // SoundManager()\r\n\t\r\n\t// SM2_DEFER details: http://www.schillmania.com/projects/soundmanager2/doc/getstarted/#lazy-loading\r\n\t\r\n\tif (window.SM2_DEFER === _undefined || !SM2_DEFER) {\r\n\t  soundManager = new SoundManager();\r\n\t}\r\n\t\r\n\t/**\r\n\t * SoundManager public interfaces\r\n\t * ------------------------------\r\n\t */\r\n\t\r\n\tif (typeof module === 'object' && module && typeof module.exports === 'object') {\r\n\t\r\n\t  /**\r\n\t   * commonJS module\r\n\t   */\r\n\t\r\n\t  module.exports.SoundManager = SoundManager;\r\n\t  module.exports.soundManager = soundManager;\r\n\t\r\n\t} else if (true) {\r\n\t\r\n\t  /**\r\n\t   * AMD - requireJS\r\n\t   * basic usage:\r\n\t   * require([\"/path/to/soundmanager2.js\"], function(SoundManager) {\r\n\t   *   SoundManager.getInstance().setup({\r\n\t   *     url: '/swf/',\r\n\t   *     onready: function() { ... }\r\n\t   *   })\r\n\t   * });\r\n\t   *\r\n\t   * SM2_DEFER usage:\r\n\t   * window.SM2_DEFER = true;\r\n\t   * require([\"/path/to/soundmanager2.js\"], function(SoundManager) {\r\n\t   *   SoundManager.getInstance(function() {\r\n\t   *     var soundManager = new SoundManager.constructor();\r\n\t   *     soundManager.setup({\r\n\t   *       url: '/swf/',\r\n\t   *       ...\r\n\t   *     });\r\n\t   *     ...\r\n\t   *     soundManager.beginDelayedInit();\r\n\t   *     return soundManager;\r\n\t   *   })\r\n\t   * });\r\n\t   */\r\n\t\r\n\t  !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\r\n\t    /**\r\n\t     * Retrieve the global instance of SoundManager.\r\n\t     * If a global instance does not exist it can be created using a callback.\r\n\t     *\r\n\t     * @param {Function} smBuilder Optional: Callback used to create a new SoundManager instance\r\n\t     * @return {SoundManager} The global SoundManager instance\r\n\t     */\r\n\t    function getInstance(smBuilder) {\r\n\t      if (!window.soundManager && smBuilder instanceof Function) {\r\n\t        var instance = smBuilder(SoundManager);\r\n\t        if (instance instanceof SoundManager) {\r\n\t          window.soundManager = instance;\r\n\t        }\r\n\t      }\r\n\t      return window.soundManager;\r\n\t    }\r\n\t    return {\r\n\t      constructor: SoundManager,\r\n\t      getInstance: getInstance\r\n\t    };\r\n\t  }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t\r\n\t}\r\n\t\r\n\t// standard browser case\r\n\t\r\n\t// constructor\r\n\twindow.SoundManager = SoundManager;\r\n\t\r\n\t/**\r\n\t * note: SM2 requires a window global due to Flash, which makes calls to window.soundManager.\r\n\t * Flash may not always be needed, but this is not known until async init and SM2 may even \"reboot\" into Flash mode.\r\n\t */\r\n\t\r\n\t// public API, flash callbacks etc.\r\n\twindow.soundManager = soundManager;\r\n\t\r\n\t}(window));\r\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(194)(module)))\n\n/***/ }),\n\n/***/ 203:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _reactSound = __webpack_require__(421);\n\t\n\tvar _reactSound2 = _interopRequireDefault(_reactSound);\n\t\n\tvar _track = __webpack_require__(458);\n\t\n\tvar _track2 = _interopRequireDefault(_track);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Player = function (_Component) {\n\t  _inherits(Player, _Component);\n\t\n\t  function Player() {\n\t    _classCallCheck(this, Player);\n\t\n\t    var _this = _possibleConstructorReturn(this, _Component.call(this));\n\t\n\t    _this.handlePlaying = _this.handlePlaying.bind(_this);\n\t    return _this;\n\t  }\n\t\n\t  Player.prototype.handlePlaying = function handlePlaying(_ref) {\n\t    var position = _ref.position,\n\t        duration = _ref.duration;\n\t\n\t    console.log(position);\n\t  };\n\t\n\t  Player.prototype.render = function render() {\n\t    return _react2.default.createElement(_reactSound2.default, {\n\t      onPlaying: this.handlePlaying,\n\t      url: _track2.default,\n\t      playStatus: 'PAUSE'\n\t    });\n\t  };\n\t\n\t  return Player;\n\t}(_react.Component);\n\t\n\texports.default = Player;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 458:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/track.faee83f9.mp3\";\n\n/***/ }),\n\n/***/ 204:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar Slider = function Slider() {\n\t  return _react2.default.createElement('div', null);\n\t};\n\t\n\texports.default = Slider;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 71:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _templateObject = _taggedTemplateLiteralLoose(['\\n  display: flex;\\n'], ['\\n  display: flex;\\n']),\n\t    _templateObject2 = _taggedTemplateLiteralLoose(['\\n  padding-left: 1em;\\n'], ['\\n  padding-left: 1em;\\n']),\n\t    _templateObject3 = _taggedTemplateLiteralLoose(['\\n  filter: invert(1);\\n'], ['\\n  filter: invert(1);\\n']);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _styledComponents = __webpack_require__(13);\n\t\n\tvar _styledComponents2 = _interopRequireDefault(_styledComponents);\n\t\n\tvar _Section = __webpack_require__(18);\n\t\n\tvar _Section2 = _interopRequireDefault(_Section);\n\t\n\tvar _radioMegaLogo = __webpack_require__(122);\n\t\n\tvar _radioMegaLogo2 = _interopRequireDefault(_radioMegaLogo);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }\n\t\n\tvar Div = _styledComponents2.default.div(_templateObject);\n\t\n\tvar P = _styledComponents2.default.p(_templateObject2);\n\t\n\tvar Img = _styledComponents2.default.img(_templateObject3);\n\t\n\tvar LaRadio = function LaRadio() {\n\t  return _react2.default.createElement(\n\t    _Section2.default,\n\t    {\n\t      title: 'La radio',\n\t      background: 'black',\n\t      color: 'white',\n\t      align: 'right',\n\t      id: 'la-radio'\n\t    },\n\t    _react2.default.createElement(\n\t      Div,\n\t      null,\n\t      _react2.default.createElement(Img, { src: _radioMegaLogo2.default, alt: 'Radio Mega Logo' }),\n\t      _react2.default.createElement(\n\t        P,\n\t        null,\n\t        'Ut dapibus ligula eget facilisis efficitur. Morbi dolor est, suscipit at neque quis, cursus fermentum urna. In bibendum eu tellus quis bibendum. Sed accumsan massa vel lectus consectetur, vel blandit massa convallis. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nam sodales est lectus. Pellentesque scelerisque sodales eros, vel porttitor ex. Vivamus eu lectus sem. In suscipit nibh non metus lacinia, nec gravida nibh placerat. Nam nec venenatis lorem. Morbi arcu orci, scelerisque sed bibendum quis, dictum vitae massa. Morbi pulvinar laoreet nulla.'\n\t      )\n\t    )\n\t  );\n\t};\n\t\n\texports.default = LaRadio;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 72:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _templateObject = _taggedTemplateLiteralLoose(['\\n  display: block;\\n  border-radius: 2px;\\n  width: 50vw;\\n  height: auto;\\n  max-width: 260px;\\n  box-shadow: 0 0 30px rgba(0,0,0,.2);\\n'], ['\\n  display: block;\\n  border-radius: 2px;\\n  width: 50vw;\\n  height: auto;\\n  max-width: 260px;\\n  box-shadow: 0 0 30px rgba(0,0,0,.2);\\n']),\n\t    _templateObject2 = _taggedTemplateLiteralLoose(['\\n  display: flex;\\n'], ['\\n  display: flex;\\n']),\n\t    _templateObject3 = _taggedTemplateLiteralLoose(['\\n  padding-left: 1em;\\n'], ['\\n  padding-left: 1em;\\n']);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _styledComponents = __webpack_require__(13);\n\t\n\tvar _styledComponents2 = _interopRequireDefault(_styledComponents);\n\t\n\tvar _Section = __webpack_require__(18);\n\t\n\tvar _Section2 = _interopRequireDefault(_Section);\n\t\n\tvar _laurentGalandon = __webpack_require__(121);\n\t\n\tvar _laurentGalandon2 = _interopRequireDefault(_laurentGalandon);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }\n\t\n\tvar Img = _styledComponents2.default.img(_templateObject);\n\t\n\tvar Div = _styledComponents2.default.div(_templateObject2);\n\t\n\tvar P = _styledComponents2.default.p(_templateObject3);\n\t\n\tvar LaurentGalandon = function LaurentGalandon() {\n\t  return _react2.default.createElement(\n\t    _Section2.default,\n\t    {\n\t      title: 'Laurent Galandon',\n\t      background: 'rebeccaPurple',\n\t      id: 'laurent-galandon',\n\t      color: '#fafafa',\n\t      align: 'left'\n\t    },\n\t    _react2.default.createElement(\n\t      Div,\n\t      null,\n\t      _react2.default.createElement(Img, { src: _laurentGalandon2.default, alt: 'Laurent Galandon' }),\n\t      _react2.default.createElement(\n\t        P,\n\t        null,\n\t        'Ut dapibus ligula eget facilisis efficitur. Morbi dolor est, suscipit at neque quis, cursus fermentum urna. In bibendum eu tellus quis bibendum. Sed accumsan massa vel lectus consectetur, vel blandit massa convallis. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nam sodales est lectus. Pellentesque scelerisque sodales eros, vel porttitor ex. Vivamus eu lectus sem. In suscipit nibh non metus lacinia, nec gravida nibh placerat. Nam nec venenatis lorem. Morbi arcu orci, scelerisque sed bibendum quis, dictum vitae massa. Morbi pulvinar laoreet nulla.'\n\t      )\n\t    )\n\t  );\n\t};\n\t\n\texports.default = LaurentGalandon;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 73:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _templateObject = _taggedTemplateLiteralLoose(['\\n  column-count: 2;\\n'], ['\\n  column-count: 2;\\n']);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _styledComponents = __webpack_require__(13);\n\t\n\tvar _styledComponents2 = _interopRequireDefault(_styledComponents);\n\t\n\tvar _Section = __webpack_require__(18);\n\t\n\tvar _Section2 = _interopRequireDefault(_Section);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }\n\t\n\tvar P = _styledComponents2.default.p(_templateObject);\n\t\n\tvar LeProjet = function LeProjet() {\n\t  return _react2.default.createElement(\n\t    _Section2.default,\n\t    {\n\t      title: 'Le projet',\n\t      background: 'white',\n\t      color: '#e5763d',\n\t      id: 'le-projet'\n\t    },\n\t    _react2.default.createElement(\n\t      P,\n\t      null,\n\t      'Aenean lobortis velit eros, sit amet consectetur lectus bibendum sit amet. Curabitur ut vulputate est. Nam vel luctus leo. Nam sollicitudin volutpat mi, id tempor turpis bibendum vitae. Aliquam imperdiet quam sed justo interdum cursus. Sed eu nulla ipsum. Cras fermentum scelerisque eleifend. Ut feugiat ipsum ut eros lobortis, volutpat elementum nulla tempus. ',\n\t      _react2.default.createElement('br', null),\n\t      'Integer vel augue sed magna pulvinar maximus. Donec non laoreet massa, vel facilisis urna. Ut gravida risus sapien, sit amet euismod velit pulvinar at. Praesent varius lorem gravida maximus hendrerit. Etiam lacinia ligula ut est consequat auctor. Cras in vestibulum sapien, quis pretium arcu. In dignissim vestibulum nulla eu faucibus.'\n\t    )\n\t  );\n\t};\n\t\n\texports.default = LeProjet;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 74:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _templateObject = _taggedTemplateLiteralLoose(['\\n  border-radius: 50%;\\n'], ['\\n  border-radius: 50%;\\n']),\n\t    _templateObject2 = _taggedTemplateLiteralLoose(['\\n  display: flex;\\n  flex-direction: column;\\n  padding-right: .5em;\\n  width: 100%/', ';\\n'], ['\\n  display: flex;\\n  flex-direction: column;\\n  padding-right: .5em;\\n  width: 100%/', ';\\n']),\n\t    _templateObject3 = _taggedTemplateLiteralLoose(['\\n  text-transform: uppercase;\\n  margin-bottom: 0.5rem;\\n'], ['\\n  text-transform: uppercase;\\n  margin-bottom: 0.5rem;\\n']),\n\t    _templateObject4 = _taggedTemplateLiteralLoose(['\\n  display: flex;\\n'], ['\\n  display: flex;\\n']);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _styledComponents = __webpack_require__(13);\n\t\n\tvar _styledComponents2 = _interopRequireDefault(_styledComponents);\n\t\n\tvar _Section = __webpack_require__(18);\n\t\n\tvar _Section2 = _interopRequireDefault(_Section);\n\t\n\tvar _acteur = __webpack_require__(120);\n\t\n\tvar _acteur2 = _interopRequireDefault(_acteur);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }\n\t\n\tvar data = [{\n\t  name: 'name',\n\t  description: 'n semper turpis vel cursus luctus. Suspendisse tincidunt egestas quam, eget sodales felis faucibus scelerisque. Suspendisse pulvinar accumsan ',\n\t  image: _acteur2.default\n\t}, {\n\t  name: 'name',\n\t  description: 'n semper turpis vel cursus luctus. Suspendisse tincidunt egestas quam, eget sodales felis faucibus scelerisque. Suspendisse pulvinar accumsan ',\n\t  image: _acteur2.default\n\t}, {\n\t  name: 'name',\n\t  description: 'n semper turpis vel cursus luctus. Suspendisse tincidunt egestas quam, eget sodales felis faucibus scelerisque. Suspendisse pulvinar accumsan ',\n\t  image: _acteur2.default\n\t}, {\n\t  name: 'name',\n\t  description: 'n semper turpis vel cursus luctus. Suspendisse tincidunt egestas quam, eget sodales felis faucibus scelerisque. Suspendisse pulvinar accumsan ',\n\t  image: _acteur2.default\n\t}];\n\t\n\tvar Img = _styledComponents2.default.img(_templateObject);\n\t\n\tvar Acteur = _styledComponents2.default.div(_templateObject2, function (props) {\n\t  return props.width;\n\t});\n\t\n\tvar Name = _styledComponents2.default.h3(_templateObject3);\n\t\n\tvar Acteurs = _styledComponents2.default.div(_templateObject4);\n\t\n\tvar LesActeurs = function LesActeurs() {\n\t  return _react2.default.createElement(\n\t    _Section2.default,\n\t    {\n\t      title: 'Les acteurs',\n\t      background: 'white',\n\t      id: 'les-acteurs',\n\t      align: 'left'\n\t    },\n\t    _react2.default.createElement(\n\t      Acteurs,\n\t      null,\n\t      data.map(function (_ref) {\n\t        var name = _ref.name,\n\t            description = _ref.description,\n\t            image = _ref.image;\n\t        return _react2.default.createElement(\n\t          Acteur,\n\t          { width: data.length },\n\t          _react2.default.createElement(\n\t            Name,\n\t            null,\n\t            name\n\t          ),\n\t          _react2.default.createElement('img', { src: image, alt: name }),\n\t          _react2.default.createElement(\n\t            'p',\n\t            null,\n\t            description\n\t          )\n\t        );\n\t      })\n\t    )\n\t  );\n\t};\n\t\n\texports.default = LesActeurs;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 120:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/acteur.65b6c1e8.jpg\";\n\n/***/ }),\n\n/***/ 460:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/cover.bdb6f42a.png\";\n\n/***/ }),\n\n/***/ 207:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _templateObject = _taggedTemplateLiteralLoose(['\\n  height: 100vh;\\n'], ['\\n  height: 100vh;\\n']),\n\t    _templateObject2 = _taggedTemplateLiteralLoose(['\\n  margin: 0;\\n  font-weight: 900;\\n  color: #b6c135;\\n  font-size: 150px;\\n  text-shadow: 0em 0em 10px rgba(0,0,0,0.2);\\n  font-family: Cyclone;\\n'], ['\\n  margin: 0;\\n  font-weight: 900;\\n  color: #b6c135;\\n  font-size: 150px;\\n  text-shadow: 0em 0em 10px rgba(0,0,0,0.2);\\n  font-family: Cyclone;\\n']);\n\t\n\tvar _react = __webpack_require__(2);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _gatsbyLink = __webpack_require__(150);\n\t\n\tvar _gatsbyLink2 = _interopRequireDefault(_gatsbyLink);\n\t\n\tvar _styledComponents = __webpack_require__(13);\n\t\n\tvar _styledComponents2 = _interopRequireDefault(_styledComponents);\n\t\n\tvar _Section = __webpack_require__(18);\n\t\n\tvar _Section2 = _interopRequireDefault(_Section);\n\t\n\tvar _Player = __webpack_require__(203);\n\t\n\tvar _Player2 = _interopRequireDefault(_Player);\n\t\n\tvar _Slider = __webpack_require__(204);\n\t\n\tvar _Slider2 = _interopRequireDefault(_Slider);\n\t\n\tvar _cover = __webpack_require__(460);\n\t\n\tvar _cover2 = _interopRequireDefault(_cover);\n\t\n\tvar _LaurentGalandon = __webpack_require__(72);\n\t\n\tvar _LaurentGalandon2 = _interopRequireDefault(_LaurentGalandon);\n\t\n\tvar _LaRadio = __webpack_require__(71);\n\t\n\tvar _LaRadio2 = _interopRequireDefault(_LaRadio);\n\t\n\tvar _LeProjet = __webpack_require__(73);\n\t\n\tvar _LeProjet2 = _interopRequireDefault(_LeProjet);\n\t\n\tvar _LesActeurs = __webpack_require__(74);\n\t\n\tvar _LesActeurs2 = _interopRequireDefault(_LesActeurs);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }\n\t// import { Wave } from 'balekomponents'\n\t\n\tvar Div = _styledComponents2.default.div(_templateObject);\n\t\n\tvar H1 = _styledComponents2.default.h1(_templateObject2);\n\t\n\tvar IndexPage = function IndexPage() {\n\t  return _react2.default.createElement(\n\t    'div',\n\t    null,\n\t    _react2.default.createElement(\n\t      _Section2.default,\n\t      null,\n\t      _react2.default.createElement(\n\t        H1,\n\t        null,\n\t        'Interferences'\n\t      )\n\t    ),\n\t    _react2.default.createElement(\n\t      _Section2.default,\n\t      {\n\t        title: 'La fiction',\n\t        id: 'la-fiction'\n\t      },\n\t      _react2.default.createElement(_Player2.default, null)\n\t    ),\n\t    _react2.default.createElement(_LeProjet2.default, null),\n\t    _react2.default.createElement(_LaurentGalandon2.default, null),\n\t    _react2.default.createElement(_LaRadio2.default, null),\n\t    _react2.default.createElement(_LesActeurs2.default, null),\n\t    _react2.default.createElement(_Section2.default, {\n\t      title: 'Les partenaires',\n\t      id: 'les-partenaires'\n\t    })\n\t  );\n\t};\n\t\n\texports.default = IndexPage;\n\tmodule.exports = exports['default'];\n\n/***/ }),\n\n/***/ 121:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/laurent-galandon.fe31adcb.jpg\";\n\n/***/ }),\n\n/***/ 122:\n/***/ (function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__.p + \"static/radio-mega-logo.1a8942af.png\";\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-pages-index-js-872becf8ee2fad66b067.js","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar pendingCalls = [];\nvar initialized = false;\n\nvar soundManager = void 0;\nif (typeof window !== 'undefined') {\n  soundManager = require('soundmanager2').soundManager;\n\n  soundManager.onready(function () {\n    pendingCalls.slice().forEach(function (cb) {\n      return cb();\n    });\n  });\n}\n\nfunction _createSound(options, cb) {\n  if (soundManager.ok()) {\n    cb(soundManager.createSound(options));\n    return function () {};\n  } else {\n    if (!initialized) {\n      initialized = true;\n      soundManager.beginDelayedInit();\n    }\n\n    var call = function call() {\n      cb(soundManager.createSound(options));\n    };\n\n    pendingCalls.push(call);\n\n    return function () {\n      pendingCalls.splice(pendingCalls.indexOf(call), 1);\n    };\n  }\n}\n\nfunction noop() {}\n\nvar playStatuses = {\n  PLAYING: 'PLAYING',\n  STOPPED: 'STOPPED',\n  PAUSED: 'PAUSED'\n};\n\nvar Sound = function (_React$Component) {\n  _inherits(Sound, _React$Component);\n\n  function Sound() {\n    _classCallCheck(this, Sound);\n\n    return _possibleConstructorReturn(this, (Sound.__proto__ || Object.getPrototypeOf(Sound)).apply(this, arguments));\n  }\n\n  _createClass(Sound, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.createSound(function (sound) {\n        if (_this2.props.playStatus === playStatuses.PLAYING) {\n          sound.play();\n        }\n      });\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.removeSound();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _this3 = this;\n\n      var withSound = function withSound(sound) {\n        if (!sound) {\n          return;\n        }\n\n        if (_this3.props.playStatus === playStatuses.PLAYING) {\n          if (sound.playState === 0) {\n            sound.play();\n          }\n\n          if (sound.paused) {\n            sound.resume();\n          }\n        } else if (_this3.props.playStatus === playStatuses.STOPPED) {\n          if (sound.playState !== 0) {\n            sound.stop();\n          }\n        } else {\n          // this.props.playStatus === playStatuses.PAUSED\n          if (!sound.paused) {\n            sound.pause();\n          }\n        }\n\n        if (_this3.props.playFromPosition !== prevProps.playFromPosition) {\n          sound.setPosition(_this3.props.playFromPosition);\n        }\n\n        if (_this3.props.position != null) {\n          if (sound.position !== _this3.props.position && Math.round(sound.position) !== Math.round(_this3.props.position)) {\n\n            sound.setPosition(_this3.props.position);\n          }\n        }\n\n        if (_this3.props.volume !== prevProps.volume) {\n          sound.setVolume(_this3.props.volume);\n        }\n      };\n\n      if (this.props.url !== prevProps.url) {\n        this.createSound(withSound);\n      } else {\n        withSound(this.sound);\n      }\n    }\n  }, {\n    key: 'createSound',\n    value: function createSound(callback) {\n      var _this4 = this;\n\n      this.removeSound();\n\n      var props = this.props;\n      var that = this;\n\n      if (!props.url) {\n        return;\n      }\n\n      this.stopCreatingSound = _createSound({\n        url: this.props.url,\n        autoLoad: props.autoLoad,\n        volume: props.volume,\n        position: this.props.playFromPosition || this.props.position || 0,\n        whileloading: function whileloading() {\n          props.onLoading(this);\n        },\n        whileplaying: function whileplaying() {\n          props.onPlaying(this);\n        },\n        onerror: function onerror(errorCode, description) {\n          props.onError(errorCode, description, this);\n        },\n        onload: function onload() {\n          props.onLoad(this);\n        },\n        onpause: function onpause() {\n          props.onPause(this);\n        },\n        onresume: function onresume() {\n          props.onResume(this);\n        },\n        onstop: function onstop() {\n          props.onStop(this);\n        },\n        onfinish: function onfinish() {\n          if (that.props.loop && that.props.playStatus === playStatuses.PLAYING) {\n            that.sound.play();\n          } else {\n            props.onFinishedPlaying();\n          }\n        }\n      }, function (sound) {\n        _this4.sound = sound;\n        callback(sound);\n      });\n    }\n  }, {\n    key: 'removeSound',\n    value: function removeSound() {\n      if (this.stopCreatingSound) {\n        this.stopCreatingSound();\n        delete this.stopCreatingSound;\n      }\n\n      if (this.sound) {\n        try {\n          this.sound.destruct();\n        } catch (e) {} // eslint-disable-line\n\n        delete this.sound;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return Sound;\n}(_react2.default.Component);\n\nSound.status = playStatuses;\nSound.propTypes = {\n  url: _propTypes2.default.string.isRequired,\n  playStatus: _propTypes2.default.oneOf(Object.keys(playStatuses)).isRequired,\n  position: _propTypes2.default.number,\n  playFromPosition: _propTypes2.default.number,\n  volume: _propTypes2.default.number,\n  onError: _propTypes2.default.func,\n  onLoading: _propTypes2.default.func,\n  onLoad: _propTypes2.default.func,\n  onPlaying: _propTypes2.default.func,\n  onPause: _propTypes2.default.func,\n  onResume: _propTypes2.default.func,\n  onStop: _propTypes2.default.func,\n  onFinishedPlaying: _propTypes2.default.func,\n  autoLoad: _propTypes2.default.bool,\n  loop: _propTypes2.default.bool\n};\nSound.defaultProps = {\n  playFromPosition: 0,\n  volume: 100,\n  onError: noop,\n  onLoading: noop,\n  onPlaying: noop,\n  onLoad: noop,\n  onPause: noop,\n  onResume: noop,\n  onStop: noop,\n  onFinishedPlaying: noop,\n  autoLoad: false,\n  loop: false\n};\nexports.default = Sound;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-sound/lib/index.js\n// module id = 421\n// module chunks = 35783957827783","/** @license\r\n *\r\n * SoundManager 2: JavaScript Sound for the Web\r\n * ----------------------------------------------\r\n * http://schillmania.com/projects/soundmanager2/\r\n *\r\n * Copyright (c) 2007, Scott Schiller. All rights reserved.\r\n * Code provided under the BSD License:\r\n * http://schillmania.com/projects/soundmanager2/license.txt\r\n *\r\n * V2.97a.20170601\r\n */\r\n\r\n/**\r\n * About this file\r\n * -------------------------------------------------------------------------------------\r\n * This is the fully-commented source version of the SoundManager 2 API,\r\n * recommended for use during development and testing.\r\n *\r\n * See soundmanager2-nodebug-jsmin.js for an optimized build (~11KB with gzip.)\r\n * http://schillmania.com/projects/soundmanager2/doc/getstarted/#basic-inclusion\r\n * Alternately, serve this file with gzip for 75% compression savings (~30KB over HTTP.)\r\n *\r\n * You may notice <d> and </d> comments in this source; these are delimiters for\r\n * debug blocks which are removed in the -nodebug builds, further optimizing code size.\r\n *\r\n * Also, as you may note: Whoa, reliable cross-platform/device audio support is hard! ;)\r\n */\r\n\r\n(function SM2(window, _undefined) {\r\n\r\n/* global Audio, document, window, navigator, define, module, SM2_DEFER, opera, setTimeout, setInterval, clearTimeout, sm2Debugger */\r\n\r\n'use strict';\r\n\r\nif (!window || !window.document) {\r\n\r\n  // Don't cross the [environment] streams. SM2 expects to be running in a browser, not under node.js etc.\r\n  // Additionally, if a browser somehow manages to fail this test, as Egon said: \"It would be bad.\"\r\n\r\n  throw new Error('SoundManager requires a browser with window and document objects.');\r\n\r\n}\r\n\r\nvar soundManager = null;\r\n\r\n/**\r\n * The SoundManager constructor.\r\n *\r\n * @constructor\r\n * @param {string} smURL Optional: Path to SWF files\r\n * @param {string} smID Optional: The ID to use for the SWF container element\r\n * @this {SoundManager}\r\n * @return {SoundManager} The new SoundManager instance\r\n */\r\n\r\nfunction SoundManager(smURL, smID) {\r\n\r\n  /**\r\n   * soundManager configuration options list\r\n   * defines top-level configuration properties to be applied to the soundManager instance (eg. soundManager.flashVersion)\r\n   * to set these properties, use the setup() method - eg., soundManager.setup({url: '/swf/', flashVersion: 9})\r\n   */\r\n\r\n  this.setupOptions = {\r\n\r\n    url: (smURL || null),             // path (directory) where SoundManager 2 SWFs exist, eg., /path/to/swfs/\r\n    flashVersion: 8,                  // flash build to use (8 or 9.) Some API features require 9.\r\n    debugMode: true,                  // enable debugging output (console.log() with HTML fallback)\r\n    debugFlash: false,                // enable debugging output inside SWF, troubleshoot Flash/browser issues\r\n    useConsole: true,                 // use console.log() if available (otherwise, writes to #soundmanager-debug element)\r\n    consoleOnly: true,                // if console is being used, do not create/write to #soundmanager-debug\r\n    waitForWindowLoad: false,         // force SM2 to wait for window.onload() before trying to call soundManager.onload()\r\n    bgColor: '#ffffff',               // SWF background color. N/A when wmode = 'transparent'\r\n    useHighPerformance: false,        // position:fixed flash movie can help increase js/flash speed, minimize lag\r\n    flashPollingInterval: null,       // msec affecting whileplaying/loading callback frequency. If null, default of 50 msec is used.\r\n    html5PollingInterval: null,       // msec affecting whileplaying() for HTML5 audio, excluding mobile devices. If null, native HTML5 update events are used.\r\n    flashLoadTimeout: 1000,           // msec to wait for flash movie to load before failing (0 = infinity)\r\n    wmode: null,                      // flash rendering mode - null, 'transparent', or 'opaque' (last two allow z-index to work)\r\n    allowScriptAccess: 'always',      // for scripting the SWF (object/embed property), 'always' or 'sameDomain'\r\n    useFlashBlock: false,             // *requires flashblock.css, see demos* - allow recovery from flash blockers. Wait indefinitely and apply timeout CSS to SWF, if applicable.\r\n    useHTML5Audio: true,              // use HTML5 Audio() where API is supported (most Safari, Chrome versions), Firefox (MP3/MP4 support varies.) Ideally, transparent vs. Flash API where possible.\r\n    forceUseGlobalHTML5Audio: false,  // if true, a single Audio() object is used for all sounds - and only one can play at a time.\r\n    ignoreMobileRestrictions: false,  // if true, SM2 will not apply global HTML5 audio rules to mobile UAs. iOS > 7 and WebViews may allow multiple Audio() instances.\r\n    html5Test: /^(probably|maybe)$/i, // HTML5 Audio() format support test. Use /^probably$/i; if you want to be more conservative.\r\n    preferFlash: false,               // overrides useHTML5audio, will use Flash for MP3/MP4/AAC if present. Potential option if HTML5 playback with these formats is quirky.\r\n    noSWFCache: false,                // if true, appends ?ts={date} to break aggressive SWF caching.\r\n    idPrefix: 'sound'                 // if an id is not provided to createSound(), this prefix is used for generated IDs - 'sound0', 'sound1' etc.\r\n\r\n  };\r\n\r\n  this.defaultOptions = {\r\n\r\n    /**\r\n     * the default configuration for sound objects made with createSound() and related methods\r\n     * eg., volume, auto-load behaviour and so forth\r\n     */\r\n\r\n    autoLoad: false,        // enable automatic loading (otherwise .load() will be called on demand with .play(), the latter being nicer on bandwidth - if you want to .load yourself, you also can)\r\n    autoPlay: false,        // enable playing of file as soon as possible (much faster if \"stream\" is true)\r\n    from: null,             // position to start playback within a sound (msec), default = beginning\r\n    loops: 1,               // how many times to repeat the sound (position will wrap around to 0, setPosition() will break out of loop when >0)\r\n    onid3: null,            // callback function for \"ID3 data is added/available\"\r\n    onerror: null,          // callback function for \"load failed\" (or, playback/network/decode error under HTML5.)\r\n    onload: null,           // callback function for \"load finished\"\r\n    whileloading: null,     // callback function for \"download progress update\" (X of Y bytes received)\r\n    onplay: null,           // callback for \"play\" start\r\n    onpause: null,          // callback for \"pause\"\r\n    onresume: null,         // callback for \"resume\" (pause toggle)\r\n    whileplaying: null,     // callback during play (position update)\r\n    onposition: null,       // object containing times and function callbacks for positions of interest\r\n    onstop: null,           // callback for \"user stop\"\r\n    onfinish: null,         // callback function for \"sound finished playing\"\r\n    multiShot: true,        // let sounds \"restart\" or layer on top of each other when played multiple times, rather than one-shot/one at a time\r\n    multiShotEvents: false, // fire multiple sound events (currently onfinish() only) when multiShot is enabled\r\n    position: null,         // offset (milliseconds) to seek to within loaded sound data.\r\n    pan: 0,                 // \"pan\" settings, left-to-right, -100 to 100\r\n    playbackRate: 1,        // rate at which to play the sound (HTML5-only)\r\n    stream: true,           // allows playing before entire file has loaded (recommended)\r\n    to: null,               // position to end playback within a sound (msec), default = end\r\n    type: null,             // MIME-like hint for file pattern / canPlay() tests, eg. audio/mp3\r\n    usePolicyFile: false,   // enable crossdomain.xml request for audio on remote domains (for ID3/waveform access)\r\n    volume: 100             // self-explanatory. 0-100, the latter being the max.\r\n\r\n  };\r\n\r\n  this.flash9Options = {\r\n\r\n    /**\r\n     * flash 9-only options,\r\n     * merged into defaultOptions if flash 9 is being used\r\n     */\r\n\r\n    onfailure: null,        // callback function for when playing fails (Flash 9, MovieStar + RTMP-only)\r\n    isMovieStar: null,      // \"MovieStar\" MPEG4 audio mode. Null (default) = auto detect MP4, AAC etc. based on URL. true = force on, ignore URL\r\n    usePeakData: false,     // enable left/right channel peak (level) data\r\n    useWaveformData: false, // enable sound spectrum (raw waveform data) - NOTE: May increase CPU load.\r\n    useEQData: false,       // enable sound EQ (frequency spectrum data) - NOTE: May increase CPU load.\r\n    onbufferchange: null,   // callback for \"isBuffering\" property change\r\n    ondataerror: null       // callback for waveform/eq data access error (flash playing audio in other tabs/domains)\r\n\r\n  };\r\n\r\n  this.movieStarOptions = {\r\n\r\n    /**\r\n     * flash 9.0r115+ MPEG4 audio options,\r\n     * merged into defaultOptions if flash 9+movieStar mode is enabled\r\n     */\r\n\r\n    bufferTime: 3,          // seconds of data to buffer before playback begins (null = flash default of 0.1 seconds - if AAC playback is gappy, try increasing.)\r\n    serverURL: null,        // rtmp: FMS or FMIS server to connect to, required when requesting media via RTMP or one of its variants\r\n    onconnect: null,        // rtmp: callback for connection to flash media server\r\n    duration: null          // rtmp: song duration (msec)\r\n\r\n  };\r\n\r\n  this.audioFormats = {\r\n\r\n    /**\r\n     * determines HTML5 support + flash requirements.\r\n     * if no support (via flash and/or HTML5) for a \"required\" format, SM2 will fail to start.\r\n     * flash fallback is used for MP3 or MP4 if HTML5 can't play it (or if preferFlash = true)\r\n     */\r\n\r\n    mp3: {\r\n      type: ['audio/mpeg; codecs=\"mp3\"', 'audio/mpeg', 'audio/mp3', 'audio/MPA', 'audio/mpa-robust'],\r\n      required: true\r\n    },\r\n\r\n    mp4: {\r\n      related: ['aac', 'm4a', 'm4b'], // additional formats under the MP4 container\r\n      type: ['audio/mp4; codecs=\"mp4a.40.2\"', 'audio/aac', 'audio/x-m4a', 'audio/MP4A-LATM', 'audio/mpeg4-generic'],\r\n      required: false\r\n    },\r\n\r\n    ogg: {\r\n      type: ['audio/ogg; codecs=vorbis'],\r\n      required: false\r\n    },\r\n\r\n    opus: {\r\n      type: ['audio/ogg; codecs=opus', 'audio/opus'],\r\n      required: false\r\n    },\r\n\r\n    wav: {\r\n      type: ['audio/wav; codecs=\"1\"', 'audio/wav', 'audio/wave', 'audio/x-wav'],\r\n      required: false\r\n    },\r\n\r\n    flac: {\r\n      type: ['audio/flac'],\r\n      required: false\r\n    }\r\n\r\n  };\r\n\r\n  // HTML attributes (id + class names) for the SWF container\r\n\r\n  this.movieID = 'sm2-container';\r\n  this.id = (smID || 'sm2movie');\r\n\r\n  this.debugID = 'soundmanager-debug';\r\n  this.debugURLParam = /([#?&])debug=1/i;\r\n\r\n  // dynamic attributes\r\n\r\n  this.versionNumber = 'V2.97a.20170601';\r\n  this.version = null;\r\n  this.movieURL = null;\r\n  this.altURL = null;\r\n  this.swfLoaded = false;\r\n  this.enabled = false;\r\n  this.oMC = null;\r\n  this.sounds = {};\r\n  this.soundIDs = [];\r\n  this.muted = false;\r\n  this.didFlashBlock = false;\r\n  this.filePattern = null;\r\n\r\n  this.filePatterns = {\r\n    flash8: /\\.mp3(\\?.*)?$/i,\r\n    flash9: /\\.mp3(\\?.*)?$/i\r\n  };\r\n\r\n  // support indicators, set at init\r\n\r\n  this.features = {\r\n    buffering: false,\r\n    peakData: false,\r\n    waveformData: false,\r\n    eqData: false,\r\n    movieStar: false\r\n  };\r\n\r\n  // flash sandbox info, used primarily in troubleshooting\r\n\r\n  this.sandbox = {\r\n    // <d>\r\n    type: null,\r\n    types: {\r\n      remote: 'remote (domain-based) rules',\r\n      localWithFile: 'local with file access (no internet access)',\r\n      localWithNetwork: 'local with network (internet access only, no local access)',\r\n      localTrusted: 'local, trusted (local+internet access)'\r\n    },\r\n    description: null,\r\n    noRemote: null,\r\n    noLocal: null\r\n    // </d>\r\n  };\r\n\r\n  /**\r\n   * format support (html5/flash)\r\n   * stores canPlayType() results based on audioFormats.\r\n   * eg. { mp3: boolean, mp4: boolean }\r\n   * treat as read-only.\r\n   */\r\n\r\n  this.html5 = {\r\n    usingFlash: null // set if/when flash fallback is needed\r\n  };\r\n\r\n  // file type support hash\r\n  this.flash = {};\r\n\r\n  // determined at init time\r\n  this.html5Only = false;\r\n\r\n  // used for special cases (eg. iPad/iPhone/palm OS?)\r\n  this.ignoreFlash = false;\r\n\r\n  /**\r\n   * a few private internals (OK, a lot. :D)\r\n   */\r\n\r\n  var SMSound,\r\n  sm2 = this, globalHTML5Audio = null, flash = null, sm = 'soundManager', smc = sm + ': ', h5 = 'HTML5::', id, ua = navigator.userAgent, wl = window.location.href.toString(), doc = document, doNothing, setProperties, init, fV, on_queue = [], debugOpen = true, debugTS, didAppend = false, appendSuccess = false, didInit = false, disabled = false, windowLoaded = false, _wDS, wdCount = 0, initComplete, mixin, assign, extraOptions, addOnEvent, processOnEvents, initUserOnload, delayWaitForEI, waitForEI, rebootIntoHTML5, setVersionInfo, handleFocus, strings, initMovie, domContentLoaded, winOnLoad, didDCLoaded, getDocument, createMovie, catchError, setPolling, initDebug, debugLevels = ['log', 'info', 'warn', 'error'], defaultFlashVersion = 8, disableObject, failSafely, normalizeMovieURL, oRemoved = null, oRemovedHTML = null, str, flashBlockHandler, getSWFCSS, swfCSS, toggleDebug, loopFix, policyFix, complain, idCheck, waitingForEI = false, initPending = false, startTimer, stopTimer, timerExecute, h5TimerCount = 0, h5IntervalTimer = null, parseURL, messages = [],\r\n  canIgnoreFlash, needsFlash = null, featureCheck, html5OK, html5CanPlay, html5ErrorCodes, html5Ext, html5Unload, domContentLoadedIE, testHTML5, event, slice = Array.prototype.slice, useGlobalHTML5Audio = false, lastGlobalHTML5URL, hasFlash, detectFlash, badSafariFix, html5_events, showSupport, flushMessages, wrapCallback, idCounter = 0, didSetup, msecScale = 1000,\r\n  is_iDevice = ua.match(/(ipad|iphone|ipod)/i), isAndroid = ua.match(/android/i), isIE = ua.match(/msie|trident/i),\r\n  isWebkit = ua.match(/webkit/i),\r\n  isSafari = (ua.match(/safari/i) && !ua.match(/chrome/i)),\r\n  isOpera = (ua.match(/opera/i)),\r\n  mobileHTML5 = (ua.match(/(mobile|pre\\/|xoom)/i) || is_iDevice || isAndroid),\r\n  isBadSafari = (!wl.match(/usehtml5audio/i) && !wl.match(/sm2-ignorebadua/i) && isSafari && !ua.match(/silk/i) && ua.match(/OS\\sX\\s10_6_([3-7])/i)), // Safari 4 and 5 (excluding Kindle Fire, \"Silk\") occasionally fail to load/play HTML5 audio on Snow Leopard 10.6.3 through 10.6.7 due to bug(s) in QuickTime X and/or other underlying frameworks. :/ Confirmed bug. https://bugs.webkit.org/show_bug.cgi?id=32159\r\n  hasConsole = (window.console !== _undefined && console.log !== _undefined),\r\n  isFocused = (doc.hasFocus !== _undefined ? doc.hasFocus() : null),\r\n  tryInitOnFocus = (isSafari && (doc.hasFocus === _undefined || !doc.hasFocus())),\r\n  okToDisable = !tryInitOnFocus,\r\n  flashMIME = /(mp3|mp4|mpa|m4a|m4b)/i,\r\n  emptyURL = 'about:blank', // safe URL to unload, or load nothing from (flash 8 + most HTML5 UAs)\r\n  emptyWAV = 'data:audio/wave;base64,/UklGRiYAAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQIAAAD//w==', // tiny WAV for HTML5 unloading\r\n  overHTTP = (doc.location ? doc.location.protocol.match(/http/i) : null),\r\n  http = (!overHTTP ? '//' : ''),\r\n  // mp3, mp4, aac etc.\r\n  netStreamMimeTypes = /^\\s*audio\\/(?:x-)?(?:mpeg4|aac|flv|mov|mp4|m4v|m4a|m4b|mp4v|3gp|3g2)\\s*(?:$|;)/i,\r\n  // Flash v9.0r115+ \"moviestar\" formats\r\n  netStreamTypes = ['mpeg4', 'aac', 'flv', 'mov', 'mp4', 'm4v', 'f4v', 'm4a', 'm4b', 'mp4v', '3gp', '3g2'],\r\n  netStreamPattern = new RegExp('\\\\.(' + netStreamTypes.join('|') + ')(\\\\?.*)?$', 'i');\r\n\r\n  this.mimePattern = /^\\s*audio\\/(?:x-)?(?:mp(?:eg|3))\\s*(?:$|;)/i; // default mp3 set\r\n\r\n  // use altURL if not \"online\"\r\n  this.useAltURL = !overHTTP;\r\n\r\n  swfCSS = {\r\n    swfBox: 'sm2-object-box',\r\n    swfDefault: 'movieContainer',\r\n    swfError: 'swf_error', // SWF loaded, but SM2 couldn't start (other error)\r\n    swfTimedout: 'swf_timedout',\r\n    swfLoaded: 'swf_loaded',\r\n    swfUnblocked: 'swf_unblocked', // or loaded OK\r\n    sm2Debug: 'sm2_debug',\r\n    highPerf: 'high_performance',\r\n    flashDebug: 'flash_debug'\r\n  };\r\n\r\n  /**\r\n   * HTML5 error codes, per W3C\r\n   * Error code 1, MEDIA_ERR_ABORTED: Client aborted download at user's request.\r\n   * Error code 2, MEDIA_ERR_NETWORK: A network error of some description caused the user agent to stop fetching the media resource, after the resource was established to be usable.\r\n   * Error code 3, MEDIA_ERR_DECODE: An error of some description occurred while decoding the media resource, after the resource was established to be usable.\r\n   * Error code 4, MEDIA_ERR_SRC_NOT_SUPPORTED: Media (audio file) not supported (\"not usable.\")\r\n   * Reference: https://html.spec.whatwg.org/multipage/embedded-content.html#error-codes\r\n   */\r\n  html5ErrorCodes = [\r\n    null,\r\n    'MEDIA_ERR_ABORTED',\r\n    'MEDIA_ERR_NETWORK',\r\n    'MEDIA_ERR_DECODE',\r\n    'MEDIA_ERR_SRC_NOT_SUPPORTED'\r\n  ];\r\n\r\n  /**\r\n   * basic HTML5 Audio() support test\r\n   * try...catch because of IE 9 \"not implemented\" nonsense\r\n   * https://github.com/Modernizr/Modernizr/issues/224\r\n   */\r\n\r\n  this.hasHTML5 = (function() {\r\n    try {\r\n      // new Audio(null) for stupid Opera 9.64 case, which throws not_enough_arguments exception otherwise.\r\n      return (Audio !== _undefined && (isOpera && opera !== _undefined && opera.version() < 10 ? new Audio(null) : new Audio()).canPlayType !== _undefined);\r\n    } catch(e) {\r\n      return false;\r\n    }\r\n  }());\r\n\r\n  /**\r\n   * Public SoundManager API\r\n   * -----------------------\r\n   */\r\n\r\n  /**\r\n   * Configures top-level soundManager properties.\r\n   *\r\n   * @param {object} options Option parameters, eg. { flashVersion: 9, url: '/path/to/swfs/' }\r\n   * onready and ontimeout are also accepted parameters. call soundManager.setup() to see the full list.\r\n   */\r\n\r\n  this.setup = function(options) {\r\n\r\n    var noURL = (!sm2.url);\r\n\r\n    // warn if flash options have already been applied\r\n\r\n    if (options !== _undefined && didInit && needsFlash && sm2.ok() && (options.flashVersion !== _undefined || options.url !== _undefined || options.html5Test !== _undefined)) {\r\n      complain(str('setupLate'));\r\n    }\r\n\r\n    // TODO: defer: true?\r\n\r\n    assign(options);\r\n\r\n    if (!useGlobalHTML5Audio) {\r\n\r\n      if (mobileHTML5) {\r\n\r\n        // force the singleton HTML5 pattern on mobile, by default.\r\n        if (!sm2.setupOptions.ignoreMobileRestrictions || sm2.setupOptions.forceUseGlobalHTML5Audio) {\r\n          messages.push(strings.globalHTML5);\r\n          useGlobalHTML5Audio = true;\r\n        }\r\n\r\n      } else if (sm2.setupOptions.forceUseGlobalHTML5Audio) {\r\n\r\n        // only apply singleton HTML5 on desktop if forced.\r\n        messages.push(strings.globalHTML5);\r\n        useGlobalHTML5Audio = true;\r\n\r\n      }\r\n\r\n    }\r\n\r\n    if (!didSetup && mobileHTML5) {\r\n\r\n      if (sm2.setupOptions.ignoreMobileRestrictions) {\r\n\r\n        messages.push(strings.ignoreMobile);\r\n\r\n      } else {\r\n\r\n        // prefer HTML5 for mobile + tablet-like devices, probably more reliable vs. flash at this point.\r\n\r\n        // <d>\r\n        if (!sm2.setupOptions.useHTML5Audio || sm2.setupOptions.preferFlash) {\r\n          // notify that defaults are being changed.\r\n          sm2._wD(strings.mobileUA);\r\n        }\r\n        // </d>\r\n\r\n        sm2.setupOptions.useHTML5Audio = true;\r\n        sm2.setupOptions.preferFlash = false;\r\n\r\n        if (is_iDevice) {\r\n\r\n          // no flash here.\r\n          sm2.ignoreFlash = true;\r\n\r\n        } else if ((isAndroid && !ua.match(/android\\s2\\.3/i)) || !isAndroid) {\r\n\r\n          /**\r\n           * Android devices tend to work better with a single audio instance, specifically for chained playback of sounds in sequence.\r\n           * Common use case: exiting sound onfinish() -> createSound() -> play()\r\n           * Presuming similar restrictions for other mobile, non-Android, non-iOS devices.\r\n           */\r\n\r\n          // <d>\r\n          sm2._wD(strings.globalHTML5);\r\n          // </d>\r\n\r\n          useGlobalHTML5Audio = true;\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    // special case 1: \"Late setup\". SM2 loaded normally, but user didn't assign flash URL eg., setup({url:...}) before SM2 init. Treat as delayed init.\r\n\r\n    if (options) {\r\n\r\n      if (noURL && didDCLoaded && options.url !== _undefined) {\r\n        sm2.beginDelayedInit();\r\n      }\r\n\r\n      // special case 2: If lazy-loading SM2 (DOMContentLoaded has already happened) and user calls setup() with url: parameter, try to init ASAP.\r\n\r\n      if (!didDCLoaded && options.url !== _undefined && doc.readyState === 'complete') {\r\n        setTimeout(domContentLoaded, 1);\r\n      }\r\n\r\n    }\r\n\r\n    didSetup = true;\r\n\r\n    return sm2;\r\n\r\n  };\r\n\r\n  this.ok = function() {\r\n\r\n    return (needsFlash ? (didInit && !disabled) : (sm2.useHTML5Audio && sm2.hasHTML5));\r\n\r\n  };\r\n\r\n  this.supported = this.ok; // legacy\r\n\r\n  this.getMovie = function(movie_id) {\r\n\r\n    // safety net: some old browsers differ on SWF references, possibly related to ExternalInterface / flash version\r\n    return id(movie_id) || doc[movie_id] || window[movie_id];\r\n\r\n  };\r\n\r\n  /**\r\n   * Creates a SMSound sound object instance. Can also be overloaded, e.g., createSound('mySound', '/some.mp3');\r\n   *\r\n   * @param {object} oOptions Sound options (at minimum, url parameter is required.)\r\n   * @return {object} SMSound The new SMSound object.\r\n   */\r\n\r\n  this.createSound = function(oOptions, _url) {\r\n\r\n    var cs, cs_string, options, oSound = null;\r\n\r\n    // <d>\r\n    cs = sm + '.createSound(): ';\r\n    cs_string = cs + str(!didInit ? 'notReady' : 'notOK');\r\n    // </d>\r\n\r\n    if (!didInit || !sm2.ok()) {\r\n      complain(cs_string);\r\n      return false;\r\n    }\r\n\r\n    if (_url !== _undefined) {\r\n      // function overloading in JS! :) ... assume simple createSound(id, url) use case.\r\n      oOptions = {\r\n        id: oOptions,\r\n        url: _url\r\n      };\r\n    }\r\n\r\n    // inherit from defaultOptions\r\n    options = mixin(oOptions);\r\n\r\n    options.url = parseURL(options.url);\r\n\r\n    // generate an id, if needed.\r\n    if (options.id === _undefined) {\r\n      options.id = sm2.setupOptions.idPrefix + (idCounter++);\r\n    }\r\n\r\n    // <d>\r\n    if (options.id.toString().charAt(0).match(/^[0-9]$/)) {\r\n      sm2._wD(cs + str('badID', options.id), 2);\r\n    }\r\n\r\n    sm2._wD(cs + options.id + (options.url ? ' (' + options.url + ')' : ''), 1);\r\n    // </d>\r\n\r\n    if (idCheck(options.id, true)) {\r\n      sm2._wD(cs + options.id + ' exists', 1);\r\n      return sm2.sounds[options.id];\r\n    }\r\n\r\n    function make() {\r\n\r\n      options = loopFix(options);\r\n      sm2.sounds[options.id] = new SMSound(options);\r\n      sm2.soundIDs.push(options.id);\r\n      return sm2.sounds[options.id];\r\n\r\n    }\r\n\r\n    if (html5OK(options)) {\r\n\r\n      oSound = make();\r\n      // <d>\r\n      if (!sm2.html5Only) {\r\n        sm2._wD(options.id + ': Using HTML5');\r\n      }\r\n      // </d>\r\n      oSound._setup_html5(options);\r\n\r\n    } else {\r\n\r\n      if (sm2.html5Only) {\r\n        sm2._wD(options.id + ': No HTML5 support for this sound, and no Flash. Exiting.');\r\n        return make();\r\n      }\r\n\r\n      // TODO: Move HTML5/flash checks into generic URL parsing/handling function.\r\n\r\n      if (sm2.html5.usingFlash && options.url && options.url.match(/data:/i)) {\r\n        // data: URIs not supported by Flash, either.\r\n        sm2._wD(options.id + ': data: URIs not supported via Flash. Exiting.');\r\n        return make();\r\n      }\r\n\r\n      if (fV > 8) {\r\n        if (options.isMovieStar === null) {\r\n          // attempt to detect MPEG-4 formats\r\n          options.isMovieStar = !!(options.serverURL || (options.type ? options.type.match(netStreamMimeTypes) : false) || (options.url && options.url.match(netStreamPattern)));\r\n        }\r\n        // <d>\r\n        if (options.isMovieStar) {\r\n          sm2._wD(cs + 'using MovieStar handling');\r\n          if (options.loops > 1) {\r\n            _wDS('noNSLoop');\r\n          }\r\n        }\r\n        // </d>\r\n      }\r\n\r\n      options = policyFix(options, cs);\r\n      oSound = make();\r\n\r\n      if (fV === 8) {\r\n        flash._createSound(options.id, options.loops || 1, options.usePolicyFile);\r\n      } else {\r\n        flash._createSound(options.id, options.url, options.usePeakData, options.useWaveformData, options.useEQData, options.isMovieStar, (options.isMovieStar ? options.bufferTime : false), options.loops || 1, options.serverURL, options.duration || null, options.autoPlay, true, options.autoLoad, options.usePolicyFile);\r\n        if (!options.serverURL) {\r\n          // We are connected immediately\r\n          oSound.connected = true;\r\n          if (options.onconnect) {\r\n            options.onconnect.apply(oSound);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!options.serverURL && (options.autoLoad || options.autoPlay)) {\r\n        // call load for non-rtmp streams\r\n        oSound.load(options);\r\n      }\r\n\r\n    }\r\n\r\n    // rtmp will play in onconnect\r\n    if (!options.serverURL && options.autoPlay) {\r\n      oSound.play();\r\n    }\r\n\r\n    return oSound;\r\n\r\n  };\r\n\r\n  /**\r\n   * Destroys a SMSound sound object instance.\r\n   *\r\n   * @param {string} sID The ID of the sound to destroy\r\n   */\r\n\r\n  this.destroySound = function(sID, _bFromSound) {\r\n\r\n    // explicitly destroy a sound before normal page unload, etc.\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    var oS = sm2.sounds[sID], i;\r\n\r\n    oS.stop();\r\n\r\n    // Disable all callbacks after stop(), when the sound is being destroyed\r\n    oS._iO = {};\r\n\r\n    oS.unload();\r\n\r\n    for (i = 0; i < sm2.soundIDs.length; i++) {\r\n      if (sm2.soundIDs[i] === sID) {\r\n        sm2.soundIDs.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!_bFromSound) {\r\n      // ignore if being called from SMSound instance\r\n      oS.destruct(true);\r\n    }\r\n\r\n    oS = null;\r\n    delete sm2.sounds[sID];\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the load() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @param {object} oOptions Optional: Sound options\r\n   */\r\n\r\n  this.load = function(sID, oOptions) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].load(oOptions);\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the unload() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   */\r\n\r\n  this.unload = function(sID) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].unload();\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the onPosition() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @param {number} nPosition The position to watch for\r\n   * @param {function} oMethod The relevant callback to fire\r\n   * @param {object} oScope Optional: The scope to apply the callback to\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.onPosition = function(sID, nPosition, oMethod, oScope) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].onposition(nPosition, oMethod, oScope);\r\n\r\n  };\r\n\r\n  // legacy/backwards-compability: lower-case method name\r\n  this.onposition = this.onPosition;\r\n\r\n  /**\r\n   * Calls the clearOnPosition() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @param {number} nPosition The position to watch for\r\n   * @param {function} oMethod Optional: The relevant callback to fire\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.clearOnPosition = function(sID, nPosition, oMethod) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].clearOnPosition(nPosition, oMethod);\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the play() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @param {object} oOptions Optional: Sound options\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.play = function(sID, oOptions) {\r\n\r\n    var result = null,\r\n        // legacy function-overloading use case: play('mySound', '/path/to/some.mp3');\r\n        overloaded = (oOptions && !(oOptions instanceof Object));\r\n\r\n    if (!didInit || !sm2.ok()) {\r\n      complain(sm + '.play(): ' + str(!didInit ? 'notReady' : 'notOK'));\r\n      return false;\r\n    }\r\n\r\n    if (!idCheck(sID, overloaded)) {\r\n\r\n      // no sound found for the given ID. Bail.\r\n      if (!overloaded) return false;\r\n\r\n      if (overloaded) {\r\n        oOptions = {\r\n          url: oOptions\r\n        };\r\n      }\r\n\r\n      if (oOptions && oOptions.url) {\r\n        // overloading use case, create+play: .play('someID', {url:'/path/to.mp3'});\r\n        sm2._wD(sm + '.play(): Attempting to create \"' + sID + '\"', 1);\r\n        oOptions.id = sID;\r\n        result = sm2.createSound(oOptions).play();\r\n      }\r\n\r\n    } else if (overloaded) {\r\n\r\n      // existing sound object case\r\n      oOptions = {\r\n        url: oOptions\r\n      };\r\n\r\n    }\r\n\r\n    if (result === null) {\r\n      // default case\r\n      result = sm2.sounds[sID].play(oOptions);\r\n    }\r\n\r\n    return result;\r\n\r\n  };\r\n\r\n  // just for convenience\r\n  this.start = this.play;\r\n\r\n  /**\r\n   * Calls the setPlaybackRate() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.setPlaybackRate = function(sID, rate, allowOverride) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].setPlaybackRate(rate, allowOverride);\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the setPosition() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @param {number} nMsecOffset Position (milliseconds)\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.setPosition = function(sID, nMsecOffset) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].setPosition(nMsecOffset);\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the stop() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.stop = function(sID) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    sm2._wD(sm + '.stop(' + sID + ')', 1);\r\n\r\n    return sm2.sounds[sID].stop();\r\n\r\n  };\r\n\r\n  /**\r\n   * Stops all currently-playing sounds.\r\n   */\r\n\r\n  this.stopAll = function() {\r\n\r\n    var oSound;\r\n    sm2._wD(sm + '.stopAll()', 1);\r\n\r\n    for (oSound in sm2.sounds) {\r\n      if (sm2.sounds.hasOwnProperty(oSound)) {\r\n        // apply only to sound objects\r\n        sm2.sounds[oSound].stop();\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the pause() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.pause = function(sID) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].pause();\r\n\r\n  };\r\n\r\n  /**\r\n   * Pauses all currently-playing sounds.\r\n   */\r\n\r\n  this.pauseAll = function() {\r\n\r\n    var i;\r\n    for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n      sm2.sounds[sm2.soundIDs[i]].pause();\r\n    }\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the resume() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.resume = function(sID) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].resume();\r\n\r\n  };\r\n\r\n  /**\r\n   * Resumes all currently-paused sounds.\r\n   */\r\n\r\n  this.resumeAll = function() {\r\n\r\n    var i;\r\n    for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n      sm2.sounds[sm2.soundIDs[i]].resume();\r\n    }\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the togglePause() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.togglePause = function(sID) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].togglePause();\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the setPan() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @param {number} nPan The pan value (-100 to 100)\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.setPan = function(sID, nPan) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].setPan(nPan);\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the setVolume() method of a SMSound object by ID\r\n   * Overloaded case: pass only volume argument eg., setVolume(50) to apply to all sounds.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @param {number} nVol The volume value (0 to 100)\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.setVolume = function(sID, nVol) {\r\n\r\n    // setVolume(50) function overloading case - apply to all sounds\r\n\r\n    var i, j;\r\n\r\n    if (sID !== _undefined && !isNaN(sID) && nVol === _undefined) {\r\n      for (i = 0, j = sm2.soundIDs.length; i < j; i++) {\r\n        sm2.sounds[sm2.soundIDs[i]].setVolume(sID);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // setVolume('mySound', 50) case\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].setVolume(nVol);\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the mute() method of either a single SMSound object by ID, or all sound objects.\r\n   *\r\n   * @param {string} sID Optional: The ID of the sound (if omitted, all sounds will be used.)\r\n   */\r\n\r\n  this.mute = function(sID) {\r\n\r\n    var i = 0;\r\n\r\n    if (sID instanceof String) {\r\n      sID = null;\r\n    }\r\n\r\n    if (!sID) {\r\n\r\n      sm2._wD(sm + '.mute(): Muting all sounds');\r\n      for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n        sm2.sounds[sm2.soundIDs[i]].mute();\r\n      }\r\n      sm2.muted = true;\r\n\r\n    } else {\r\n\r\n      if (!idCheck(sID)) return false;\r\n\r\n      sm2._wD(sm + '.mute(): Muting \"' + sID + '\"');\r\n      return sm2.sounds[sID].mute();\r\n\r\n    }\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  /**\r\n   * Mutes all sounds.\r\n   */\r\n\r\n  this.muteAll = function() {\r\n\r\n    sm2.mute();\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the unmute() method of either a single SMSound object by ID, or all sound objects.\r\n   *\r\n   * @param {string} sID Optional: The ID of the sound (if omitted, all sounds will be used.)\r\n   */\r\n\r\n  this.unmute = function(sID) {\r\n\r\n    var i;\r\n\r\n    if (sID instanceof String) {\r\n      sID = null;\r\n    }\r\n\r\n    if (!sID) {\r\n\r\n      sm2._wD(sm + '.unmute(): Unmuting all sounds');\r\n      for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n        sm2.sounds[sm2.soundIDs[i]].unmute();\r\n      }\r\n      sm2.muted = false;\r\n\r\n    } else {\r\n\r\n      if (!idCheck(sID)) return false;\r\n\r\n      sm2._wD(sm + '.unmute(): Unmuting \"' + sID + '\"');\r\n\r\n      return sm2.sounds[sID].unmute();\r\n\r\n    }\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  /**\r\n   * Unmutes all sounds.\r\n   */\r\n\r\n  this.unmuteAll = function() {\r\n\r\n    sm2.unmute();\r\n\r\n  };\r\n\r\n  /**\r\n   * Calls the toggleMute() method of a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.toggleMute = function(sID) {\r\n\r\n    if (!idCheck(sID)) return false;\r\n\r\n    return sm2.sounds[sID].toggleMute();\r\n\r\n  };\r\n\r\n  /**\r\n   * Retrieves the memory used by the flash plugin.\r\n   *\r\n   * @return {number} The amount of memory in use\r\n   */\r\n\r\n  this.getMemoryUse = function() {\r\n\r\n    // flash-only\r\n    var ram = 0;\r\n\r\n    if (flash && fV !== 8) {\r\n      ram = parseInt(flash._getMemoryUse(), 10);\r\n    }\r\n\r\n    return ram;\r\n\r\n  };\r\n\r\n  /**\r\n   * Undocumented: NOPs soundManager and all SMSound objects.\r\n   */\r\n\r\n  this.disable = function(bNoDisable) {\r\n\r\n    // destroy all functions\r\n    var i;\r\n\r\n    if (bNoDisable === _undefined) {\r\n      bNoDisable = false;\r\n    }\r\n\r\n    // already disabled?\r\n    if (disabled) return false;\r\n\r\n    disabled = true;\r\n\r\n    _wDS('shutdown', 1);\r\n\r\n    for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n      disableObject(sm2.sounds[sm2.soundIDs[i]]);\r\n    }\r\n\r\n    disableObject(sm2);\r\n\r\n    // fire \"complete\", despite fail\r\n    initComplete(bNoDisable);\r\n\r\n    event.remove(window, 'load', initUserOnload);\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  /**\r\n   * Determines playability of a MIME type, eg. 'audio/mp3'.\r\n   */\r\n\r\n  this.canPlayMIME = function(sMIME) {\r\n\r\n    var result;\r\n\r\n    if (sm2.hasHTML5) {\r\n      result = html5CanPlay({\r\n        type: sMIME\r\n      });\r\n    }\r\n\r\n    if (!result && needsFlash) {\r\n      // if flash 9, test netStream (movieStar) types as well.\r\n      result = (sMIME && sm2.ok() ? !!((fV > 8 ? sMIME.match(netStreamMimeTypes) : null) || sMIME.match(sm2.mimePattern)) : null); // TODO: make less \"weird\" (per JSLint)\r\n    }\r\n\r\n    return result;\r\n\r\n  };\r\n\r\n  /**\r\n   * Determines playability of a URL based on audio support.\r\n   *\r\n   * @param {string} sURL The URL to test\r\n   * @return {boolean} URL playability\r\n   */\r\n\r\n  this.canPlayURL = function(sURL) {\r\n\r\n    var result;\r\n\r\n    if (sm2.hasHTML5) {\r\n      result = html5CanPlay({\r\n        url: sURL\r\n      });\r\n    }\r\n\r\n    if (!result && needsFlash) {\r\n      result = (sURL && sm2.ok() ? !!(sURL.match(sm2.filePattern)) : null);\r\n    }\r\n\r\n    return result;\r\n\r\n  };\r\n\r\n  /**\r\n   * Determines playability of an HTML DOM &lt;a&gt; object (or similar object literal) based on audio support.\r\n   *\r\n   * @param {object} oLink an HTML DOM &lt;a&gt; object or object literal including href and/or type attributes\r\n   * @return {boolean} URL playability\r\n   */\r\n\r\n  this.canPlayLink = function(oLink) {\r\n\r\n    if (oLink.type !== _undefined && oLink.type && sm2.canPlayMIME(oLink.type)) return true;\r\n\r\n    return sm2.canPlayURL(oLink.href);\r\n\r\n  };\r\n\r\n  /**\r\n   * Retrieves a SMSound object by ID.\r\n   *\r\n   * @param {string} sID The ID of the sound\r\n   * @return {SMSound} The SMSound object\r\n   */\r\n\r\n  this.getSoundById = function(sID, _suppressDebug) {\r\n\r\n    if (!sID) return null;\r\n\r\n    var result = sm2.sounds[sID];\r\n\r\n    // <d>\r\n    if (!result && !_suppressDebug) {\r\n      sm2._wD(sm + '.getSoundById(): Sound \"' + sID + '\" not found.', 2);\r\n    }\r\n    // </d>\r\n\r\n    return result;\r\n\r\n  };\r\n\r\n  /**\r\n   * Queues a callback for execution when SoundManager has successfully initialized.\r\n   *\r\n   * @param {function} oMethod The callback method to fire\r\n   * @param {object} oScope Optional: The scope to apply to the callback\r\n   */\r\n\r\n  this.onready = function(oMethod, oScope) {\r\n\r\n    var sType = 'onready',\r\n        result = false;\r\n\r\n    if (typeof oMethod === 'function') {\r\n\r\n      // <d>\r\n      if (didInit) {\r\n        sm2._wD(str('queue', sType));\r\n      }\r\n      // </d>\r\n\r\n      if (!oScope) {\r\n        oScope = window;\r\n      }\r\n\r\n      addOnEvent(sType, oMethod, oScope);\r\n      processOnEvents();\r\n\r\n      result = true;\r\n\r\n    } else {\r\n\r\n      throw str('needFunction', sType);\r\n\r\n    }\r\n\r\n    return result;\r\n\r\n  };\r\n\r\n  /**\r\n   * Queues a callback for execution when SoundManager has failed to initialize.\r\n   *\r\n   * @param {function} oMethod The callback method to fire\r\n   * @param {object} oScope Optional: The scope to apply to the callback\r\n   */\r\n\r\n  this.ontimeout = function(oMethod, oScope) {\r\n\r\n    var sType = 'ontimeout',\r\n        result = false;\r\n\r\n    if (typeof oMethod === 'function') {\r\n\r\n      // <d>\r\n      if (didInit) {\r\n        sm2._wD(str('queue', sType));\r\n      }\r\n      // </d>\r\n\r\n      if (!oScope) {\r\n        oScope = window;\r\n      }\r\n\r\n      addOnEvent(sType, oMethod, oScope);\r\n      processOnEvents({ type: sType });\r\n\r\n      result = true;\r\n\r\n    } else {\r\n\r\n      throw str('needFunction', sType);\r\n\r\n    }\r\n\r\n    return result;\r\n\r\n  };\r\n\r\n  /**\r\n   * Writes console.log()-style debug output to a console or in-browser element.\r\n   * Applies when debugMode = true\r\n   *\r\n   * @param {string} sText The console message\r\n   * @param {object} nType Optional log level (number), or object. Number case: Log type/style where 0 = 'info', 1 = 'warn', 2 = 'error'. Object case: Object to be dumped.\r\n   */\r\n\r\n  this._writeDebug = function(sText, sTypeOrObject) {\r\n\r\n    // pseudo-private console.log()-style output\r\n    // <d>\r\n\r\n    var sDID = 'soundmanager-debug', o, oItem;\r\n\r\n    if (!sm2.setupOptions.debugMode) return false;\r\n\r\n    if (hasConsole && sm2.useConsole) {\r\n      if (sTypeOrObject && typeof sTypeOrObject === 'object') {\r\n        // object passed; dump to console.\r\n        console.log(sText, sTypeOrObject);\r\n      } else if (debugLevels[sTypeOrObject] !== _undefined) {\r\n        console[debugLevels[sTypeOrObject]](sText);\r\n      } else {\r\n        console.log(sText);\r\n      }\r\n      if (sm2.consoleOnly) return true;\r\n    }\r\n\r\n    o = id(sDID);\r\n\r\n    if (!o) return false;\r\n\r\n    oItem = doc.createElement('div');\r\n\r\n    if (++wdCount % 2 === 0) {\r\n      oItem.className = 'sm2-alt';\r\n    }\r\n\r\n    if (sTypeOrObject === _undefined) {\r\n      sTypeOrObject = 0;\r\n    } else {\r\n      sTypeOrObject = parseInt(sTypeOrObject, 10);\r\n    }\r\n\r\n    oItem.appendChild(doc.createTextNode(sText));\r\n\r\n    if (sTypeOrObject) {\r\n      if (sTypeOrObject >= 2) {\r\n        oItem.style.fontWeight = 'bold';\r\n      }\r\n      if (sTypeOrObject === 3) {\r\n        oItem.style.color = '#ff3333';\r\n      }\r\n    }\r\n\r\n    // top-to-bottom\r\n    // o.appendChild(oItem);\r\n\r\n    // bottom-to-top\r\n    o.insertBefore(oItem, o.firstChild);\r\n\r\n    o = null;\r\n    // </d>\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  // <d>\r\n  // last-resort debugging option\r\n  if (wl.indexOf('sm2-debug=alert') !== -1) {\r\n    this._writeDebug = function(sText) {\r\n      window.alert(sText);\r\n    };\r\n  }\r\n  // </d>\r\n\r\n  // alias\r\n  this._wD = this._writeDebug;\r\n\r\n  /**\r\n   * Provides debug / state information on all SMSound objects.\r\n   */\r\n\r\n  this._debug = function() {\r\n\r\n    // <d>\r\n    var i, j;\r\n    _wDS('currentObj', 1);\r\n\r\n    for (i = 0, j = sm2.soundIDs.length; i < j; i++) {\r\n      sm2.sounds[sm2.soundIDs[i]]._debug();\r\n    }\r\n    // </d>\r\n\r\n  };\r\n\r\n  /**\r\n   * Restarts and re-initializes the SoundManager instance.\r\n   *\r\n   * @param {boolean} resetEvents Optional: When true, removes all registered onready and ontimeout event callbacks.\r\n   * @param {boolean} excludeInit Options: When true, does not call beginDelayedInit() (which would restart SM2).\r\n   * @return {object} soundManager The soundManager instance.\r\n   */\r\n\r\n  this.reboot = function(resetEvents, excludeInit) {\r\n\r\n    // reset some (or all) state, and re-init unless otherwise specified.\r\n\r\n    // <d>\r\n    if (sm2.soundIDs.length) {\r\n      sm2._wD('Destroying ' + sm2.soundIDs.length + ' SMSound object' + (sm2.soundIDs.length !== 1 ? 's' : '') + '...');\r\n    }\r\n    // </d>\r\n\r\n    var i, j, k;\r\n\r\n    for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n      sm2.sounds[sm2.soundIDs[i]].destruct();\r\n    }\r\n\r\n    // trash ze flash (remove from the DOM)\r\n\r\n    if (flash) {\r\n\r\n      try {\r\n\r\n        if (isIE) {\r\n          oRemovedHTML = flash.innerHTML;\r\n        }\r\n\r\n        oRemoved = flash.parentNode.removeChild(flash);\r\n\r\n      } catch(e) {\r\n\r\n        // Remove failed? May be due to flash blockers silently removing the SWF object/embed node from the DOM. Warn and continue.\r\n\r\n        _wDS('badRemove', 2);\r\n\r\n      }\r\n\r\n    }\r\n\r\n    // actually, force recreate of movie.\r\n\r\n    oRemovedHTML = oRemoved = needsFlash = flash = null;\r\n\r\n    sm2.enabled = didDCLoaded = didInit = waitingForEI = initPending = didAppend = appendSuccess = disabled = useGlobalHTML5Audio = sm2.swfLoaded = false;\r\n\r\n    sm2.soundIDs = [];\r\n    sm2.sounds = {};\r\n\r\n    idCounter = 0;\r\n    didSetup = false;\r\n\r\n    if (!resetEvents) {\r\n      // reset callbacks for onready, ontimeout etc. so that they will fire again on re-init\r\n      for (i in on_queue) {\r\n        if (on_queue.hasOwnProperty(i)) {\r\n          for (j = 0, k = on_queue[i].length; j < k; j++) {\r\n            on_queue[i][j].fired = false;\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // remove all callbacks entirely\r\n      on_queue = [];\r\n    }\r\n\r\n    // <d>\r\n    if (!excludeInit) {\r\n      sm2._wD(sm + ': Rebooting...');\r\n    }\r\n    // </d>\r\n\r\n    // reset HTML5 and flash canPlay test results\r\n\r\n    sm2.html5 = {\r\n      usingFlash: null\r\n    };\r\n\r\n    sm2.flash = {};\r\n\r\n    // reset device-specific HTML/flash mode switches\r\n\r\n    sm2.html5Only = false;\r\n    sm2.ignoreFlash = false;\r\n\r\n    window.setTimeout(function() {\r\n\r\n      // by default, re-init\r\n\r\n      if (!excludeInit) {\r\n        sm2.beginDelayedInit();\r\n      }\r\n\r\n    }, 20);\r\n\r\n    return sm2;\r\n\r\n  };\r\n\r\n  this.reset = function() {\r\n\r\n    /**\r\n     * Shuts down and restores the SoundManager instance to its original loaded state, without an explicit reboot. All onready/ontimeout handlers are removed.\r\n     * After this call, SM2 may be re-initialized via soundManager.beginDelayedInit().\r\n     * @return {object} soundManager The soundManager instance.\r\n     */\r\n\r\n    _wDS('reset');\r\n\r\n    return sm2.reboot(true, true);\r\n\r\n  };\r\n\r\n  /**\r\n   * Undocumented: Determines the SM2 flash movie's load progress.\r\n   *\r\n   * @return {number or null} Percent loaded, or if invalid/unsupported, null.\r\n   */\r\n\r\n  this.getMoviePercent = function() {\r\n\r\n    /**\r\n     * Interesting syntax notes...\r\n     * Flash/ExternalInterface (ActiveX/NPAPI) bridge methods are not typeof \"function\" nor instanceof Function, but are still valid.\r\n     * Furthermore, using (flash && flash.PercentLoaded) causes IE to throw \"object doesn't support this property or method\".\r\n     * Thus, 'in' syntax must be used.\r\n     */\r\n\r\n    return (flash && 'PercentLoaded' in flash ? flash.PercentLoaded() : null);\r\n\r\n  };\r\n\r\n  /**\r\n   * Additional helper for manually invoking SM2's init process after DOM Ready / window.onload().\r\n   */\r\n\r\n  this.beginDelayedInit = function() {\r\n\r\n    windowLoaded = true;\r\n    domContentLoaded();\r\n\r\n    setTimeout(function() {\r\n\r\n      if (initPending) return false;\r\n\r\n      createMovie();\r\n      initMovie();\r\n      initPending = true;\r\n\r\n      return true;\r\n\r\n    }, 20);\r\n\r\n    delayWaitForEI();\r\n\r\n  };\r\n\r\n  /**\r\n   * Destroys the SoundManager instance and all SMSound instances.\r\n   */\r\n\r\n  this.destruct = function() {\r\n\r\n    sm2._wD(sm + '.destruct()');\r\n    sm2.disable(true);\r\n\r\n  };\r\n\r\n  /**\r\n   * SMSound() (sound object) constructor\r\n   * ------------------------------------\r\n   *\r\n   * @param {object} oOptions Sound options (id and url are required attributes)\r\n   * @return {SMSound} The new SMSound object\r\n   */\r\n\r\n  SMSound = function(oOptions) {\r\n\r\n    var s = this, resetProperties, add_html5_events, remove_html5_events, stop_html5_timer, start_html5_timer, attachOnPosition, onplay_called = false, onPositionItems = [], onPositionFired = 0, detachOnPosition, applyFromTo, lastURL = null, lastHTML5State, urlOmitted;\r\n\r\n    lastHTML5State = {\r\n      // tracks duration + position (time)\r\n      duration: null,\r\n      time: null\r\n    };\r\n\r\n    this.id = oOptions.id;\r\n\r\n    // legacy\r\n    this.sID = this.id;\r\n\r\n    this.url = oOptions.url;\r\n    this.options = mixin(oOptions);\r\n\r\n    // per-play-instance-specific options\r\n    this.instanceOptions = this.options;\r\n\r\n    // short alias\r\n    this._iO = this.instanceOptions;\r\n\r\n    // assign property defaults\r\n    this.pan = this.options.pan;\r\n    this.volume = this.options.volume;\r\n\r\n    // whether or not this object is using HTML5\r\n    this.isHTML5 = false;\r\n\r\n    // internal HTML5 Audio() object reference\r\n    this._a = null;\r\n\r\n    // for flash 8 special-case createSound() without url, followed by load/play with url case\r\n    urlOmitted = (!this.url);\r\n\r\n    /**\r\n     * SMSound() public methods\r\n     * ------------------------\r\n     */\r\n\r\n    this.id3 = {};\r\n\r\n    /**\r\n     * Writes SMSound object parameters to debug console\r\n     */\r\n\r\n    this._debug = function() {\r\n\r\n      // <d>\r\n      sm2._wD(s.id + ': Merged options:', s.options);\r\n      // </d>\r\n\r\n    };\r\n\r\n    /**\r\n     * Begins loading a sound per its *url*.\r\n     *\r\n     * @param {object} options Optional: Sound options\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.load = function(options) {\r\n\r\n      var oSound = null, instanceOptions;\r\n\r\n      if (options !== _undefined) {\r\n        s._iO = mixin(options, s.options);\r\n      } else {\r\n        options = s.options;\r\n        s._iO = options;\r\n        if (lastURL && lastURL !== s.url) {\r\n          _wDS('manURL');\r\n          s._iO.url = s.url;\r\n          s.url = null;\r\n        }\r\n      }\r\n\r\n      if (!s._iO.url) {\r\n        s._iO.url = s.url;\r\n      }\r\n\r\n      s._iO.url = parseURL(s._iO.url);\r\n\r\n      // ensure we're in sync\r\n      s.instanceOptions = s._iO;\r\n\r\n      // local shortcut\r\n      instanceOptions = s._iO;\r\n\r\n      sm2._wD(s.id + ': load (' + instanceOptions.url + ')');\r\n\r\n      if (!instanceOptions.url && !s.url) {\r\n        sm2._wD(s.id + ': load(): url is unassigned. Exiting.', 2);\r\n        return s;\r\n      }\r\n\r\n      // <d>\r\n      if (!s.isHTML5 && fV === 8 && !s.url && !instanceOptions.autoPlay) {\r\n        // flash 8 load() -> play() won't work before onload has fired.\r\n        sm2._wD(s.id + ': Flash 8 load() limitation: Wait for onload() before calling play().', 1);\r\n      }\r\n      // </d>\r\n\r\n      if (instanceOptions.url === s.url && s.readyState !== 0 && s.readyState !== 2) {\r\n        _wDS('onURL', 1);\r\n        // if loaded and an onload() exists, fire immediately.\r\n        if (s.readyState === 3 && instanceOptions.onload) {\r\n          // assume success based on truthy duration.\r\n          wrapCallback(s, function() {\r\n            instanceOptions.onload.apply(s, [(!!s.duration)]);\r\n          });\r\n        }\r\n        return s;\r\n      }\r\n\r\n      // reset a few state properties\r\n\r\n      s.loaded = false;\r\n      s.readyState = 1;\r\n      s.playState = 0;\r\n      s.id3 = {};\r\n\r\n      // TODO: If switching from HTML5 -> flash (or vice versa), stop currently-playing audio.\r\n\r\n      if (html5OK(instanceOptions)) {\r\n\r\n        oSound = s._setup_html5(instanceOptions);\r\n\r\n        if (!oSound._called_load) {\r\n\r\n          s._html5_canplay = false;\r\n\r\n          // TODO: review called_load / html5_canplay logic\r\n\r\n          // if url provided directly to load(), assign it here.\r\n\r\n          if (s.url !== instanceOptions.url) {\r\n\r\n            sm2._wD(_wDS('manURL') + ': ' + instanceOptions.url);\r\n\r\n            s._a.src = instanceOptions.url;\r\n\r\n            // TODO: review / re-apply all relevant options (volume, loop, onposition etc.)\r\n\r\n            // reset position for new URL\r\n            s.setPosition(0);\r\n\r\n          }\r\n\r\n          // given explicit load call, try to preload.\r\n\r\n          // early HTML5 implementation (non-standard)\r\n          s._a.autobuffer = 'auto';\r\n\r\n          // standard property, values: none / metadata / auto\r\n          // reference: http://msdn.microsoft.com/en-us/library/ie/ff974759%28v=vs.85%29.aspx\r\n          s._a.preload = 'auto';\r\n\r\n          s._a._called_load = true;\r\n\r\n        } else {\r\n\r\n          sm2._wD(s.id + ': Ignoring request to load again');\r\n\r\n        }\r\n\r\n      } else {\r\n\r\n        if (sm2.html5Only) {\r\n          sm2._wD(s.id + ': No flash support. Exiting.');\r\n          return s;\r\n        }\r\n\r\n        if (s._iO.url && s._iO.url.match(/data:/i)) {\r\n          // data: URIs not supported by Flash, either.\r\n          sm2._wD(s.id + ': data: URIs not supported via Flash. Exiting.');\r\n          return s;\r\n        }\r\n\r\n        try {\r\n          s.isHTML5 = false;\r\n          s._iO = policyFix(loopFix(instanceOptions));\r\n          // if we have \"position\", disable auto-play as we'll be seeking to that position at onload().\r\n          if (s._iO.autoPlay && (s._iO.position || s._iO.from)) {\r\n            sm2._wD(s.id + ': Disabling autoPlay because of non-zero offset case');\r\n            s._iO.autoPlay = false;\r\n          }\r\n          // re-assign local shortcut\r\n          instanceOptions = s._iO;\r\n          if (fV === 8) {\r\n            flash._load(s.id, instanceOptions.url, instanceOptions.stream, instanceOptions.autoPlay, instanceOptions.usePolicyFile);\r\n          } else {\r\n            flash._load(s.id, instanceOptions.url, !!(instanceOptions.stream), !!(instanceOptions.autoPlay), instanceOptions.loops || 1, !!(instanceOptions.autoLoad), instanceOptions.usePolicyFile);\r\n          }\r\n        } catch(e) {\r\n          _wDS('smError', 2);\r\n          debugTS('onload', false);\r\n          catchError({\r\n            type: 'SMSOUND_LOAD_JS_EXCEPTION',\r\n            fatal: true\r\n          });\r\n        }\r\n\r\n      }\r\n\r\n      // after all of this, ensure sound url is up to date.\r\n      s.url = instanceOptions.url;\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Unloads a sound, canceling any open HTTP requests.\r\n     *\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.unload = function() {\r\n\r\n      // Flash 8/AS2 can't \"close\" a stream - fake it by loading an empty URL\r\n      // Flash 9/AS3: Close stream, preventing further load\r\n      // HTML5: Most UAs will use empty URL\r\n\r\n      if (s.readyState !== 0) {\r\n\r\n        sm2._wD(s.id + ': unload()');\r\n\r\n        if (!s.isHTML5) {\r\n\r\n          if (fV === 8) {\r\n            flash._unload(s.id, emptyURL);\r\n          } else {\r\n            flash._unload(s.id);\r\n          }\r\n\r\n        } else {\r\n\r\n          stop_html5_timer();\r\n\r\n          if (s._a) {\r\n\r\n            s._a.pause();\r\n\r\n            // update empty URL, too\r\n            lastURL = html5Unload(s._a);\r\n\r\n          }\r\n\r\n        }\r\n\r\n        // reset load/status flags\r\n        resetProperties();\r\n\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Unloads and destroys a sound.\r\n     */\r\n\r\n    this.destruct = function(_bFromSM) {\r\n\r\n      sm2._wD(s.id + ': Destruct');\r\n\r\n      if (!s.isHTML5) {\r\n\r\n        // kill sound within Flash\r\n        // Disable the onfailure handler\r\n        s._iO.onfailure = null;\r\n        flash._destroySound(s.id);\r\n\r\n      } else {\r\n\r\n        stop_html5_timer();\r\n\r\n        if (s._a) {\r\n          s._a.pause();\r\n          html5Unload(s._a);\r\n          if (!useGlobalHTML5Audio) {\r\n            remove_html5_events();\r\n          }\r\n          // break obvious circular reference\r\n          s._a._s = null;\r\n          s._a = null;\r\n        }\r\n\r\n      }\r\n\r\n      if (!_bFromSM) {\r\n        // ensure deletion from controller\r\n        sm2.destroySound(s.id, true);\r\n      }\r\n\r\n    };\r\n\r\n    /**\r\n     * Begins playing a sound.\r\n     *\r\n     * @param {object} options Optional: Sound options\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.play = function(options, _updatePlayState) {\r\n\r\n      var fN, allowMulti, a, onready,\r\n          audioClone, onended, oncanplay,\r\n          startOK = true;\r\n\r\n      // <d>\r\n      fN = s.id + ': play(): ';\r\n      // </d>\r\n\r\n      // default to true\r\n      _updatePlayState = (_updatePlayState === _undefined ? true : _updatePlayState);\r\n\r\n      if (!options) {\r\n        options = {};\r\n      }\r\n\r\n      // first, use local URL (if specified)\r\n      if (s.url) {\r\n        s._iO.url = s.url;\r\n      }\r\n\r\n      // mix in any options defined at createSound()\r\n      s._iO = mixin(s._iO, s.options);\r\n\r\n      // mix in any options specific to this method\r\n      s._iO = mixin(options, s._iO);\r\n\r\n      s._iO.url = parseURL(s._iO.url);\r\n\r\n      s.instanceOptions = s._iO;\r\n\r\n      // RTMP-only\r\n      if (!s.isHTML5 && s._iO.serverURL && !s.connected) {\r\n        if (!s.getAutoPlay()) {\r\n          sm2._wD(fN + ' Netstream not connected yet - setting autoPlay');\r\n          s.setAutoPlay(true);\r\n        }\r\n        // play will be called in onconnect()\r\n        return s;\r\n      }\r\n\r\n      if (html5OK(s._iO)) {\r\n        s._setup_html5(s._iO);\r\n        start_html5_timer();\r\n      }\r\n\r\n      if (s.playState === 1 && !s.paused) {\r\n\r\n        allowMulti = s._iO.multiShot;\r\n\r\n        if (!allowMulti) {\r\n\r\n          sm2._wD(fN + 'Already playing (one-shot)', 1);\r\n\r\n          if (s.isHTML5) {\r\n            // go back to original position.\r\n            s.setPosition(s._iO.position);\r\n          }\r\n\r\n          return s;\r\n\r\n        }\r\n\r\n        sm2._wD(fN + 'Already playing (multi-shot)', 1);\r\n\r\n      }\r\n\r\n      // edge case: play() with explicit URL parameter\r\n      if (options.url && options.url !== s.url) {\r\n\r\n        // special case for createSound() followed by load() / play() with url; avoid double-load case.\r\n        if (!s.readyState && !s.isHTML5 && fV === 8 && urlOmitted) {\r\n\r\n          urlOmitted = false;\r\n\r\n        } else {\r\n\r\n          // load using merged options\r\n          s.load(s._iO);\r\n\r\n        }\r\n\r\n      }\r\n\r\n      if (!s.loaded) {\r\n\r\n        if (s.readyState === 0) {\r\n\r\n          sm2._wD(fN + 'Attempting to load');\r\n\r\n          // try to get this sound playing ASAP\r\n          if (!s.isHTML5 && !sm2.html5Only) {\r\n\r\n            // flash: assign directly because setAutoPlay() increments the instanceCount\r\n            s._iO.autoPlay = true;\r\n            s.load(s._iO);\r\n\r\n          } else if (s.isHTML5) {\r\n\r\n            // iOS needs this when recycling sounds, loading a new URL on an existing object.\r\n            s.load(s._iO);\r\n\r\n          } else {\r\n\r\n            sm2._wD(fN + 'Unsupported type. Exiting.');\r\n\r\n            return s;\r\n\r\n          }\r\n\r\n          // HTML5 hack - re-set instanceOptions?\r\n          s.instanceOptions = s._iO;\r\n\r\n        } else if (s.readyState === 2) {\r\n\r\n          sm2._wD(fN + 'Could not load - exiting', 2);\r\n\r\n          return s;\r\n\r\n        } else {\r\n\r\n          sm2._wD(fN + 'Loading - attempting to play...');\r\n\r\n        }\r\n\r\n      } else {\r\n\r\n        // \"play()\"\r\n        sm2._wD(fN.substr(0, fN.lastIndexOf(':')));\r\n\r\n      }\r\n\r\n      if (!s.isHTML5 && fV === 9 && s.position > 0 && s.position === s.duration) {\r\n        // flash 9 needs a position reset if play() is called while at the end of a sound.\r\n        sm2._wD(fN + 'Sound at end, resetting to position: 0');\r\n        options.position = 0;\r\n      }\r\n\r\n      /**\r\n       * Streams will pause when their buffer is full if they are being loaded.\r\n       * In this case paused is true, but the song hasn't started playing yet.\r\n       * If we just call resume() the onplay() callback will never be called.\r\n       * So only call resume() if the position is > 0.\r\n       * Another reason is because options like volume won't have been applied yet.\r\n       * For normal sounds, just resume.\r\n       */\r\n\r\n      if (s.paused && s.position >= 0 && (!s._iO.serverURL || s.position > 0)) {\r\n\r\n        // https://gist.github.com/37b17df75cc4d7a90bf6\r\n        sm2._wD(fN + 'Resuming from paused state', 1);\r\n        s.resume();\r\n\r\n      } else {\r\n\r\n        s._iO = mixin(options, s._iO);\r\n\r\n        /**\r\n         * Preload in the event of play() with position under Flash,\r\n         * or from/to parameters and non-RTMP case\r\n         */\r\n        if (((!s.isHTML5 && s._iO.position !== null && s._iO.position > 0) || (s._iO.from !== null && s._iO.from > 0) || s._iO.to !== null) && s.instanceCount === 0 && s.playState === 0 && !s._iO.serverURL) {\r\n\r\n          onready = function() {\r\n            // sound \"canplay\" or onload()\r\n            // re-apply position/from/to to instance options, and start playback\r\n            s._iO = mixin(options, s._iO);\r\n            s.play(s._iO);\r\n          };\r\n\r\n          // HTML5 needs to at least have \"canplay\" fired before seeking.\r\n          if (s.isHTML5 && !s._html5_canplay) {\r\n\r\n            // this hasn't been loaded yet. load it first, and then do this again.\r\n            sm2._wD(fN + 'Beginning load for non-zero offset case');\r\n\r\n            s.load({\r\n              // note: custom HTML5-only event added for from/to implementation.\r\n              _oncanplay: onready\r\n            });\r\n\r\n          } else if (!s.isHTML5 && !s.loaded && (!s.readyState || s.readyState !== 2)) {\r\n\r\n            // to be safe, preload the whole thing in Flash.\r\n\r\n            sm2._wD(fN + 'Preloading for non-zero offset case');\r\n\r\n            s.load({\r\n              onload: onready\r\n            });\r\n\r\n          }\r\n\r\n          // otherwise, we're ready to go. re-apply local options, and continue\r\n\r\n          s._iO = applyFromTo();\r\n\r\n        }\r\n\r\n        // sm2._wD(fN + 'Starting to play');\r\n\r\n        // increment instance counter, where enabled + supported\r\n        if (!s.instanceCount || s._iO.multiShotEvents || (s.isHTML5 && s._iO.multiShot && !useGlobalHTML5Audio) || (!s.isHTML5 && fV > 8 && !s.getAutoPlay())) {\r\n          s.instanceCount++;\r\n        }\r\n\r\n        // if first play and onposition parameters exist, apply them now\r\n        if (s._iO.onposition && s.playState === 0) {\r\n          attachOnPosition(s);\r\n        }\r\n\r\n        s.playState = 1;\r\n        s.paused = false;\r\n\r\n        s.position = (s._iO.position !== _undefined && !isNaN(s._iO.position) ? s._iO.position : 0);\r\n\r\n        if (!s.isHTML5) {\r\n          s._iO = policyFix(loopFix(s._iO));\r\n        }\r\n\r\n        if (s._iO.onplay && _updatePlayState) {\r\n          s._iO.onplay.apply(s);\r\n          onplay_called = true;\r\n        }\r\n\r\n        s.setVolume(s._iO.volume, true);\r\n        s.setPan(s._iO.pan, true);\r\n\r\n        if (s._iO.playbackRate !== 1) {\r\n          s.setPlaybackRate(s._iO.playbackRate);\r\n        }\r\n\r\n        if (!s.isHTML5) {\r\n\r\n          startOK = flash._start(s.id, s._iO.loops || 1, (fV === 9 ? s.position : s.position / msecScale), s._iO.multiShot || false);\r\n\r\n          if (fV === 9 && !startOK) {\r\n            // edge case: no sound hardware, or 32-channel flash ceiling hit.\r\n            // applies only to Flash 9, non-NetStream/MovieStar sounds.\r\n            // http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/media/Sound.html#play%28%29\r\n            sm2._wD(fN + 'No sound hardware, or 32-sound ceiling hit', 2);\r\n            if (s._iO.onplayerror) {\r\n              s._iO.onplayerror.apply(s);\r\n            }\r\n\r\n          }\r\n\r\n        } else if (s.instanceCount < 2) {\r\n\r\n            // HTML5 single-instance case\r\n\r\n            start_html5_timer();\r\n\r\n            a = s._setup_html5();\r\n\r\n            s.setPosition(s._iO.position);\r\n\r\n            a.play();\r\n\r\n          } else {\r\n\r\n            // HTML5 multi-shot case\r\n\r\n            sm2._wD(s.id + ': Cloning Audio() for instance #' + s.instanceCount + '...');\r\n\r\n            audioClone = new Audio(s._iO.url);\r\n\r\n            onended = function() {\r\n              event.remove(audioClone, 'ended', onended);\r\n              s._onfinish(s);\r\n              // cleanup\r\n              html5Unload(audioClone);\r\n              audioClone = null;\r\n            };\r\n\r\n            oncanplay = function() {\r\n              event.remove(audioClone, 'canplay', oncanplay);\r\n              try {\r\n                audioClone.currentTime = s._iO.position / msecScale;\r\n              } catch(err) {\r\n                complain(s.id + ': multiShot play() failed to apply position of ' + (s._iO.position / msecScale));\r\n              }\r\n              audioClone.play();\r\n            };\r\n\r\n            event.add(audioClone, 'ended', onended);\r\n\r\n            // apply volume to clones, too\r\n            if (s._iO.volume !== _undefined) {\r\n              audioClone.volume = Math.max(0, Math.min(1, s._iO.volume / 100));\r\n            }\r\n\r\n            // playing multiple muted sounds? if you do this, you're weird ;) - but let's cover it.\r\n            if (s.muted) {\r\n              audioClone.muted = true;\r\n            }\r\n\r\n            if (s._iO.position) {\r\n              // HTML5 audio can't seek before onplay() event has fired.\r\n              // wait for canplay, then seek to position and start playback.\r\n              event.add(audioClone, 'canplay', oncanplay);\r\n            } else {\r\n              // begin playback at currentTime: 0\r\n              audioClone.play();\r\n            }\r\n\r\n          }\r\n\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    // just for convenience\r\n    this.start = this.play;\r\n\r\n    /**\r\n     * Stops playing a sound (and optionally, all sounds)\r\n     *\r\n     * @param {boolean} bAll Optional: Whether to stop all sounds\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.stop = function(bAll) {\r\n\r\n      var instanceOptions = s._iO,\r\n          originalPosition;\r\n\r\n      if (s.playState === 1) {\r\n\r\n        sm2._wD(s.id + ': stop()');\r\n\r\n        s._onbufferchange(0);\r\n        s._resetOnPosition(0);\r\n        s.paused = false;\r\n\r\n        if (!s.isHTML5) {\r\n          s.playState = 0;\r\n        }\r\n\r\n        // remove onPosition listeners, if any\r\n        detachOnPosition();\r\n\r\n        // and \"to\" position, if set\r\n        if (instanceOptions.to) {\r\n          s.clearOnPosition(instanceOptions.to);\r\n        }\r\n\r\n        if (!s.isHTML5) {\r\n\r\n          flash._stop(s.id, bAll);\r\n\r\n          // hack for netStream: just unload\r\n          if (instanceOptions.serverURL) {\r\n            s.unload();\r\n          }\r\n\r\n        } else if (s._a) {\r\n\r\n            originalPosition = s.position;\r\n\r\n            // act like Flash, though\r\n            s.setPosition(0);\r\n\r\n            // hack: reflect old position for onstop() (also like Flash)\r\n            s.position = originalPosition;\r\n\r\n            // html5 has no stop()\r\n            // NOTE: pausing means iOS requires interaction to resume.\r\n            s._a.pause();\r\n\r\n            s.playState = 0;\r\n\r\n            // and update UI\r\n            s._onTimer();\r\n\r\n            stop_html5_timer();\r\n\r\n          }\r\n\r\n        s.instanceCount = 0;\r\n        s._iO = {};\r\n\r\n        if (instanceOptions.onstop) {\r\n          instanceOptions.onstop.apply(s);\r\n        }\r\n\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Undocumented/internal: Sets autoPlay for RTMP.\r\n     *\r\n     * @param {boolean} autoPlay state\r\n     */\r\n\r\n    this.setAutoPlay = function(autoPlay) {\r\n\r\n      sm2._wD(s.id + ': Autoplay turned ' + (autoPlay ? 'on' : 'off'));\r\n      s._iO.autoPlay = autoPlay;\r\n\r\n      if (!s.isHTML5) {\r\n        flash._setAutoPlay(s.id, autoPlay);\r\n        if (autoPlay) {\r\n          // only increment the instanceCount if the sound isn't loaded (TODO: verify RTMP)\r\n          if (!s.instanceCount && s.readyState === 1) {\r\n            s.instanceCount++;\r\n            sm2._wD(s.id + ': Incremented instance count to ' + s.instanceCount);\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    /**\r\n     * Undocumented/internal: Returns the autoPlay boolean.\r\n     *\r\n     * @return {boolean} The current autoPlay value\r\n     */\r\n\r\n    this.getAutoPlay = function() {\r\n\r\n      return s._iO.autoPlay;\r\n\r\n    };\r\n\r\n    /**\r\n     * Sets the playback rate of a sound (HTML5-only.)\r\n     *\r\n     * @param {number} playbackRate (+/-)\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.setPlaybackRate = function(playbackRate) {\r\n\r\n      // Per Mozilla, limit acceptable values to prevent playback from stopping (unless allowOverride is truthy.)\r\n      // https://developer.mozilla.org/en-US/Apps/Build/Audio_and_video_delivery/WebAudio_playbackRate_explained\r\n      var normalizedRate = Math.max(0.5, Math.min(4, playbackRate));\r\n\r\n      // <d>\r\n      if (normalizedRate !== playbackRate) {\r\n        sm2._wD(s.id + ': setPlaybackRate(' + playbackRate + '): limiting rate to ' + normalizedRate, 2);\r\n      }\r\n      // </d>\r\n\r\n      if (s.isHTML5) {\r\n        try {\r\n          s._iO.playbackRate = normalizedRate;\r\n          s._a.playbackRate = normalizedRate;\r\n        } catch(e) {\r\n          sm2._wD(s.id + ': setPlaybackRate(' + normalizedRate + ') failed: ' + e.message, 2);\r\n        }\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Sets the position of a sound.\r\n     *\r\n     * @param {number} nMsecOffset Position (milliseconds)\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.setPosition = function(nMsecOffset) {\r\n\r\n      if (nMsecOffset === _undefined) {\r\n        nMsecOffset = 0;\r\n      }\r\n\r\n      var position, position1K,\r\n          // Use the duration from the instance options, if we don't have a track duration yet.\r\n          // position >= 0 and <= current available (loaded) duration\r\n          offset = (s.isHTML5 ? Math.max(nMsecOffset, 0) : Math.min(s.duration || s._iO.duration, Math.max(nMsecOffset, 0)));\r\n\r\n      s.position = offset;\r\n      position1K = s.position / msecScale;\r\n      s._resetOnPosition(s.position);\r\n      s._iO.position = offset;\r\n\r\n      if (!s.isHTML5) {\r\n\r\n        position = (fV === 9 ? s.position : position1K);\r\n\r\n        if (s.readyState && s.readyState !== 2) {\r\n          // if paused or not playing, will not resume (by playing)\r\n          flash._setPosition(s.id, position, (s.paused || !s.playState), s._iO.multiShot);\r\n        }\r\n\r\n      } else if (s._a) {\r\n\r\n        // Set the position in the canplay handler if the sound is not ready yet\r\n        if (s._html5_canplay) {\r\n\r\n          if (s._a.currentTime.toFixed(3) !== position1K.toFixed(3)) {\r\n\r\n            /**\r\n             * DOM/JS errors/exceptions to watch out for:\r\n             * if seek is beyond (loaded?) position, \"DOM exception 11\"\r\n             * \"INDEX_SIZE_ERR\": DOM exception 1\r\n             */\r\n            sm2._wD(s.id + ': setPosition(' + position1K + ')');\r\n\r\n            try {\r\n              s._a.currentTime = position1K;\r\n              if (s.playState === 0 || s.paused) {\r\n                // allow seek without auto-play/resume\r\n                s._a.pause();\r\n              }\r\n            } catch(e) {\r\n              sm2._wD(s.id + ': setPosition(' + position1K + ') failed: ' + e.message, 2);\r\n            }\r\n\r\n          }\r\n\r\n        } else if (position1K) {\r\n\r\n          // warn on non-zero seek attempts\r\n          sm2._wD(s.id + ': setPosition(' + position1K + '): Cannot seek yet, sound not ready', 2);\r\n          return s;\r\n\r\n        }\r\n\r\n        if (s.paused) {\r\n\r\n          // if paused, refresh UI right away by forcing update\r\n          s._onTimer(true);\r\n\r\n        }\r\n\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Pauses sound playback.\r\n     *\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.pause = function(_bCallFlash) {\r\n\r\n      if (s.paused || (s.playState === 0 && s.readyState !== 1)) return s;\r\n\r\n      sm2._wD(s.id + ': pause()');\r\n      s.paused = true;\r\n\r\n      if (!s.isHTML5) {\r\n        if (_bCallFlash || _bCallFlash === _undefined) {\r\n          flash._pause(s.id, s._iO.multiShot);\r\n        }\r\n      } else {\r\n        s._setup_html5().pause();\r\n        stop_html5_timer();\r\n      }\r\n\r\n      if (s._iO.onpause) {\r\n        s._iO.onpause.apply(s);\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Resumes sound playback.\r\n     *\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    /**\r\n     * When auto-loaded streams pause on buffer full they have a playState of 0.\r\n     * We need to make sure that the playState is set to 1 when these streams \"resume\".\r\n     * When a paused stream is resumed, we need to trigger the onplay() callback if it\r\n     * hasn't been called already. In this case since the sound is being played for the\r\n     * first time, I think it's more appropriate to call onplay() rather than onresume().\r\n     */\r\n\r\n    this.resume = function() {\r\n\r\n      var instanceOptions = s._iO;\r\n\r\n      if (!s.paused) return s;\r\n\r\n      sm2._wD(s.id + ': resume()');\r\n      s.paused = false;\r\n      s.playState = 1;\r\n\r\n      if (!s.isHTML5) {\r\n\r\n        if (instanceOptions.isMovieStar && !instanceOptions.serverURL) {\r\n          // Bizarre Webkit bug (Chrome reported via 8tracks.com dudes): AAC content paused for 30+ seconds(?) will not resume without a reposition.\r\n          s.setPosition(s.position);\r\n        }\r\n\r\n        // flash method is toggle-based (pause/resume)\r\n        flash._pause(s.id, instanceOptions.multiShot);\r\n\r\n      } else {\r\n\r\n        s._setup_html5().play();\r\n        start_html5_timer();\r\n\r\n      }\r\n\r\n      if (!onplay_called && instanceOptions.onplay) {\r\n\r\n        instanceOptions.onplay.apply(s);\r\n        onplay_called = true;\r\n\r\n      } else if (instanceOptions.onresume) {\r\n\r\n        instanceOptions.onresume.apply(s);\r\n\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Toggles sound playback.\r\n     *\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.togglePause = function() {\r\n\r\n      sm2._wD(s.id + ': togglePause()');\r\n\r\n      if (s.playState === 0) {\r\n        s.play({\r\n          position: (fV === 9 && !s.isHTML5 ? s.position : s.position / msecScale)\r\n        });\r\n        return s;\r\n      }\r\n\r\n      if (s.paused) {\r\n        s.resume();\r\n      } else {\r\n        s.pause();\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Sets the panning (L-R) effect.\r\n     *\r\n     * @param {number} nPan The pan value (-100 to 100)\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.setPan = function(nPan, bInstanceOnly) {\r\n\r\n      if (nPan === _undefined) {\r\n        nPan = 0;\r\n      }\r\n\r\n      if (bInstanceOnly === _undefined) {\r\n        bInstanceOnly = false;\r\n      }\r\n\r\n      if (!s.isHTML5) {\r\n        flash._setPan(s.id, nPan);\r\n      } // else { no HTML5 pan? }\r\n\r\n      s._iO.pan = nPan;\r\n\r\n      if (!bInstanceOnly) {\r\n        s.pan = nPan;\r\n        s.options.pan = nPan;\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Sets the volume.\r\n     *\r\n     * @param {number} nVol The volume value (0 to 100)\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.setVolume = function(nVol, _bInstanceOnly) {\r\n\r\n      /**\r\n       * Note: Setting volume has no effect on iOS \"special snowflake\" devices.\r\n       * Hardware volume control overrides software, and volume\r\n       * will always return 1 per Apple docs. (iOS 4 + 5.)\r\n       * http://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/AddingSoundtoCanvasAnimations/AddingSoundtoCanvasAnimations.html\r\n       */\r\n\r\n      if (nVol === _undefined) {\r\n        nVol = 100;\r\n      }\r\n\r\n      if (_bInstanceOnly === _undefined) {\r\n        _bInstanceOnly = false;\r\n      }\r\n\r\n      if (!s.isHTML5) {\r\n\r\n        flash._setVolume(s.id, (sm2.muted && !s.muted) || s.muted ? 0 : nVol);\r\n\r\n      } else if (s._a) {\r\n\r\n        if (sm2.muted && !s.muted) {\r\n          s.muted = true;\r\n          s._a.muted = true;\r\n        }\r\n\r\n        // valid range for native HTML5 Audio(): 0-1\r\n        s._a.volume = Math.max(0, Math.min(1, nVol / 100));\r\n\r\n      }\r\n\r\n      s._iO.volume = nVol;\r\n\r\n      if (!_bInstanceOnly) {\r\n        s.volume = nVol;\r\n        s.options.volume = nVol;\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Mutes the sound.\r\n     *\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.mute = function() {\r\n\r\n      s.muted = true;\r\n\r\n      if (!s.isHTML5) {\r\n        flash._setVolume(s.id, 0);\r\n      } else if (s._a) {\r\n        s._a.muted = true;\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Unmutes the sound.\r\n     *\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.unmute = function() {\r\n\r\n      s.muted = false;\r\n      var hasIO = (s._iO.volume !== _undefined);\r\n\r\n      if (!s.isHTML5) {\r\n        flash._setVolume(s.id, hasIO ? s._iO.volume : s.options.volume);\r\n      } else if (s._a) {\r\n        s._a.muted = false;\r\n      }\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    /**\r\n     * Toggles the muted state of a sound.\r\n     *\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.toggleMute = function() {\r\n\r\n      return (s.muted ? s.unmute() : s.mute());\r\n\r\n    };\r\n\r\n    /**\r\n     * Registers a callback to be fired when a sound reaches a given position during playback.\r\n     *\r\n     * @param {number} nPosition The position to watch for\r\n     * @param {function} oMethod The relevant callback to fire\r\n     * @param {object} oScope Optional: The scope to apply the callback to\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.onPosition = function(nPosition, oMethod, oScope) {\r\n\r\n      // TODO: basic dupe checking?\r\n\r\n      onPositionItems.push({\r\n        position: parseInt(nPosition, 10),\r\n        method: oMethod,\r\n        scope: (oScope !== _undefined ? oScope : s),\r\n        fired: false\r\n      });\r\n\r\n      return s;\r\n\r\n    };\r\n\r\n    // legacy/backwards-compability: lower-case method name\r\n    this.onposition = this.onPosition;\r\n\r\n    /**\r\n     * Removes registered callback(s) from a sound, by position and/or callback.\r\n     *\r\n     * @param {number} nPosition The position to clear callback(s) for\r\n     * @param {function} oMethod Optional: Identify one callback to be removed when multiple listeners exist for one position\r\n     * @return {SMSound} The SMSound object\r\n     */\r\n\r\n    this.clearOnPosition = function(nPosition, oMethod) {\r\n\r\n      var i;\r\n\r\n      nPosition = parseInt(nPosition, 10);\r\n\r\n      if (isNaN(nPosition)) {\r\n        // safety check\r\n        return;\r\n      }\r\n\r\n      for (i = 0; i < onPositionItems.length; i++) {\r\n\r\n        if (nPosition === onPositionItems[i].position) {\r\n          // remove this item if no method was specified, or, if the method matches\r\n\r\n          if (!oMethod || (oMethod === onPositionItems[i].method)) {\r\n\r\n            if (onPositionItems[i].fired) {\r\n              // decrement \"fired\" counter, too\r\n              onPositionFired--;\r\n            }\r\n\r\n            onPositionItems.splice(i, 1);\r\n\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n    };\r\n\r\n    this._processOnPosition = function() {\r\n\r\n      var i, item, j = onPositionItems.length;\r\n\r\n      if (!j || !s.playState || onPositionFired >= j) return false;\r\n\r\n      for (i = j - 1; i >= 0; i--) {\r\n\r\n        item = onPositionItems[i];\r\n\r\n        if (!item.fired && s.position >= item.position) {\r\n\r\n          item.fired = true;\r\n          onPositionFired++;\r\n          item.method.apply(item.scope, [item.position]);\r\n\r\n          //  reset j -- onPositionItems.length can be changed in the item callback above... occasionally breaking the loop.\r\n          j = onPositionItems.length;\r\n\r\n        }\r\n\r\n      }\r\n\r\n      return true;\r\n\r\n    };\r\n\r\n    this._resetOnPosition = function(nPosition) {\r\n\r\n      // reset \"fired\" for items interested in this position\r\n      var i, item, j = onPositionItems.length;\r\n\r\n      if (!j) return false;\r\n\r\n      for (i = j - 1; i >= 0; i--) {\r\n\r\n        item = onPositionItems[i];\r\n\r\n        if (item.fired && nPosition <= item.position) {\r\n          item.fired = false;\r\n          onPositionFired--;\r\n        }\r\n\r\n      }\r\n\r\n      return true;\r\n\r\n    };\r\n\r\n    /**\r\n     * SMSound() private internals\r\n     * --------------------------------\r\n     */\r\n\r\n    applyFromTo = function() {\r\n\r\n      var instanceOptions = s._iO,\r\n          f = instanceOptions.from,\r\n          t = instanceOptions.to,\r\n          start, end;\r\n\r\n      end = function() {\r\n\r\n        // end has been reached.\r\n        sm2._wD(s.id + ': \"To\" time of ' + t + ' reached.');\r\n\r\n        // detach listener\r\n        s.clearOnPosition(t, end);\r\n\r\n        // stop should clear this, too\r\n        s.stop();\r\n\r\n      };\r\n\r\n      start = function() {\r\n\r\n        sm2._wD(s.id + ': Playing \"from\" ' + f);\r\n\r\n        // add listener for end\r\n        if (t !== null && !isNaN(t)) {\r\n          s.onPosition(t, end);\r\n        }\r\n\r\n      };\r\n\r\n      if (f !== null && !isNaN(f)) {\r\n\r\n        // apply to instance options, guaranteeing correct start position.\r\n        instanceOptions.position = f;\r\n\r\n        // multiShot timing can't be tracked, so prevent that.\r\n        instanceOptions.multiShot = false;\r\n\r\n        start();\r\n\r\n      }\r\n\r\n      // return updated instanceOptions including starting position\r\n      return instanceOptions;\r\n\r\n    };\r\n\r\n    attachOnPosition = function() {\r\n\r\n      var item,\r\n          op = s._iO.onposition;\r\n\r\n      // attach onposition things, if any, now.\r\n\r\n      if (op) {\r\n\r\n        for (item in op) {\r\n          if (op.hasOwnProperty(item)) {\r\n            s.onPosition(parseInt(item, 10), op[item]);\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n    };\r\n\r\n    detachOnPosition = function() {\r\n\r\n      var item,\r\n          op = s._iO.onposition;\r\n\r\n      // detach any onposition()-style listeners.\r\n\r\n      if (op) {\r\n\r\n        for (item in op) {\r\n          if (op.hasOwnProperty(item)) {\r\n            s.clearOnPosition(parseInt(item, 10));\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n    };\r\n\r\n    start_html5_timer = function() {\r\n\r\n      if (s.isHTML5) {\r\n        startTimer(s);\r\n      }\r\n\r\n    };\r\n\r\n    stop_html5_timer = function() {\r\n\r\n      if (s.isHTML5) {\r\n        stopTimer(s);\r\n      }\r\n\r\n    };\r\n\r\n    resetProperties = function(retainPosition) {\r\n\r\n      if (!retainPosition) {\r\n        onPositionItems = [];\r\n        onPositionFired = 0;\r\n      }\r\n\r\n      onplay_called = false;\r\n\r\n      s._hasTimer = null;\r\n      s._a = null;\r\n      s._html5_canplay = false;\r\n      s.bytesLoaded = null;\r\n      s.bytesTotal = null;\r\n      s.duration = (s._iO && s._iO.duration ? s._iO.duration : null);\r\n      s.durationEstimate = null;\r\n      s.buffered = [];\r\n\r\n      // legacy: 1D array\r\n      s.eqData = [];\r\n\r\n      s.eqData.left = [];\r\n      s.eqData.right = [];\r\n\r\n      s.failures = 0;\r\n      s.isBuffering = false;\r\n      s.instanceOptions = {};\r\n      s.instanceCount = 0;\r\n      s.loaded = false;\r\n      s.metadata = {};\r\n\r\n      // 0 = uninitialised, 1 = loading, 2 = failed/error, 3 = loaded/success\r\n      s.readyState = 0;\r\n\r\n      s.muted = false;\r\n      s.paused = false;\r\n\r\n      s.peakData = {\r\n        left: 0,\r\n        right: 0\r\n      };\r\n\r\n      s.waveformData = {\r\n        left: [],\r\n        right: []\r\n      };\r\n\r\n      s.playState = 0;\r\n      s.position = null;\r\n\r\n      s.id3 = {};\r\n\r\n    };\r\n\r\n    resetProperties();\r\n\r\n    /**\r\n     * Pseudo-private SMSound internals\r\n     * --------------------------------\r\n     */\r\n\r\n    this._onTimer = function(bForce) {\r\n\r\n      /**\r\n       * HTML5-only _whileplaying() etc.\r\n       * called from both HTML5 native events, and polling/interval-based timers\r\n       * mimics flash and fires only when time/duration change, so as to be polling-friendly\r\n       */\r\n\r\n      var duration, isNew = false, time, x = {};\r\n\r\n      if (s._hasTimer || bForce) {\r\n\r\n        // TODO: May not need to track readyState (1 = loading)\r\n\r\n        if (s._a && (bForce || ((s.playState > 0 || s.readyState === 1) && !s.paused))) {\r\n\r\n          duration = s._get_html5_duration();\r\n\r\n          if (duration !== lastHTML5State.duration) {\r\n\r\n            lastHTML5State.duration = duration;\r\n            s.duration = duration;\r\n            isNew = true;\r\n\r\n          }\r\n\r\n          // TODO: investigate why this goes wack if not set/re-set each time.\r\n          s.durationEstimate = s.duration;\r\n\r\n          time = (s._a.currentTime * msecScale || 0);\r\n\r\n          if (time !== lastHTML5State.time) {\r\n\r\n            lastHTML5State.time = time;\r\n            isNew = true;\r\n\r\n          }\r\n\r\n          if (isNew || bForce) {\r\n\r\n            s._whileplaying(time, x, x, x, x);\r\n\r\n          }\r\n\r\n        }/* else {\r\n\r\n          // sm2._wD('_onTimer: Warn for \"'+s.id+'\": '+(!s._a?'Could not find element. ':'')+(s.playState === 0?'playState bad, 0?':'playState = '+s.playState+', OK'));\r\n\r\n          return false;\r\n\r\n        }*/\r\n\r\n      }\r\n\r\n      return isNew;\r\n\r\n    };\r\n\r\n    this._get_html5_duration = function() {\r\n\r\n      var instanceOptions = s._iO,\r\n          // if audio object exists, use its duration - else, instance option duration (if provided - it's a hack, really, and should be retired) OR null\r\n          d = (s._a && s._a.duration ? s._a.duration * msecScale : (instanceOptions && instanceOptions.duration ? instanceOptions.duration : null)),\r\n          result = (d && !isNaN(d) && d !== Infinity ? d : null);\r\n\r\n      return result;\r\n\r\n    };\r\n\r\n    this._apply_loop = function(a, nLoops) {\r\n\r\n      /**\r\n       * boolean instead of \"loop\", for webkit? - spec says string. http://www.w3.org/TR/html-markup/audio.html#audio.attrs.loop\r\n       * note that loop is either off or infinite under HTML5, unlike Flash which allows arbitrary loop counts to be specified.\r\n       */\r\n\r\n      // <d>\r\n      if (!a.loop && nLoops > 1) {\r\n        sm2._wD('Note: Native HTML5 looping is infinite.', 1);\r\n      }\r\n      // </d>\r\n\r\n      a.loop = (nLoops > 1 ? 'loop' : '');\r\n\r\n    };\r\n\r\n    this._setup_html5 = function(options) {\r\n\r\n      var instanceOptions = mixin(s._iO, options),\r\n          a = useGlobalHTML5Audio ? globalHTML5Audio : s._a,\r\n          dURL = decodeURI(instanceOptions.url),\r\n          sameURL;\r\n\r\n      /**\r\n       * \"First things first, I, Poppa...\" (reset the previous state of the old sound, if playing)\r\n       * Fixes case with devices that can only play one sound at a time\r\n       * Otherwise, other sounds in mid-play will be terminated without warning and in a stuck state\r\n       */\r\n\r\n      if (useGlobalHTML5Audio) {\r\n\r\n        if (dURL === decodeURI(lastGlobalHTML5URL)) {\r\n          // global HTML5 audio: re-use of URL\r\n          sameURL = true;\r\n        }\r\n\r\n      } else if (dURL === decodeURI(lastURL)) {\r\n\r\n        // options URL is the same as the \"last\" URL, and we used (loaded) it\r\n        sameURL = true;\r\n\r\n      }\r\n\r\n      if (a) {\r\n\r\n        if (a._s) {\r\n\r\n          if (useGlobalHTML5Audio) {\r\n\r\n            if (a._s && a._s.playState && !sameURL) {\r\n\r\n              // global HTML5 audio case, and loading a new URL. stop the currently-playing one.\r\n              a._s.stop();\r\n\r\n            }\r\n\r\n          } else if (!useGlobalHTML5Audio && dURL === decodeURI(lastURL)) {\r\n\r\n            // non-global HTML5 reuse case: same url, ignore request\r\n            s._apply_loop(a, instanceOptions.loops);\r\n\r\n            return a;\r\n\r\n          }\r\n\r\n        }\r\n\r\n        if (!sameURL) {\r\n\r\n          // don't retain onPosition() stuff with new URLs.\r\n\r\n          if (lastURL) {\r\n            resetProperties(false);\r\n          }\r\n\r\n          // assign new HTML5 URL\r\n\r\n          a.src = instanceOptions.url;\r\n\r\n          s.url = instanceOptions.url;\r\n\r\n          lastURL = instanceOptions.url;\r\n\r\n          lastGlobalHTML5URL = instanceOptions.url;\r\n\r\n          a._called_load = false;\r\n\r\n        }\r\n\r\n      } else {\r\n\r\n        if (instanceOptions.autoLoad || instanceOptions.autoPlay) {\r\n\r\n          s._a = new Audio(instanceOptions.url);\r\n          s._a.load();\r\n\r\n        } else {\r\n\r\n          // null for stupid Opera 9.64 case\r\n          s._a = (isOpera && opera.version() < 10 ? new Audio(null) : new Audio());\r\n\r\n        }\r\n\r\n        // assign local reference\r\n        a = s._a;\r\n\r\n        a._called_load = false;\r\n\r\n        if (useGlobalHTML5Audio) {\r\n\r\n          globalHTML5Audio = a;\r\n\r\n        }\r\n\r\n      }\r\n\r\n      s.isHTML5 = true;\r\n\r\n      // store a ref on the track\r\n      s._a = a;\r\n\r\n      // store a ref on the audio\r\n      a._s = s;\r\n\r\n      add_html5_events();\r\n\r\n      s._apply_loop(a, instanceOptions.loops);\r\n\r\n      if (instanceOptions.autoLoad || instanceOptions.autoPlay) {\r\n\r\n        s.load();\r\n\r\n      } else {\r\n\r\n        // early HTML5 implementation (non-standard)\r\n        a.autobuffer = false;\r\n\r\n        // standard ('none' is also an option.)\r\n        a.preload = 'auto';\r\n\r\n      }\r\n\r\n      return a;\r\n\r\n    };\r\n\r\n    add_html5_events = function() {\r\n\r\n      if (s._a._added_events) return false;\r\n\r\n      var f;\r\n\r\n      function add(oEvt, oFn, bCapture) {\r\n        return s._a ? s._a.addEventListener(oEvt, oFn, bCapture || false) : null;\r\n      }\r\n\r\n      s._a._added_events = true;\r\n\r\n      for (f in html5_events) {\r\n        if (html5_events.hasOwnProperty(f)) {\r\n          add(f, html5_events[f]);\r\n        }\r\n      }\r\n\r\n      return true;\r\n\r\n    };\r\n\r\n    remove_html5_events = function() {\r\n\r\n      // Remove event listeners\r\n\r\n      var f;\r\n\r\n      function remove(oEvt, oFn, bCapture) {\r\n        return (s._a ? s._a.removeEventListener(oEvt, oFn, bCapture || false) : null);\r\n      }\r\n\r\n      sm2._wD(s.id + ': Removing event listeners');\r\n      s._a._added_events = false;\r\n\r\n      for (f in html5_events) {\r\n        if (html5_events.hasOwnProperty(f)) {\r\n          remove(f, html5_events[f]);\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    /**\r\n     * Pseudo-private event internals\r\n     * ------------------------------\r\n     */\r\n\r\n    this._onload = function(nSuccess) {\r\n\r\n      var fN,\r\n          // check for duration to prevent false positives from flash 8 when loading from cache.\r\n          loadOK = !!nSuccess || (!s.isHTML5 && fV === 8 && s.duration);\r\n\r\n      // <d>\r\n      fN = s.id + ': ';\r\n      sm2._wD(fN + (loadOK ? 'onload()' : 'Failed to load / invalid sound?' + (!s.duration ? ' Zero-length duration reported.' : ' -') + ' (' + s.url + ')'), (loadOK ? 1 : 2));\r\n\r\n      if (!loadOK && !s.isHTML5) {\r\n        if (sm2.sandbox.noRemote === true) {\r\n          sm2._wD(fN + str('noNet'), 1);\r\n        }\r\n        if (sm2.sandbox.noLocal === true) {\r\n          sm2._wD(fN + str('noLocal'), 1);\r\n        }\r\n      }\r\n      // </d>\r\n\r\n      s.loaded = loadOK;\r\n      s.readyState = (loadOK ? 3 : 2);\r\n      s._onbufferchange(0);\r\n\r\n      if (!loadOK && !s.isHTML5) {\r\n        // note: no error code from Flash.\r\n        s._onerror();\r\n      }\r\n\r\n      if (s._iO.onload) {\r\n        wrapCallback(s, function() {\r\n          s._iO.onload.apply(s, [loadOK]);\r\n        });\r\n      }\r\n\r\n      return true;\r\n\r\n    };\r\n\r\n    this._onerror = function(errorCode, description) {\r\n\r\n      // https://html.spec.whatwg.org/multipage/embedded-content.html#error-codes\r\n      if (s._iO.onerror) {\r\n        wrapCallback(s, function() {\r\n          s._iO.onerror.apply(s, [errorCode, description]);\r\n        });\r\n      }\r\n\r\n    };\r\n\r\n    this._onbufferchange = function(nIsBuffering) {\r\n\r\n      // ignore if not playing\r\n      if (s.playState === 0) return false;\r\n\r\n      if ((nIsBuffering && s.isBuffering) || (!nIsBuffering && !s.isBuffering)) return false;\r\n\r\n      s.isBuffering = (nIsBuffering === 1);\r\n\r\n      if (s._iO.onbufferchange) {\r\n        sm2._wD(s.id + ': Buffer state change: ' + nIsBuffering);\r\n        s._iO.onbufferchange.apply(s, [nIsBuffering]);\r\n      }\r\n\r\n      return true;\r\n\r\n    };\r\n\r\n    /**\r\n     * Playback may have stopped due to buffering, or related reason.\r\n     * This state can be encountered on iOS < 6 when auto-play is blocked.\r\n     */\r\n\r\n    this._onsuspend = function() {\r\n\r\n      if (s._iO.onsuspend) {\r\n        sm2._wD(s.id + ': Playback suspended');\r\n        s._iO.onsuspend.apply(s);\r\n      }\r\n\r\n      return true;\r\n\r\n    };\r\n\r\n    /**\r\n     * flash 9/movieStar + RTMP-only method, should fire only once at most\r\n     * at this point we just recreate failed sounds rather than trying to reconnect\r\n     */\r\n\r\n    this._onfailure = function(msg, level, code) {\r\n\r\n      s.failures++;\r\n      sm2._wD(s.id + ': Failure (' + s.failures + '): ' + msg);\r\n\r\n      if (s._iO.onfailure && s.failures === 1) {\r\n        s._iO.onfailure(msg, level, code);\r\n      } else {\r\n        sm2._wD(s.id + ': Ignoring failure');\r\n      }\r\n\r\n    };\r\n\r\n    /**\r\n     * flash 9/movieStar + RTMP-only method for unhandled warnings/exceptions from Flash\r\n     * e.g., RTMP \"method missing\" warning (non-fatal) for getStreamLength on server\r\n     */\r\n\r\n    this._onwarning = function(msg, level, code) {\r\n\r\n      if (s._iO.onwarning) {\r\n        s._iO.onwarning(msg, level, code);\r\n      }\r\n\r\n    };\r\n\r\n    this._onfinish = function() {\r\n\r\n      // store local copy before it gets trashed...\r\n      var io_onfinish = s._iO.onfinish;\r\n\r\n      s._onbufferchange(0);\r\n      s._resetOnPosition(0);\r\n\r\n      // reset some state items\r\n      if (s.instanceCount) {\r\n\r\n        s.instanceCount--;\r\n\r\n        if (!s.instanceCount) {\r\n\r\n          // remove onPosition listeners, if any\r\n          detachOnPosition();\r\n\r\n          // reset instance options\r\n          s.playState = 0;\r\n          s.paused = false;\r\n          s.instanceCount = 0;\r\n          s.instanceOptions = {};\r\n          s._iO = {};\r\n          stop_html5_timer();\r\n\r\n          // reset position, too\r\n          if (s.isHTML5) {\r\n            s.position = 0;\r\n          }\r\n\r\n        }\r\n\r\n        if (!s.instanceCount || s._iO.multiShotEvents) {\r\n          // fire onfinish for last, or every instance\r\n          if (io_onfinish) {\r\n            sm2._wD(s.id + ': onfinish()');\r\n            wrapCallback(s, function() {\r\n              io_onfinish.apply(s);\r\n            });\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n    };\r\n\r\n    this._whileloading = function(nBytesLoaded, nBytesTotal, nDuration, nBufferLength) {\r\n\r\n      var instanceOptions = s._iO;\r\n\r\n      s.bytesLoaded = nBytesLoaded;\r\n      s.bytesTotal = nBytesTotal;\r\n      s.duration = Math.floor(nDuration);\r\n      s.bufferLength = nBufferLength;\r\n\r\n      if (!s.isHTML5 && !instanceOptions.isMovieStar) {\r\n\r\n        if (instanceOptions.duration) {\r\n          // use duration from options, if specified and larger. nobody should be specifying duration in options, actually, and it should be retired.\r\n          s.durationEstimate = (s.duration > instanceOptions.duration) ? s.duration : instanceOptions.duration;\r\n        } else {\r\n          s.durationEstimate = parseInt((s.bytesTotal / s.bytesLoaded) * s.duration, 10);\r\n        }\r\n\r\n      } else {\r\n\r\n        s.durationEstimate = s.duration;\r\n\r\n      }\r\n\r\n      // for flash, reflect sequential-load-style buffering\r\n      if (!s.isHTML5) {\r\n        s.buffered = [{\r\n          start: 0,\r\n          end: s.duration\r\n        }];\r\n      }\r\n\r\n      // allow whileloading to fire even if \"load\" fired under HTML5, due to HTTP range/partials\r\n      if ((s.readyState !== 3 || s.isHTML5) && instanceOptions.whileloading) {\r\n        instanceOptions.whileloading.apply(s);\r\n      }\r\n\r\n    };\r\n\r\n    this._whileplaying = function(nPosition, oPeakData, oWaveformDataLeft, oWaveformDataRight, oEQData) {\r\n\r\n      var instanceOptions = s._iO,\r\n          eqLeft;\r\n\r\n      // flash safety net\r\n      if (isNaN(nPosition) || nPosition === null) return false;\r\n\r\n      // Safari HTML5 play() may return small -ve values when starting from position: 0, eg. -50.120396875. Unexpected/invalid per W3, I think. Normalize to 0.\r\n      s.position = Math.max(0, nPosition);\r\n\r\n      s._processOnPosition();\r\n\r\n      if (!s.isHTML5 && fV > 8) {\r\n\r\n        if (instanceOptions.usePeakData && oPeakData !== _undefined && oPeakData) {\r\n          s.peakData = {\r\n            left: oPeakData.leftPeak,\r\n            right: oPeakData.rightPeak\r\n          };\r\n        }\r\n\r\n        if (instanceOptions.useWaveformData && oWaveformDataLeft !== _undefined && oWaveformDataLeft) {\r\n          s.waveformData = {\r\n            left: oWaveformDataLeft.split(','),\r\n            right: oWaveformDataRight.split(',')\r\n          };\r\n        }\r\n\r\n        if (instanceOptions.useEQData) {\r\n          if (oEQData !== _undefined && oEQData && oEQData.leftEQ) {\r\n            eqLeft = oEQData.leftEQ.split(',');\r\n            s.eqData = eqLeft;\r\n            s.eqData.left = eqLeft;\r\n            if (oEQData.rightEQ !== _undefined && oEQData.rightEQ) {\r\n              s.eqData.right = oEQData.rightEQ.split(',');\r\n            }\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n      if (s.playState === 1) {\r\n\r\n        // special case/hack: ensure buffering is false if loading from cache (and not yet started)\r\n        if (!s.isHTML5 && fV === 8 && !s.position && s.isBuffering) {\r\n          s._onbufferchange(0);\r\n        }\r\n\r\n        if (instanceOptions.whileplaying) {\r\n          // flash may call after actual finish\r\n          instanceOptions.whileplaying.apply(s);\r\n        }\r\n\r\n      }\r\n\r\n      return true;\r\n\r\n    };\r\n\r\n    this._oncaptiondata = function(oData) {\r\n\r\n      /**\r\n       * internal: flash 9 + NetStream (MovieStar/RTMP-only) feature\r\n       *\r\n       * @param {object} oData\r\n       */\r\n\r\n      sm2._wD(s.id + ': Caption data received.');\r\n\r\n      s.captiondata = oData;\r\n\r\n      if (s._iO.oncaptiondata) {\r\n        s._iO.oncaptiondata.apply(s, [oData]);\r\n      }\r\n\r\n    };\r\n\r\n    this._onmetadata = function(oMDProps, oMDData) {\r\n\r\n      /**\r\n       * internal: flash 9 + NetStream (MovieStar/RTMP-only) feature\r\n       * RTMP may include song title, MovieStar content may include encoding info\r\n       *\r\n       * @param {array} oMDProps (names)\r\n       * @param {array} oMDData (values)\r\n       */\r\n\r\n      sm2._wD(s.id + ': Metadata received.');\r\n\r\n      var oData = {}, i, j;\r\n\r\n      for (i = 0, j = oMDProps.length; i < j; i++) {\r\n        oData[oMDProps[i]] = oMDData[i];\r\n      }\r\n\r\n      s.metadata = oData;\r\n\r\n      if (s._iO.onmetadata) {\r\n        s._iO.onmetadata.call(s, s.metadata);\r\n      }\r\n\r\n    };\r\n\r\n    this._onid3 = function(oID3Props, oID3Data) {\r\n\r\n      /**\r\n       * internal: flash 8 + flash 9 ID3 feature\r\n       * may include artist, song title etc.\r\n       *\r\n       * @param {array} oID3Props (names)\r\n       * @param {array} oID3Data (values)\r\n       */\r\n\r\n      sm2._wD(s.id + ': ID3 data received.');\r\n\r\n      var oData = [], i, j;\r\n\r\n      for (i = 0, j = oID3Props.length; i < j; i++) {\r\n        oData[oID3Props[i]] = oID3Data[i];\r\n      }\r\n\r\n      s.id3 = mixin(s.id3, oData);\r\n\r\n      if (s._iO.onid3) {\r\n        s._iO.onid3.apply(s);\r\n      }\r\n\r\n    };\r\n\r\n    // flash/RTMP-only\r\n\r\n    this._onconnect = function(bSuccess) {\r\n\r\n      bSuccess = (bSuccess === 1);\r\n      sm2._wD(s.id + ': ' + (bSuccess ? 'Connected.' : 'Failed to connect? - ' + s.url), (bSuccess ? 1 : 2));\r\n      s.connected = bSuccess;\r\n\r\n      if (bSuccess) {\r\n\r\n        s.failures = 0;\r\n\r\n        if (idCheck(s.id)) {\r\n          if (s.getAutoPlay()) {\r\n            // only update the play state if auto playing\r\n            s.play(_undefined, s.getAutoPlay());\r\n          } else if (s._iO.autoLoad) {\r\n            s.load();\r\n          }\r\n        }\r\n\r\n        if (s._iO.onconnect) {\r\n          s._iO.onconnect.apply(s, [bSuccess]);\r\n        }\r\n\r\n      }\r\n\r\n    };\r\n\r\n    this._ondataerror = function(sError) {\r\n\r\n      // flash 9 wave/eq data handler\r\n      // hack: called at start, and end from flash at/after onfinish()\r\n      if (s.playState > 0) {\r\n        sm2._wD(s.id + ': Data error: ' + sError);\r\n        if (s._iO.ondataerror) {\r\n          s._iO.ondataerror.apply(s);\r\n        }\r\n      }\r\n\r\n    };\r\n\r\n    // <d>\r\n    this._debug();\r\n    // </d>\r\n\r\n  }; // SMSound()\r\n\r\n  /**\r\n   * Private SoundManager internals\r\n   * ------------------------------\r\n   */\r\n\r\n  getDocument = function() {\r\n\r\n    return (doc.body || doc.getElementsByTagName('div')[0]);\r\n\r\n  };\r\n\r\n  id = function(sID) {\r\n\r\n    return doc.getElementById(sID);\r\n\r\n  };\r\n\r\n  mixin = function(oMain, oAdd) {\r\n\r\n    // non-destructive merge\r\n    var o1 = (oMain || {}), o2, o;\r\n\r\n    // if unspecified, o2 is the default options object\r\n    o2 = (oAdd === _undefined ? sm2.defaultOptions : oAdd);\r\n\r\n    for (o in o2) {\r\n\r\n      if (o2.hasOwnProperty(o) && o1[o] === _undefined) {\r\n\r\n        if (typeof o2[o] !== 'object' || o2[o] === null) {\r\n\r\n          // assign directly\r\n          o1[o] = o2[o];\r\n\r\n        } else {\r\n\r\n          // recurse through o2\r\n          o1[o] = mixin(o1[o], o2[o]);\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    return o1;\r\n\r\n  };\r\n\r\n  wrapCallback = function(oSound, callback) {\r\n\r\n    /**\r\n     * 03/03/2013: Fix for Flash Player 11.6.602.171 + Flash 8 (flashVersion = 8) SWF issue\r\n     * setTimeout() fix for certain SMSound callbacks like onload() and onfinish(), where subsequent calls like play() and load() fail when Flash Player 11.6.602.171 is installed, and using soundManager with flashVersion = 8 (which is the default).\r\n     * Not sure of exact cause. Suspect race condition and/or invalid (NaN-style) position argument trickling down to the next JS -> Flash _start() call, in the play() case.\r\n     * Fix: setTimeout() to yield, plus safer null / NaN checking on position argument provided to Flash.\r\n     * https://getsatisfaction.com/schillmania/topics/recent_chrome_update_seems_to_have_broken_my_sm2_audio_player\r\n     */\r\n    if (!oSound.isHTML5 && fV === 8) {\r\n      window.setTimeout(callback, 0);\r\n    } else {\r\n      callback();\r\n    }\r\n\r\n  };\r\n\r\n  // additional soundManager properties that soundManager.setup() will accept\r\n\r\n  extraOptions = {\r\n    onready: 1,\r\n    ontimeout: 1,\r\n    defaultOptions: 1,\r\n    flash9Options: 1,\r\n    movieStarOptions: 1\r\n  };\r\n\r\n  assign = function(o, oParent) {\r\n\r\n    /**\r\n     * recursive assignment of properties, soundManager.setup() helper\r\n     * allows property assignment based on whitelist\r\n     */\r\n\r\n    var i,\r\n        result = true,\r\n        hasParent = (oParent !== _undefined),\r\n        setupOptions = sm2.setupOptions,\r\n        bonusOptions = extraOptions;\r\n\r\n    // <d>\r\n\r\n    // if soundManager.setup() called, show accepted parameters.\r\n\r\n    if (o === _undefined) {\r\n\r\n      result = [];\r\n\r\n      for (i in setupOptions) {\r\n\r\n        if (setupOptions.hasOwnProperty(i)) {\r\n          result.push(i);\r\n        }\r\n\r\n      }\r\n\r\n      for (i in bonusOptions) {\r\n\r\n        if (bonusOptions.hasOwnProperty(i)) {\r\n\r\n          if (typeof sm2[i] === 'object') {\r\n            result.push(i + ': {...}');\r\n          } else if (sm2[i] instanceof Function) {\r\n            result.push(i + ': function() {...}');\r\n          } else {\r\n            result.push(i);\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n      sm2._wD(str('setup', result.join(', ')));\r\n\r\n      return false;\r\n\r\n    }\r\n\r\n    // </d>\r\n\r\n    for (i in o) {\r\n\r\n      if (o.hasOwnProperty(i)) {\r\n\r\n        // if not an {object} we want to recurse through...\r\n\r\n        if (typeof o[i] !== 'object' || o[i] === null || o[i] instanceof Array || o[i] instanceof RegExp) {\r\n\r\n          // check \"allowed\" options\r\n\r\n          if (hasParent && bonusOptions[oParent] !== _undefined) {\r\n\r\n            // valid recursive / nested object option, eg., { defaultOptions: { volume: 50 } }\r\n            sm2[oParent][i] = o[i];\r\n\r\n          } else if (setupOptions[i] !== _undefined) {\r\n\r\n            // special case: assign to setupOptions object, which soundManager property references\r\n            sm2.setupOptions[i] = o[i];\r\n\r\n            // assign directly to soundManager, too\r\n            sm2[i] = o[i];\r\n\r\n          } else if (bonusOptions[i] === _undefined) {\r\n\r\n            // invalid or disallowed parameter. complain.\r\n            complain(str((sm2[i] === _undefined ? 'setupUndef' : 'setupError'), i), 2);\r\n\r\n            result = false;\r\n\r\n          } else if (sm2[i] instanceof Function) {\r\n\r\n            /**\r\n             * valid extraOptions (bonusOptions) parameter.\r\n             * is it a method, like onready/ontimeout? call it.\r\n             * multiple parameters should be in an array, eg. soundManager.setup({onready: [myHandler, myScope]});\r\n             */\r\n            sm2[i].apply(sm2, (o[i] instanceof Array ? o[i] : [o[i]]));\r\n\r\n          } else {\r\n\r\n            // good old-fashioned direct assignment\r\n            sm2[i] = o[i];\r\n\r\n          }\r\n\r\n        } else if (bonusOptions[i] === _undefined) {\r\n\r\n          // recursion case, eg., { defaultOptions: { ... } }\r\n\r\n          // invalid or disallowed parameter. complain.\r\n          complain(str((sm2[i] === _undefined ? 'setupUndef' : 'setupError'), i), 2);\r\n\r\n          result = false;\r\n\r\n        } else {\r\n\r\n          // recurse through object\r\n          return assign(o[i], i);\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    return result;\r\n\r\n  };\r\n\r\n  function preferFlashCheck(kind) {\r\n\r\n    // whether flash should play a given type\r\n    return (sm2.preferFlash && hasFlash && !sm2.ignoreFlash && (sm2.flash[kind] !== _undefined && sm2.flash[kind]));\r\n\r\n  }\r\n\r\n  /**\r\n   * Internal DOM2-level event helpers\r\n   * ---------------------------------\r\n   */\r\n\r\n  event = (function() {\r\n\r\n    // normalize event methods\r\n    var old = (window.attachEvent),\r\n    evt = {\r\n      add: (old ? 'attachEvent' : 'addEventListener'),\r\n      remove: (old ? 'detachEvent' : 'removeEventListener')\r\n    };\r\n\r\n    // normalize \"on\" event prefix, optional capture argument\r\n    function getArgs(oArgs) {\r\n\r\n      var args = slice.call(oArgs),\r\n          len = args.length;\r\n\r\n      if (old) {\r\n        // prefix\r\n        args[1] = 'on' + args[1];\r\n        if (len > 3) {\r\n          // no capture\r\n          args.pop();\r\n        }\r\n      } else if (len === 3) {\r\n        args.push(false);\r\n      }\r\n\r\n      return args;\r\n\r\n    }\r\n\r\n    function apply(args, sType) {\r\n\r\n      // normalize and call the event method, with the proper arguments\r\n      var element = args.shift(),\r\n          method = [evt[sType]];\r\n\r\n      if (old) {\r\n        // old IE can't do apply().\r\n        element[method](args[0], args[1]);\r\n      } else {\r\n        element[method].apply(element, args);\r\n      }\r\n\r\n    }\r\n\r\n    function add() {\r\n      apply(getArgs(arguments), 'add');\r\n    }\r\n\r\n    function remove() {\r\n      apply(getArgs(arguments), 'remove');\r\n    }\r\n\r\n    return {\r\n      add: add,\r\n      remove: remove\r\n    };\r\n\r\n  }());\r\n\r\n  /**\r\n   * Internal HTML5 event handling\r\n   * -----------------------------\r\n   */\r\n\r\n  function html5_event(oFn) {\r\n\r\n    // wrap html5 event handlers so we don't call them on destroyed and/or unloaded sounds\r\n\r\n    return function(e) {\r\n\r\n      var s = this._s,\r\n          result;\r\n\r\n      if (!s || !s._a) {\r\n        // <d>\r\n        if (s && s.id) {\r\n          sm2._wD(s.id + ': Ignoring ' + e.type);\r\n        } else {\r\n          sm2._wD(h5 + 'Ignoring ' + e.type);\r\n        }\r\n        // </d>\r\n        result = null;\r\n      } else {\r\n        result = oFn.call(this, e);\r\n      }\r\n\r\n      return result;\r\n\r\n    };\r\n\r\n  }\r\n\r\n  html5_events = {\r\n\r\n    // HTML5 event-name-to-handler map\r\n\r\n    abort: html5_event(function() {\r\n\r\n      sm2._wD(this._s.id + ': abort');\r\n\r\n    }),\r\n\r\n    // enough has loaded to play\r\n\r\n    canplay: html5_event(function() {\r\n\r\n      var s = this._s,\r\n          position1K;\r\n\r\n      if (s._html5_canplay) {\r\n        // this event has already fired. ignore.\r\n        return;\r\n      }\r\n\r\n      s._html5_canplay = true;\r\n      sm2._wD(s.id + ': canplay');\r\n      s._onbufferchange(0);\r\n\r\n      // position according to instance options\r\n      position1K = (s._iO.position !== _undefined && !isNaN(s._iO.position) ? s._iO.position / msecScale : null);\r\n\r\n      // set the position if position was provided before the sound loaded\r\n      if (this.currentTime !== position1K) {\r\n        sm2._wD(s.id + ': canplay: Setting position to ' + position1K);\r\n        try {\r\n          this.currentTime = position1K;\r\n        } catch(ee) {\r\n          sm2._wD(s.id + ': canplay: Setting position of ' + position1K + ' failed: ' + ee.message, 2);\r\n        }\r\n      }\r\n\r\n      // hack for HTML5 from/to case\r\n      if (s._iO._oncanplay) {\r\n        s._iO._oncanplay();\r\n      }\r\n\r\n    }),\r\n\r\n    canplaythrough: html5_event(function() {\r\n\r\n      var s = this._s;\r\n\r\n      if (!s.loaded) {\r\n        s._onbufferchange(0);\r\n        s._whileloading(s.bytesLoaded, s.bytesTotal, s._get_html5_duration());\r\n        s._onload(true);\r\n      }\r\n\r\n    }),\r\n\r\n    durationchange: html5_event(function() {\r\n\r\n      // durationchange may fire at various times, probably the safest way to capture accurate/final duration.\r\n\r\n      var s = this._s,\r\n          duration;\r\n\r\n      duration = s._get_html5_duration();\r\n\r\n      if (!isNaN(duration) && duration !== s.duration) {\r\n\r\n        sm2._wD(this._s.id + ': durationchange (' + duration + ')' + (s.duration ? ', previously ' + s.duration : ''));\r\n\r\n        s.durationEstimate = s.duration = duration;\r\n\r\n      }\r\n\r\n    }),\r\n\r\n    // TODO: Reserved for potential use\r\n    /*\r\n    emptied: html5_event(function() {\r\n\r\n      sm2._wD(this._s.id + ': emptied');\r\n\r\n    }),\r\n    */\r\n\r\n    ended: html5_event(function() {\r\n\r\n      var s = this._s;\r\n\r\n      sm2._wD(s.id + ': ended');\r\n\r\n      s._onfinish();\r\n\r\n    }),\r\n\r\n    error: html5_event(function() {\r\n\r\n      var description = (html5ErrorCodes[this.error.code] || null);\r\n      sm2._wD(this._s.id + ': HTML5 error, code ' + this.error.code + (description ? ' (' + description + ')' : ''));\r\n      this._s._onload(false);\r\n      this._s._onerror(this.error.code, description);\r\n\r\n    }),\r\n\r\n    loadeddata: html5_event(function() {\r\n\r\n      var s = this._s;\r\n\r\n      sm2._wD(s.id + ': loadeddata');\r\n\r\n      // safari seems to nicely report progress events, eventually totalling 100%\r\n      if (!s._loaded && !isSafari) {\r\n        s.duration = s._get_html5_duration();\r\n      }\r\n\r\n    }),\r\n\r\n    loadedmetadata: html5_event(function() {\r\n\r\n      sm2._wD(this._s.id + ': loadedmetadata');\r\n\r\n    }),\r\n\r\n    loadstart: html5_event(function() {\r\n\r\n      sm2._wD(this._s.id + ': loadstart');\r\n      // assume buffering at first\r\n      this._s._onbufferchange(1);\r\n\r\n    }),\r\n\r\n    play: html5_event(function() {\r\n\r\n      // sm2._wD(this._s.id + ': play()');\r\n      // once play starts, no buffering\r\n      this._s._onbufferchange(0);\r\n\r\n    }),\r\n\r\n    playing: html5_event(function() {\r\n\r\n      sm2._wD(this._s.id + ': playing ' + String.fromCharCode(9835));\r\n      // once play starts, no buffering\r\n      this._s._onbufferchange(0);\r\n\r\n    }),\r\n\r\n    progress: html5_event(function(e) {\r\n\r\n      // note: can fire repeatedly after \"loaded\" event, due to use of HTTP range/partials\r\n\r\n      var s = this._s,\r\n          i, j, progStr, buffered = 0,\r\n          isProgress = (e.type === 'progress'),\r\n          ranges = e.target.buffered,\r\n          // firefox 3.6 implements e.loaded/total (bytes)\r\n          loaded = (e.loaded || 0),\r\n          total = (e.total || 1);\r\n\r\n      // reset the \"buffered\" (loaded byte ranges) array\r\n      s.buffered = [];\r\n\r\n      if (ranges && ranges.length) {\r\n\r\n        // if loaded is 0, try TimeRanges implementation as % of load\r\n        // https://developer.mozilla.org/en/DOM/TimeRanges\r\n\r\n        // re-build \"buffered\" array\r\n        // HTML5 returns seconds. SM2 API uses msec for setPosition() etc., whether Flash or HTML5.\r\n        for (i = 0, j = ranges.length; i < j; i++) {\r\n          s.buffered.push({\r\n            start: ranges.start(i) * msecScale,\r\n            end: ranges.end(i) * msecScale\r\n          });\r\n        }\r\n\r\n        // use the last value locally\r\n        buffered = (ranges.end(0) - ranges.start(0)) * msecScale;\r\n\r\n        // linear case, buffer sum; does not account for seeking and HTTP partials / byte ranges\r\n        loaded = Math.min(1, buffered / (e.target.duration * msecScale));\r\n\r\n        // <d>\r\n        if (isProgress && ranges.length > 1) {\r\n          progStr = [];\r\n          j = ranges.length;\r\n          for (i = 0; i < j; i++) {\r\n            progStr.push((e.target.buffered.start(i) * msecScale) + '-' + (e.target.buffered.end(i) * msecScale));\r\n          }\r\n          sm2._wD(this._s.id + ': progress, timeRanges: ' + progStr.join(', '));\r\n        }\r\n\r\n        if (isProgress && !isNaN(loaded)) {\r\n          sm2._wD(this._s.id + ': progress, ' + Math.floor(loaded * 100) + '% loaded');\r\n        }\r\n        // </d>\r\n\r\n      }\r\n\r\n      if (!isNaN(loaded)) {\r\n\r\n        // TODO: prevent calls with duplicate values.\r\n        s._whileloading(loaded, total, s._get_html5_duration());\r\n        if (loaded && total && loaded === total) {\r\n          // in case \"onload\" doesn't fire (eg. gecko 1.9.2)\r\n          html5_events.canplaythrough.call(this, e);\r\n        }\r\n\r\n      }\r\n\r\n    }),\r\n\r\n    ratechange: html5_event(function() {\r\n\r\n      sm2._wD(this._s.id + ': ratechange');\r\n\r\n    }),\r\n\r\n    suspend: html5_event(function(e) {\r\n\r\n      // download paused/stopped, may have finished (eg. onload)\r\n      var s = this._s;\r\n\r\n      sm2._wD(this._s.id + ': suspend');\r\n      html5_events.progress.call(this, e);\r\n      s._onsuspend();\r\n\r\n    }),\r\n\r\n    stalled: html5_event(function() {\r\n\r\n      sm2._wD(this._s.id + ': stalled');\r\n\r\n    }),\r\n\r\n    timeupdate: html5_event(function() {\r\n\r\n      this._s._onTimer();\r\n\r\n    }),\r\n\r\n    waiting: html5_event(function() {\r\n\r\n      var s = this._s;\r\n\r\n      // see also: seeking\r\n      sm2._wD(this._s.id + ': waiting');\r\n\r\n      // playback faster than download rate, etc.\r\n      s._onbufferchange(1);\r\n\r\n    })\r\n\r\n  };\r\n\r\n  html5OK = function(iO) {\r\n\r\n    // playability test based on URL or MIME type\r\n\r\n    var result;\r\n\r\n    if (!iO || (!iO.type && !iO.url && !iO.serverURL)) {\r\n\r\n      // nothing to check\r\n      result = false;\r\n\r\n    } else if (iO.serverURL || (iO.type && preferFlashCheck(iO.type))) {\r\n\r\n      // RTMP, or preferring flash\r\n      result = false;\r\n\r\n    } else {\r\n\r\n      // Use type, if specified. Pass data: URIs to HTML5. If HTML5-only mode, no other options, so just give 'er\r\n      result = ((iO.type ? html5CanPlay({ type: iO.type }) : html5CanPlay({ url: iO.url }) || sm2.html5Only || iO.url.match(/data:/i)));\r\n\r\n    }\r\n\r\n    return result;\r\n\r\n  };\r\n\r\n  html5Unload = function(oAudio) {\r\n\r\n    /**\r\n     * Internal method: Unload media, and cancel any current/pending network requests.\r\n     * Firefox can load an empty URL, which allegedly destroys the decoder and stops the download.\r\n     * https://developer.mozilla.org/En/Using_audio_and_video_in_Firefox#Stopping_the_download_of_media\r\n     * However, Firefox has been seen loading a relative URL from '' and thus requesting the hosting page on unload.\r\n     * Other UA behaviour is unclear, so everyone else gets an about:blank-style URL.\r\n     */\r\n\r\n    var url;\r\n\r\n    if (oAudio) {\r\n\r\n      // Firefox and Chrome accept short WAVe data: URIs. Chome dislikes audio/wav, but accepts audio/wav for data: MIME.\r\n      // Desktop Safari complains / fails on data: URI, so it gets about:blank.\r\n      url = (isSafari ? emptyURL : (sm2.html5.canPlayType('audio/wav') ? emptyWAV : emptyURL));\r\n\r\n      oAudio.src = url;\r\n\r\n      // reset some state, too\r\n      if (oAudio._called_unload !== _undefined) {\r\n        oAudio._called_load = false;\r\n      }\r\n\r\n    }\r\n\r\n    if (useGlobalHTML5Audio) {\r\n\r\n      // ensure URL state is trashed, also\r\n      lastGlobalHTML5URL = null;\r\n\r\n    }\r\n\r\n    return url;\r\n\r\n  };\r\n\r\n  html5CanPlay = function(o) {\r\n\r\n    /**\r\n     * Try to find MIME, test and return truthiness\r\n     * o = {\r\n     *  url: '/path/to/an.mp3',\r\n     *  type: 'audio/mp3'\r\n     * }\r\n     */\r\n\r\n    if (!sm2.useHTML5Audio || !sm2.hasHTML5) return false;\r\n\r\n    var url = (o.url || null),\r\n        mime = (o.type || null),\r\n        aF = sm2.audioFormats,\r\n        result,\r\n        offset,\r\n        fileExt,\r\n        item;\r\n\r\n    // account for known cases like audio/mp3\r\n\r\n    if (mime && sm2.html5[mime] !== _undefined) return (sm2.html5[mime] && !preferFlashCheck(mime));\r\n\r\n    if (!html5Ext) {\r\n\r\n      html5Ext = [];\r\n\r\n      for (item in aF) {\r\n\r\n        if (aF.hasOwnProperty(item)) {\r\n\r\n          html5Ext.push(item);\r\n\r\n          if (aF[item].related) {\r\n            html5Ext = html5Ext.concat(aF[item].related);\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n      html5Ext = new RegExp('\\\\.(' + html5Ext.join('|') + ')(\\\\?.*)?$', 'i');\r\n\r\n    }\r\n\r\n    // TODO: Strip URL queries, etc.\r\n    fileExt = (url ? url.toLowerCase().match(html5Ext) : null);\r\n\r\n    if (!fileExt || !fileExt.length) {\r\n\r\n      if (!mime) {\r\n\r\n        result = false;\r\n\r\n      } else {\r\n\r\n        // audio/mp3 -> mp3, result should be known\r\n        offset = mime.indexOf(';');\r\n\r\n        // strip \"audio/X; codecs...\"\r\n        fileExt = (offset !== -1 ? mime.substr(0, offset) : mime).substr(6);\r\n\r\n      }\r\n\r\n    } else {\r\n\r\n      // match the raw extension name - \"mp3\", for example\r\n      fileExt = fileExt[1];\r\n\r\n    }\r\n\r\n    if (fileExt && sm2.html5[fileExt] !== _undefined) {\r\n\r\n      // result known\r\n      result = (sm2.html5[fileExt] && !preferFlashCheck(fileExt));\r\n\r\n    } else {\r\n\r\n      mime = 'audio/' + fileExt;\r\n      result = sm2.html5.canPlayType({ type: mime });\r\n\r\n      sm2.html5[fileExt] = result;\r\n\r\n      // sm2._wD('canPlayType, found result: ' + result);\r\n      result = (result && sm2.html5[mime] && !preferFlashCheck(mime));\r\n    }\r\n\r\n    return result;\r\n\r\n  };\r\n\r\n  testHTML5 = function() {\r\n\r\n    /**\r\n     * Internal: Iterates over audioFormats, determining support eg. audio/mp3, audio/mpeg and so on\r\n     * assigns results to html5[] and flash[].\r\n     */\r\n\r\n    if (!sm2.useHTML5Audio || !sm2.hasHTML5) {\r\n\r\n      // without HTML5, we need Flash.\r\n      sm2.html5.usingFlash = true;\r\n      needsFlash = true;\r\n\r\n      return false;\r\n\r\n    }\r\n\r\n    // double-whammy: Opera 9.64 throws WRONG_ARGUMENTS_ERR if no parameter passed to Audio(), and Webkit + iOS happily tries to load \"null\" as a URL. :/\r\n    var a = (Audio !== _undefined ? (isOpera && opera.version() < 10 ? new Audio(null) : new Audio()) : null),\r\n        item, lookup, support = {}, aF, i;\r\n\r\n    function cp(m) {\r\n\r\n      var canPlay, j,\r\n          result = false,\r\n          isOK = false;\r\n\r\n      if (!a || typeof a.canPlayType !== 'function') return result;\r\n\r\n      if (m instanceof Array) {\r\n\r\n        // iterate through all mime types, return any successes\r\n\r\n        for (i = 0, j = m.length; i < j; i++) {\r\n\r\n          if (sm2.html5[m[i]] || a.canPlayType(m[i]).match(sm2.html5Test)) {\r\n\r\n            isOK = true;\r\n            sm2.html5[m[i]] = true;\r\n\r\n            // note flash support, too\r\n            sm2.flash[m[i]] = !!(m[i].match(flashMIME));\r\n\r\n          }\r\n\r\n        }\r\n\r\n        result = isOK;\r\n\r\n      } else {\r\n\r\n        canPlay = (a && typeof a.canPlayType === 'function' ? a.canPlayType(m) : false);\r\n        result = !!(canPlay && (canPlay.match(sm2.html5Test)));\r\n\r\n      }\r\n\r\n      return result;\r\n\r\n    }\r\n\r\n    // test all registered formats + codecs\r\n\r\n    aF = sm2.audioFormats;\r\n\r\n    for (item in aF) {\r\n\r\n      if (aF.hasOwnProperty(item)) {\r\n\r\n        lookup = 'audio/' + item;\r\n\r\n        support[item] = cp(aF[item].type);\r\n\r\n        // write back generic type too, eg. audio/mp3\r\n        support[lookup] = support[item];\r\n\r\n        // assign flash\r\n        if (item.match(flashMIME)) {\r\n\r\n          sm2.flash[item] = true;\r\n          sm2.flash[lookup] = true;\r\n\r\n        } else {\r\n\r\n          sm2.flash[item] = false;\r\n          sm2.flash[lookup] = false;\r\n\r\n        }\r\n\r\n        // assign result to related formats, too\r\n\r\n        if (aF[item] && aF[item].related) {\r\n\r\n          for (i = aF[item].related.length - 1; i >= 0; i--) {\r\n\r\n            // eg. audio/m4a\r\n            support['audio/' + aF[item].related[i]] = support[item];\r\n            sm2.html5[aF[item].related[i]] = support[item];\r\n            sm2.flash[aF[item].related[i]] = support[item];\r\n\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    support.canPlayType = (a ? cp : null);\r\n    sm2.html5 = mixin(sm2.html5, support);\r\n\r\n    sm2.html5.usingFlash = featureCheck();\r\n    needsFlash = sm2.html5.usingFlash;\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  strings = {\r\n\r\n    // <d>\r\n    notReady: 'Unavailable - wait until onready() has fired.',\r\n    notOK: 'Audio support is not available.',\r\n    domError: sm + 'exception caught while appending SWF to DOM.',\r\n    spcWmode: 'Removing wmode, preventing known SWF loading issue(s)',\r\n    swf404: smc + 'Verify that %s is a valid path.',\r\n    tryDebug: 'Try ' + sm + '.debugFlash = true for more security details (output goes to SWF.)',\r\n    checkSWF: 'See SWF output for more debug info.',\r\n    localFail: smc + 'Non-HTTP page (' + doc.location.protocol + ' URL?) Review Flash player security settings for this special case:\\nhttp://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html\\nMay need to add/allow path, eg. c:/sm2/ or /users/me/sm2/',\r\n    waitFocus: smc + 'Special case: Waiting for SWF to load with window focus...',\r\n    waitForever: smc + 'Waiting indefinitely for Flash (will recover if unblocked)...',\r\n    waitSWF: smc + 'Waiting for 100% SWF load...',\r\n    needFunction: smc + 'Function object expected for %s',\r\n    badID: 'Sound ID \"%s\" should be a string, starting with a non-numeric character',\r\n    currentObj: smc + '_debug(): Current sound objects',\r\n    waitOnload: smc + 'Waiting for window.onload()',\r\n    docLoaded: smc + 'Document already loaded',\r\n    onload: smc + 'initComplete(): calling soundManager.onload()',\r\n    onloadOK: sm + '.onload() complete',\r\n    didInit: smc + 'init(): Already called?',\r\n    secNote: 'Flash security note: Network/internet URLs will not load due to security restrictions. Access can be configured via Flash Player Global Security Settings Page: http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html',\r\n    badRemove: smc + 'Failed to remove Flash node.',\r\n    shutdown: sm + '.disable(): Shutting down',\r\n    queue: smc + 'Queueing %s handler',\r\n    smError: 'SMSound.load(): Exception: JS-Flash communication failed, or JS error.',\r\n    fbTimeout: 'No flash response, applying .' + swfCSS.swfTimedout + ' CSS...',\r\n    fbLoaded: 'Flash loaded',\r\n    fbHandler: smc + 'flashBlockHandler()',\r\n    manURL: 'SMSound.load(): Using manually-assigned URL',\r\n    onURL: sm + '.load(): current URL already assigned.',\r\n    badFV: sm + '.flashVersion must be 8 or 9. \"%s\" is invalid. Reverting to %s.',\r\n    as2loop: 'Note: Setting stream:false so looping can work (flash 8 limitation)',\r\n    noNSLoop: 'Note: Looping not implemented for MovieStar formats',\r\n    needfl9: 'Note: Switching to flash 9, required for MP4 formats.',\r\n    mfTimeout: 'Setting flashLoadTimeout = 0 (infinite) for off-screen, mobile flash case',\r\n    needFlash: smc + 'Fatal error: Flash is needed to play some required formats, but is not available.',\r\n    gotFocus: smc + 'Got window focus.',\r\n    policy: 'Enabling usePolicyFile for data access',\r\n    setup: sm + '.setup(): allowed parameters: %s',\r\n    setupError: sm + '.setup(): \"%s\" cannot be assigned with this method.',\r\n    setupUndef: sm + '.setup(): Could not find option \"%s\"',\r\n    setupLate: sm + '.setup(): url, flashVersion and html5Test property changes will not take effect until reboot().',\r\n    noURL: smc + 'Flash URL required. Call soundManager.setup({url:...}) to get started.',\r\n    sm2Loaded: 'SoundManager 2: Ready. ' + String.fromCharCode(10003),\r\n    reset: sm + '.reset(): Removing event callbacks',\r\n    mobileUA: 'Mobile UA detected, preferring HTML5 by default.',\r\n    globalHTML5: 'Using singleton HTML5 Audio() pattern for this device.',\r\n    ignoreMobile: 'Ignoring mobile restrictions for this device.'\r\n    // </d>\r\n\r\n  };\r\n\r\n  str = function() {\r\n\r\n    // internal string replace helper.\r\n    // arguments: o [,items to replace]\r\n    // <d>\r\n\r\n    var args,\r\n        i, j, o,\r\n        sstr;\r\n\r\n    // real array, please\r\n    args = slice.call(arguments);\r\n\r\n    // first argument\r\n    o = args.shift();\r\n\r\n    sstr = (strings && strings[o] ? strings[o] : '');\r\n\r\n    if (sstr && args && args.length) {\r\n      for (i = 0, j = args.length; i < j; i++) {\r\n        sstr = sstr.replace('%s', args[i]);\r\n      }\r\n    }\r\n\r\n    return sstr;\r\n    // </d>\r\n\r\n  };\r\n\r\n  loopFix = function(sOpt) {\r\n\r\n    // flash 8 requires stream = false for looping to work\r\n    if (fV === 8 && sOpt.loops > 1 && sOpt.stream) {\r\n      _wDS('as2loop');\r\n      sOpt.stream = false;\r\n    }\r\n\r\n    return sOpt;\r\n\r\n  };\r\n\r\n  policyFix = function(sOpt, sPre) {\r\n\r\n    if (sOpt && !sOpt.usePolicyFile && (sOpt.onid3 || sOpt.usePeakData || sOpt.useWaveformData || sOpt.useEQData)) {\r\n      sm2._wD((sPre || '') + str('policy'));\r\n      sOpt.usePolicyFile = true;\r\n    }\r\n\r\n    return sOpt;\r\n\r\n  };\r\n\r\n  complain = function(sMsg) {\r\n\r\n    // <d>\r\n    if (hasConsole && console.warn !== _undefined) {\r\n      console.warn(sMsg);\r\n    } else {\r\n      sm2._wD(sMsg);\r\n    }\r\n    // </d>\r\n\r\n  };\r\n\r\n  doNothing = function() {\r\n\r\n    return false;\r\n\r\n  };\r\n\r\n  disableObject = function(o) {\r\n\r\n    var oProp;\r\n\r\n    for (oProp in o) {\r\n      if (o.hasOwnProperty(oProp) && typeof o[oProp] === 'function') {\r\n        o[oProp] = doNothing;\r\n      }\r\n    }\r\n\r\n    oProp = null;\r\n\r\n  };\r\n\r\n  failSafely = function(bNoDisable) {\r\n\r\n    // general failure exception handler\r\n\r\n    if (bNoDisable === _undefined) {\r\n      bNoDisable = false;\r\n    }\r\n\r\n    if (disabled || bNoDisable) {\r\n      sm2.disable(bNoDisable);\r\n    }\r\n\r\n  };\r\n\r\n  normalizeMovieURL = function(movieURL) {\r\n\r\n    var urlParams = null, url;\r\n\r\n    if (movieURL) {\r\n\r\n      if (movieURL.match(/\\.swf(\\?.*)?$/i)) {\r\n\r\n        urlParams = movieURL.substr(movieURL.toLowerCase().lastIndexOf('.swf?') + 4);\r\n\r\n        // assume user knows what they're doing\r\n        if (urlParams) return movieURL;\r\n\r\n      } else if (movieURL.lastIndexOf('/') !== movieURL.length - 1) {\r\n\r\n        // append trailing slash, if needed\r\n        movieURL += '/';\r\n\r\n      }\r\n\r\n    }\r\n\r\n    url = (movieURL && movieURL.lastIndexOf('/') !== -1 ? movieURL.substr(0, movieURL.lastIndexOf('/') + 1) : './') + sm2.movieURL;\r\n\r\n    if (sm2.noSWFCache) {\r\n      url += ('?ts=' + new Date().getTime());\r\n    }\r\n\r\n    return url;\r\n\r\n  };\r\n\r\n  setVersionInfo = function() {\r\n\r\n    // short-hand for internal use\r\n\r\n    fV = parseInt(sm2.flashVersion, 10);\r\n\r\n    if (fV !== 8 && fV !== 9) {\r\n      sm2._wD(str('badFV', fV, defaultFlashVersion));\r\n      sm2.flashVersion = fV = defaultFlashVersion;\r\n    }\r\n\r\n    // debug flash movie, if applicable\r\n\r\n    var isDebug = (sm2.debugMode || sm2.debugFlash ? '_debug.swf' : '.swf');\r\n\r\n    if (sm2.useHTML5Audio && !sm2.html5Only && sm2.audioFormats.mp4.required && fV < 9) {\r\n      sm2._wD(str('needfl9'));\r\n      sm2.flashVersion = fV = 9;\r\n    }\r\n\r\n    sm2.version = sm2.versionNumber + (sm2.html5Only ? ' (HTML5-only mode)' : (fV === 9 ? ' (AS3/Flash 9)' : ' (AS2/Flash 8)'));\r\n\r\n    // set up default options\r\n    if (fV > 8) {\r\n\r\n      // +flash 9 base options\r\n      sm2.defaultOptions = mixin(sm2.defaultOptions, sm2.flash9Options);\r\n      sm2.features.buffering = true;\r\n\r\n      // +moviestar support\r\n      sm2.defaultOptions = mixin(sm2.defaultOptions, sm2.movieStarOptions);\r\n      sm2.filePatterns.flash9 = new RegExp('\\\\.(mp3|' + netStreamTypes.join('|') + ')(\\\\?.*)?$', 'i');\r\n      sm2.features.movieStar = true;\r\n\r\n    } else {\r\n\r\n      sm2.features.movieStar = false;\r\n\r\n    }\r\n\r\n    // regExp for flash canPlay(), etc.\r\n    sm2.filePattern = sm2.filePatterns[(fV !== 8 ? 'flash9' : 'flash8')];\r\n\r\n    // if applicable, use _debug versions of SWFs\r\n    sm2.movieURL = (fV === 8 ? 'soundmanager2.swf' : 'soundmanager2_flash9.swf').replace('.swf', isDebug);\r\n\r\n    sm2.features.peakData = sm2.features.waveformData = sm2.features.eqData = (fV > 8);\r\n\r\n  };\r\n\r\n  setPolling = function(bPolling, bHighPerformance) {\r\n\r\n    if (!flash) {\r\n      return;\r\n    }\r\n\r\n    flash._setPolling(bPolling, bHighPerformance);\r\n\r\n  };\r\n\r\n  initDebug = function() {\r\n\r\n    // starts debug mode, creating output <div> for UAs without console object\r\n\r\n    // allow force of debug mode via URL\r\n    // <d>\r\n    if (sm2.debugURLParam.test(wl)) {\r\n      sm2.setupOptions.debugMode = sm2.debugMode = true;\r\n    }\r\n\r\n    if (id(sm2.debugID)) {\r\n      return;\r\n    }\r\n\r\n    var oD, oDebug, oTarget, oToggle, tmp;\r\n\r\n    if (sm2.debugMode && !id(sm2.debugID) && (!hasConsole || !sm2.useConsole || !sm2.consoleOnly)) {\r\n\r\n      oD = doc.createElement('div');\r\n      oD.id = sm2.debugID + '-toggle';\r\n\r\n      oToggle = {\r\n        position: 'fixed',\r\n        bottom: '0px',\r\n        right: '0px',\r\n        width: '1.2em',\r\n        height: '1.2em',\r\n        lineHeight: '1.2em',\r\n        margin: '2px',\r\n        textAlign: 'center',\r\n        border: '1px solid #999',\r\n        cursor: 'pointer',\r\n        background: '#fff',\r\n        color: '#333',\r\n        zIndex: 10001\r\n      };\r\n\r\n      oD.appendChild(doc.createTextNode('-'));\r\n      oD.onclick = toggleDebug;\r\n      oD.title = 'Toggle SM2 debug console';\r\n\r\n      if (ua.match(/msie 6/i)) {\r\n        oD.style.position = 'absolute';\r\n        oD.style.cursor = 'hand';\r\n      }\r\n\r\n      for (tmp in oToggle) {\r\n        if (oToggle.hasOwnProperty(tmp)) {\r\n          oD.style[tmp] = oToggle[tmp];\r\n        }\r\n      }\r\n\r\n      oDebug = doc.createElement('div');\r\n      oDebug.id = sm2.debugID;\r\n      oDebug.style.display = (sm2.debugMode ? 'block' : 'none');\r\n\r\n      if (sm2.debugMode && !id(oD.id)) {\r\n        try {\r\n          oTarget = getDocument();\r\n          oTarget.appendChild(oD);\r\n        } catch(e2) {\r\n          throw new Error(str('domError') + ' \\n' + e2.toString());\r\n        }\r\n        oTarget.appendChild(oDebug);\r\n      }\r\n\r\n    }\r\n\r\n    oTarget = null;\r\n    // </d>\r\n\r\n  };\r\n\r\n  idCheck = this.getSoundById;\r\n\r\n  // <d>\r\n  _wDS = function(o, errorLevel) {\r\n\r\n    return (!o ? '' : sm2._wD(str(o), errorLevel));\r\n\r\n  };\r\n\r\n  toggleDebug = function() {\r\n\r\n    var o = id(sm2.debugID),\r\n    oT = id(sm2.debugID + '-toggle');\r\n\r\n    if (!o) {\r\n      return;\r\n    }\r\n\r\n    if (debugOpen) {\r\n      // minimize\r\n      oT.innerHTML = '+';\r\n      o.style.display = 'none';\r\n    } else {\r\n      oT.innerHTML = '-';\r\n      o.style.display = 'block';\r\n    }\r\n\r\n    debugOpen = !debugOpen;\r\n\r\n  };\r\n\r\n  debugTS = function(sEventType, bSuccess, sMessage) {\r\n\r\n    // troubleshooter debug hooks\r\n\r\n    if (window.sm2Debugger !== _undefined) {\r\n      try {\r\n        sm2Debugger.handleEvent(sEventType, bSuccess, sMessage);\r\n      } catch(e) {\r\n        // oh well\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n\r\n  };\r\n  // </d>\r\n\r\n  getSWFCSS = function() {\r\n\r\n    var css = [];\r\n\r\n    if (sm2.debugMode) {\r\n      css.push(swfCSS.sm2Debug);\r\n    }\r\n\r\n    if (sm2.debugFlash) {\r\n      css.push(swfCSS.flashDebug);\r\n    }\r\n\r\n    if (sm2.useHighPerformance) {\r\n      css.push(swfCSS.highPerf);\r\n    }\r\n\r\n    return css.join(' ');\r\n\r\n  };\r\n\r\n  flashBlockHandler = function() {\r\n\r\n    // *possible* flash block situation.\r\n\r\n    var name = str('fbHandler'),\r\n        p = sm2.getMoviePercent(),\r\n        css = swfCSS,\r\n        error = {\r\n          type: 'FLASHBLOCK'\r\n        };\r\n\r\n    if (sm2.html5Only) {\r\n      // no flash, or unused\r\n      return;\r\n    }\r\n\r\n    if (!sm2.ok()) {\r\n\r\n      if (needsFlash) {\r\n        // make the movie more visible, so user can fix\r\n        sm2.oMC.className = getSWFCSS() + ' ' + css.swfDefault + ' ' + (p === null ? css.swfTimedout : css.swfError);\r\n        sm2._wD(name + ': ' + str('fbTimeout') + (p ? ' (' + str('fbLoaded') + ')' : ''));\r\n      }\r\n\r\n      sm2.didFlashBlock = true;\r\n\r\n      // fire onready(), complain lightly\r\n      processOnEvents({\r\n        type: 'ontimeout',\r\n        ignoreInit: true,\r\n        error: error\r\n      });\r\n\r\n      catchError(error);\r\n\r\n    } else {\r\n\r\n      // SM2 loaded OK (or recovered)\r\n\r\n      // <d>\r\n      if (sm2.didFlashBlock) {\r\n        sm2._wD(name + ': Unblocked');\r\n      }\r\n      // </d>\r\n\r\n      if (sm2.oMC) {\r\n        sm2.oMC.className = [getSWFCSS(), css.swfDefault, css.swfLoaded + (sm2.didFlashBlock ? ' ' + css.swfUnblocked : '')].join(' ');\r\n      }\r\n\r\n    }\r\n\r\n  };\r\n\r\n  addOnEvent = function(sType, oMethod, oScope) {\r\n\r\n    if (on_queue[sType] === _undefined) {\r\n      on_queue[sType] = [];\r\n    }\r\n\r\n    on_queue[sType].push({\r\n      method: oMethod,\r\n      scope: (oScope || null),\r\n      fired: false\r\n    });\r\n\r\n  };\r\n\r\n  processOnEvents = function(oOptions) {\r\n\r\n    // if unspecified, assume OK/error\r\n\r\n    if (!oOptions) {\r\n      oOptions = {\r\n        type: (sm2.ok() ? 'onready' : 'ontimeout')\r\n      };\r\n    }\r\n\r\n    // not ready yet.\r\n    if (!didInit && oOptions && !oOptions.ignoreInit) return false;\r\n\r\n    // invalid case\r\n    if (oOptions.type === 'ontimeout' && (sm2.ok() || (disabled && !oOptions.ignoreInit))) return false;\r\n\r\n    var status = {\r\n          success: (oOptions && oOptions.ignoreInit ? sm2.ok() : !disabled)\r\n        },\r\n\r\n        // queue specified by type, or none\r\n        srcQueue = (oOptions && oOptions.type ? on_queue[oOptions.type] || [] : []),\r\n\r\n        queue = [], i, j,\r\n        args = [status],\r\n        canRetry = (needsFlash && !sm2.ok());\r\n\r\n    if (oOptions.error) {\r\n      args[0].error = oOptions.error;\r\n    }\r\n\r\n    for (i = 0, j = srcQueue.length; i < j; i++) {\r\n      if (srcQueue[i].fired !== true) {\r\n        queue.push(srcQueue[i]);\r\n      }\r\n    }\r\n\r\n    if (queue.length) {\r\n\r\n      // sm2._wD(sm + ': Firing ' + queue.length + ' ' + oOptions.type + '() item' + (queue.length === 1 ? '' : 's'));\r\n      for (i = 0, j = queue.length; i < j; i++) {\r\n\r\n        if (queue[i].scope) {\r\n          queue[i].method.apply(queue[i].scope, args);\r\n        } else {\r\n          queue[i].method.apply(this, args);\r\n        }\r\n\r\n        if (!canRetry) {\r\n          // useFlashBlock and SWF timeout case doesn't count here.\r\n          queue[i].fired = true;\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  initUserOnload = function() {\r\n\r\n    window.setTimeout(function() {\r\n\r\n      if (sm2.useFlashBlock) {\r\n        flashBlockHandler();\r\n      }\r\n\r\n      processOnEvents();\r\n\r\n      // call user-defined \"onload\", scoped to window\r\n\r\n      if (typeof sm2.onload === 'function') {\r\n        _wDS('onload', 1);\r\n        sm2.onload.apply(window);\r\n        _wDS('onloadOK', 1);\r\n      }\r\n\r\n      if (sm2.waitForWindowLoad) {\r\n        event.add(window, 'load', initUserOnload);\r\n      }\r\n\r\n    }, 1);\r\n\r\n  };\r\n\r\n  detectFlash = function() {\r\n\r\n    /**\r\n     * Hat tip: Flash Detect library (BSD, (C) 2007) by Carl \"DocYes\" S. Yestrau\r\n     * http://featureblend.com/javascript-flash-detection-library.html / http://featureblend.com/license.txt\r\n     */\r\n\r\n    // this work has already been done.\r\n    if (hasFlash !== _undefined) return hasFlash;\r\n\r\n    var hasPlugin = false, n = navigator, obj, type, types, AX = window.ActiveXObject;\r\n\r\n    // MS Edge 14 throws an \"Unspecified Error\" because n.plugins is inaccessible due to permissions\r\n    var nP;\r\n\r\n    try {\r\n      nP = n.plugins;\r\n    } catch(e) {\r\n      nP = undefined;\r\n    }\r\n\r\n    if (nP && nP.length) {\r\n\r\n      type = 'application/x-shockwave-flash';\r\n      types = n.mimeTypes;\r\n\r\n      if (types && types[type] && types[type].enabledPlugin && types[type].enabledPlugin.description) {\r\n        hasPlugin = true;\r\n      }\r\n\r\n    } else if (AX !== _undefined && !ua.match(/MSAppHost/i)) {\r\n\r\n      // Windows 8 Store Apps (MSAppHost) are weird (compatibility?) and won't complain here, but will barf if Flash/ActiveX object is appended to the DOM.\r\n      try {\r\n        obj = new AX('ShockwaveFlash.ShockwaveFlash');\r\n      } catch(e) {\r\n        // oh well\r\n        obj = null;\r\n      }\r\n\r\n      hasPlugin = (!!obj);\r\n\r\n      // cleanup, because it is ActiveX after all\r\n      obj = null;\r\n\r\n    }\r\n\r\n    hasFlash = hasPlugin;\r\n\r\n    return hasPlugin;\r\n\r\n  };\r\n\r\n  featureCheck = function() {\r\n\r\n    var flashNeeded,\r\n        item,\r\n        formats = sm2.audioFormats,\r\n        // iPhone <= 3.1 has broken HTML5 audio(), but firmware 3.2 (original iPad) + iOS4 works.\r\n        isSpecial = (is_iDevice && !!(ua.match(/os (1|2|3_0|3_1)\\s/i)));\r\n\r\n    if (isSpecial) {\r\n\r\n      // has Audio(), but is broken; let it load links directly.\r\n      sm2.hasHTML5 = false;\r\n\r\n      // ignore flash case, however\r\n      sm2.html5Only = true;\r\n\r\n      // hide the SWF, if present\r\n      if (sm2.oMC) {\r\n        sm2.oMC.style.display = 'none';\r\n      }\r\n\r\n    } else if (sm2.useHTML5Audio) {\r\n\r\n        if (!sm2.html5 || !sm2.html5.canPlayType) {\r\n          sm2._wD('SoundManager: No HTML5 Audio() support detected.');\r\n          sm2.hasHTML5 = false;\r\n        }\r\n\r\n        // <d>\r\n        if (isBadSafari) {\r\n          sm2._wD(smc + 'Note: Buggy HTML5 Audio in Safari on this OS X release, see https://bugs.webkit.org/show_bug.cgi?id=32159 - ' + (!hasFlash ? ' would use flash fallback for MP3/MP4, but none detected.' : 'will use flash fallback for MP3/MP4, if available'), 1);\r\n        }\r\n        // </d>\r\n\r\n      }\r\n\r\n    if (sm2.useHTML5Audio && sm2.hasHTML5) {\r\n\r\n      // sort out whether flash is optional, required or can be ignored.\r\n\r\n      // innocent until proven guilty.\r\n      canIgnoreFlash = true;\r\n\r\n      for (item in formats) {\r\n\r\n        if (formats.hasOwnProperty(item)) {\r\n\r\n          if (formats[item].required) {\r\n\r\n            if (!sm2.html5.canPlayType(formats[item].type)) {\r\n\r\n              // 100% HTML5 mode is not possible.\r\n              canIgnoreFlash = false;\r\n              flashNeeded = true;\r\n\r\n            } else if (sm2.preferFlash && (sm2.flash[item] || sm2.flash[formats[item].type])) {\r\n\r\n              // flash may be required, or preferred for this format.\r\n              flashNeeded = true;\r\n\r\n            }\r\n\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n    // sanity check...\r\n    if (sm2.ignoreFlash) {\r\n      flashNeeded = false;\r\n      canIgnoreFlash = true;\r\n    }\r\n\r\n    sm2.html5Only = (sm2.hasHTML5 && sm2.useHTML5Audio && !flashNeeded);\r\n\r\n    return (!sm2.html5Only);\r\n\r\n  };\r\n\r\n  parseURL = function(url) {\r\n\r\n    /**\r\n     * Internal: Finds and returns the first playable URL (or failing that, the first URL.)\r\n     * @param {string or array} url A single URL string, OR, an array of URL strings or {url:'/path/to/resource', type:'audio/mp3'} objects.\r\n     */\r\n\r\n    var i, j, urlResult = 0, result;\r\n\r\n    if (url instanceof Array) {\r\n\r\n      // find the first good one\r\n      for (i = 0, j = url.length; i < j; i++) {\r\n\r\n        if (url[i] instanceof Object) {\r\n\r\n          // MIME check\r\n          if (sm2.canPlayMIME(url[i].type)) {\r\n            urlResult = i;\r\n            break;\r\n          }\r\n\r\n        } else if (sm2.canPlayURL(url[i])) {\r\n\r\n          // URL string check\r\n          urlResult = i;\r\n          break;\r\n\r\n        }\r\n\r\n      }\r\n\r\n      // normalize to string\r\n      if (url[urlResult].url) {\r\n        url[urlResult] = url[urlResult].url;\r\n      }\r\n\r\n      result = url[urlResult];\r\n\r\n    } else {\r\n\r\n      // single URL case\r\n      result = url;\r\n\r\n    }\r\n\r\n    return result;\r\n\r\n  };\r\n\r\n\r\n  startTimer = function(oSound) {\r\n\r\n    /**\r\n     * attach a timer to this sound, and start an interval if needed\r\n     */\r\n\r\n    if (!oSound._hasTimer) {\r\n\r\n      oSound._hasTimer = true;\r\n\r\n      if (!mobileHTML5 && sm2.html5PollingInterval) {\r\n\r\n        if (h5IntervalTimer === null && h5TimerCount === 0) {\r\n\r\n          h5IntervalTimer = setInterval(timerExecute, sm2.html5PollingInterval);\r\n\r\n        }\r\n\r\n        h5TimerCount++;\r\n\r\n      }\r\n\r\n    }\r\n\r\n  };\r\n\r\n  stopTimer = function(oSound) {\r\n\r\n    /**\r\n     * detach a timer\r\n     */\r\n\r\n    if (oSound._hasTimer) {\r\n\r\n      oSound._hasTimer = false;\r\n\r\n      if (!mobileHTML5 && sm2.html5PollingInterval) {\r\n\r\n        // interval will stop itself at next execution.\r\n\r\n        h5TimerCount--;\r\n\r\n      }\r\n\r\n    }\r\n\r\n  };\r\n\r\n  timerExecute = function() {\r\n\r\n    /**\r\n     * manual polling for HTML5 progress events, ie., whileplaying()\r\n     * (can achieve greater precision than conservative default HTML5 interval)\r\n     */\r\n\r\n    var i;\r\n\r\n    if (h5IntervalTimer !== null && !h5TimerCount) {\r\n\r\n      // no active timers, stop polling interval.\r\n\r\n      clearInterval(h5IntervalTimer);\r\n\r\n      h5IntervalTimer = null;\r\n\r\n      return;\r\n\r\n    }\r\n\r\n    // check all HTML5 sounds with timers\r\n\r\n    for (i = sm2.soundIDs.length - 1; i >= 0; i--) {\r\n\r\n      if (sm2.sounds[sm2.soundIDs[i]].isHTML5 && sm2.sounds[sm2.soundIDs[i]]._hasTimer) {\r\n        sm2.sounds[sm2.soundIDs[i]]._onTimer();\r\n      }\r\n\r\n    }\r\n\r\n  };\r\n\r\n  catchError = function(options) {\r\n\r\n    options = (options !== _undefined ? options : {});\r\n\r\n    if (typeof sm2.onerror === 'function') {\r\n      sm2.onerror.apply(window, [{\r\n        type: (options.type !== _undefined ? options.type : null)\r\n      }]);\r\n    }\r\n\r\n    if (options.fatal !== _undefined && options.fatal) {\r\n      sm2.disable();\r\n    }\r\n\r\n  };\r\n\r\n  badSafariFix = function() {\r\n\r\n    // special case: \"bad\" Safari (OS X 10.3 - 10.7) must fall back to flash for MP3/MP4\r\n    if (!isBadSafari || !detectFlash()) {\r\n      // doesn't apply\r\n      return;\r\n    }\r\n\r\n    var aF = sm2.audioFormats, i, item;\r\n\r\n    for (item in aF) {\r\n\r\n      if (aF.hasOwnProperty(item)) {\r\n\r\n        if (item === 'mp3' || item === 'mp4') {\r\n\r\n          sm2._wD(sm + ': Using flash fallback for ' + item + ' format');\r\n          sm2.html5[item] = false;\r\n\r\n          // assign result to related formats, too\r\n          if (aF[item] && aF[item].related) {\r\n            for (i = aF[item].related.length - 1; i >= 0; i--) {\r\n              sm2.html5[aF[item].related[i]] = false;\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n  };\r\n\r\n  /**\r\n   * Pseudo-private flash/ExternalInterface methods\r\n   * ----------------------------------------------\r\n   */\r\n\r\n  this._setSandboxType = function(sandboxType) {\r\n\r\n    // <d>\r\n    // Security sandbox according to Flash plugin\r\n    var sb = sm2.sandbox;\r\n\r\n    sb.type = sandboxType;\r\n    sb.description = sb.types[(sb.types[sandboxType] !== _undefined ? sandboxType : 'unknown')];\r\n\r\n    if (sb.type === 'localWithFile') {\r\n\r\n      sb.noRemote = true;\r\n      sb.noLocal = false;\r\n      _wDS('secNote', 2);\r\n\r\n    } else if (sb.type === 'localWithNetwork') {\r\n\r\n      sb.noRemote = false;\r\n      sb.noLocal = true;\r\n\r\n    } else if (sb.type === 'localTrusted') {\r\n\r\n      sb.noRemote = false;\r\n      sb.noLocal = false;\r\n\r\n    }\r\n    // </d>\r\n\r\n  };\r\n\r\n  this._externalInterfaceOK = function(swfVersion) {\r\n\r\n    // flash callback confirming flash loaded, EI working etc.\r\n    // swfVersion: SWF build string\r\n\r\n    if (sm2.swfLoaded) {\r\n      return;\r\n    }\r\n\r\n    var e;\r\n\r\n    debugTS('swf', true);\r\n    debugTS('flashtojs', true);\r\n    sm2.swfLoaded = true;\r\n    tryInitOnFocus = false;\r\n\r\n    if (isBadSafari) {\r\n      badSafariFix();\r\n    }\r\n\r\n    // complain if JS + SWF build/version strings don't match, excluding +DEV builds\r\n    // <d>\r\n    if (!swfVersion || swfVersion.replace(/\\+dev/i, '') !== sm2.versionNumber.replace(/\\+dev/i, '')) {\r\n\r\n      e = sm + ': Fatal: JavaScript file build \"' + sm2.versionNumber + '\" does not match Flash SWF build \"' + swfVersion + '\" at ' + sm2.url + '. Ensure both are up-to-date.';\r\n\r\n      // escape flash -> JS stack so this error fires in window.\r\n      setTimeout(function() {\r\n        throw new Error(e);\r\n      }, 0);\r\n\r\n      // exit, init will fail with timeout\r\n      return;\r\n\r\n    }\r\n    // </d>\r\n\r\n    // IE needs a larger timeout\r\n    setTimeout(init, isIE ? 100 : 1);\r\n\r\n  };\r\n\r\n  /**\r\n   * Private initialization helpers\r\n   * ------------------------------\r\n   */\r\n\r\n  createMovie = function(movieID, movieURL) {\r\n\r\n    // ignore if already connected\r\n    if (didAppend && appendSuccess) return false;\r\n\r\n    function initMsg() {\r\n\r\n      // <d>\r\n\r\n      var options = [],\r\n          title,\r\n          msg = [],\r\n          delimiter = ' + ';\r\n\r\n      title = 'SoundManager ' + sm2.version + (!sm2.html5Only && sm2.useHTML5Audio ? (sm2.hasHTML5 ? ' + HTML5 audio' : ', no HTML5 audio support') : '');\r\n\r\n      if (!sm2.html5Only) {\r\n\r\n        if (sm2.preferFlash) {\r\n          options.push('preferFlash');\r\n        }\r\n\r\n        if (sm2.useHighPerformance) {\r\n          options.push('useHighPerformance');\r\n        }\r\n\r\n        if (sm2.flashPollingInterval) {\r\n          options.push('flashPollingInterval (' + sm2.flashPollingInterval + 'ms)');\r\n        }\r\n\r\n        if (sm2.html5PollingInterval) {\r\n          options.push('html5PollingInterval (' + sm2.html5PollingInterval + 'ms)');\r\n        }\r\n\r\n        if (sm2.wmode) {\r\n          options.push('wmode (' + sm2.wmode + ')');\r\n        }\r\n\r\n        if (sm2.debugFlash) {\r\n          options.push('debugFlash');\r\n        }\r\n\r\n        if (sm2.useFlashBlock) {\r\n          options.push('flashBlock');\r\n        }\r\n\r\n      } else if (sm2.html5PollingInterval) {\r\n          options.push('html5PollingInterval (' + sm2.html5PollingInterval + 'ms)');\r\n        }\r\n\r\n      if (options.length) {\r\n        msg = msg.concat([options.join(delimiter)]);\r\n      }\r\n\r\n      sm2._wD(title + (msg.length ? delimiter + msg.join(', ') : ''), 1);\r\n\r\n      showSupport();\r\n\r\n      // </d>\r\n\r\n    }\r\n\r\n    if (sm2.html5Only) {\r\n\r\n      // 100% HTML5 mode\r\n      setVersionInfo();\r\n\r\n      initMsg();\r\n      sm2.oMC = id(sm2.movieID);\r\n      init();\r\n\r\n      // prevent multiple init attempts\r\n      didAppend = true;\r\n\r\n      appendSuccess = true;\r\n\r\n      return false;\r\n\r\n    }\r\n\r\n    // flash path\r\n    var remoteURL = (movieURL || sm2.url),\r\n    localURL = (sm2.altURL || remoteURL),\r\n    swfTitle = 'JS/Flash audio component (SoundManager 2)',\r\n    oTarget = getDocument(),\r\n    extraClass = getSWFCSS(),\r\n    isRTL = null,\r\n    html = doc.getElementsByTagName('html')[0],\r\n    oEmbed, oMovie, tmp, movieHTML, oEl, s, x, sClass;\r\n\r\n    isRTL = (html && html.dir && html.dir.match(/rtl/i));\r\n    movieID = (movieID === _undefined ? sm2.id : movieID);\r\n\r\n    function param(name, value) {\r\n      return '<param name=\"' + name + '\" value=\"' + value + '\" />';\r\n    }\r\n\r\n    // safety check for legacy (change to Flash 9 URL)\r\n    setVersionInfo();\r\n    sm2.url = normalizeMovieURL(overHTTP ? remoteURL : localURL);\r\n    movieURL = sm2.url;\r\n\r\n    sm2.wmode = (!sm2.wmode && sm2.useHighPerformance ? 'transparent' : sm2.wmode);\r\n\r\n    if (sm2.wmode !== null && (ua.match(/msie 8/i) || (!isIE && !sm2.useHighPerformance)) && navigator.platform.match(/win32|win64/i)) {\r\n      /**\r\n       * extra-special case: movie doesn't load until scrolled into view when using wmode = anything but 'window' here\r\n       * does not apply when using high performance (position:fixed means on-screen), OR infinite flash load timeout\r\n       * wmode breaks IE 8 on Vista + Win7 too in some cases, as of January 2011 (?)\r\n       */\r\n      messages.push(strings.spcWmode);\r\n      sm2.wmode = null;\r\n    }\r\n\r\n    oEmbed = {\r\n      name: movieID,\r\n      id: movieID,\r\n      src: movieURL,\r\n      quality: 'high',\r\n      allowScriptAccess: sm2.allowScriptAccess,\r\n      bgcolor: sm2.bgColor,\r\n      pluginspage: http + 'www.macromedia.com/go/getflashplayer',\r\n      title: swfTitle,\r\n      type: 'application/x-shockwave-flash',\r\n      wmode: sm2.wmode,\r\n      // http://help.adobe.com/en_US/as3/mobile/WS4bebcd66a74275c36cfb8137124318eebc6-7ffd.html\r\n      hasPriority: 'true'\r\n    };\r\n\r\n    if (sm2.debugFlash) {\r\n      oEmbed.FlashVars = 'debug=1';\r\n    }\r\n\r\n    if (!sm2.wmode) {\r\n      // don't write empty attribute\r\n      delete oEmbed.wmode;\r\n    }\r\n\r\n    if (isIE) {\r\n\r\n      // IE is \"special\".\r\n      oMovie = doc.createElement('div');\r\n      movieHTML = [\r\n        '<object id=\"' + movieID + '\" data=\"' + movieURL + '\" type=\"' + oEmbed.type + '\" title=\"' + oEmbed.title + '\" classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" codebase=\"http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\">',\r\n        param('movie', movieURL),\r\n        param('AllowScriptAccess', sm2.allowScriptAccess),\r\n        param('quality', oEmbed.quality),\r\n        (sm2.wmode ? param('wmode', sm2.wmode) : ''),\r\n        param('bgcolor', sm2.bgColor),\r\n        param('hasPriority', 'true'),\r\n        (sm2.debugFlash ? param('FlashVars', oEmbed.FlashVars) : ''),\r\n        '</object>'\r\n      ].join('');\r\n\r\n    } else {\r\n\r\n      oMovie = doc.createElement('embed');\r\n      for (tmp in oEmbed) {\r\n        if (oEmbed.hasOwnProperty(tmp)) {\r\n          oMovie.setAttribute(tmp, oEmbed[tmp]);\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    initDebug();\r\n    extraClass = getSWFCSS();\r\n    oTarget = getDocument();\r\n\r\n    if (oTarget) {\r\n\r\n      sm2.oMC = (id(sm2.movieID) || doc.createElement('div'));\r\n\r\n      if (!sm2.oMC.id) {\r\n\r\n        sm2.oMC.id = sm2.movieID;\r\n        sm2.oMC.className = swfCSS.swfDefault + ' ' + extraClass;\r\n        s = null;\r\n        oEl = null;\r\n\r\n        if (!sm2.useFlashBlock) {\r\n          if (sm2.useHighPerformance) {\r\n            // on-screen at all times\r\n            s = {\r\n              position: 'fixed',\r\n              width: '8px',\r\n              height: '8px',\r\n              // >= 6px for flash to run fast, >= 8px to start up under Firefox/win32 in some cases. odd? yes.\r\n              bottom: '0px',\r\n              left: '0px',\r\n              overflow: 'hidden'\r\n            };\r\n          } else {\r\n            // hide off-screen, lower priority\r\n            s = {\r\n              position: 'absolute',\r\n              width: '6px',\r\n              height: '6px',\r\n              top: '-9999px',\r\n              left: '-9999px'\r\n            };\r\n            if (isRTL) {\r\n              s.left = Math.abs(parseInt(s.left, 10)) + 'px';\r\n            }\r\n          }\r\n        }\r\n\r\n        if (isWebkit) {\r\n          // soundcloud-reported render/crash fix, safari 5\r\n          sm2.oMC.style.zIndex = 10000;\r\n        }\r\n\r\n        if (!sm2.debugFlash) {\r\n          for (x in s) {\r\n            if (s.hasOwnProperty(x)) {\r\n              sm2.oMC.style[x] = s[x];\r\n            }\r\n          }\r\n        }\r\n\r\n        try {\r\n\r\n          if (!isIE) {\r\n            sm2.oMC.appendChild(oMovie);\r\n          }\r\n\r\n          oTarget.appendChild(sm2.oMC);\r\n\r\n          if (isIE) {\r\n            oEl = sm2.oMC.appendChild(doc.createElement('div'));\r\n            oEl.className = swfCSS.swfBox;\r\n            oEl.innerHTML = movieHTML;\r\n          }\r\n\r\n          appendSuccess = true;\r\n\r\n        } catch(e) {\r\n\r\n          throw new Error(str('domError') + ' \\n' + e.toString());\r\n\r\n        }\r\n\r\n      } else {\r\n\r\n        // SM2 container is already in the document (eg. flashblock use case)\r\n        sClass = sm2.oMC.className;\r\n        sm2.oMC.className = (sClass ? sClass + ' ' : swfCSS.swfDefault) + (extraClass ? ' ' + extraClass : '');\r\n        sm2.oMC.appendChild(oMovie);\r\n\r\n        if (isIE) {\r\n          oEl = sm2.oMC.appendChild(doc.createElement('div'));\r\n          oEl.className = swfCSS.swfBox;\r\n          oEl.innerHTML = movieHTML;\r\n        }\r\n\r\n        appendSuccess = true;\r\n\r\n      }\r\n\r\n    }\r\n\r\n    didAppend = true;\r\n\r\n    initMsg();\r\n\r\n    // sm2._wD(sm + ': Trying to load ' + movieURL + (!overHTTP && sm2.altURL ? ' (alternate URL)' : ''), 1);\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  initMovie = function() {\r\n\r\n    if (sm2.html5Only) {\r\n      createMovie();\r\n      return false;\r\n    }\r\n\r\n    // attempt to get, or create, movie (may already exist)\r\n    if (flash) return false;\r\n\r\n    if (!sm2.url) {\r\n\r\n      /**\r\n       * Something isn't right - we've reached init, but the soundManager url property has not been set.\r\n       * User has not called setup({url: ...}), or has not set soundManager.url (legacy use case) directly before init time.\r\n       * Notify and exit. If user calls setup() with a url: property, init will be restarted as in the deferred loading case.\r\n       */\r\n\r\n       _wDS('noURL');\r\n       return false;\r\n\r\n    }\r\n\r\n    // inline markup case\r\n    flash = sm2.getMovie(sm2.id);\r\n\r\n    if (!flash) {\r\n\r\n      if (!oRemoved) {\r\n\r\n        // try to create\r\n        createMovie(sm2.id, sm2.url);\r\n\r\n      } else {\r\n\r\n        // try to re-append removed movie after reboot()\r\n        if (!isIE) {\r\n          sm2.oMC.appendChild(oRemoved);\r\n        } else {\r\n          sm2.oMC.innerHTML = oRemovedHTML;\r\n        }\r\n\r\n        oRemoved = null;\r\n        didAppend = true;\r\n\r\n      }\r\n\r\n      flash = sm2.getMovie(sm2.id);\r\n\r\n    }\r\n\r\n    if (typeof sm2.oninitmovie === 'function') {\r\n      setTimeout(sm2.oninitmovie, 1);\r\n    }\r\n\r\n    // <d>\r\n    flushMessages();\r\n    // </d>\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  delayWaitForEI = function() {\r\n\r\n    setTimeout(waitForEI, 1000);\r\n\r\n  };\r\n\r\n  rebootIntoHTML5 = function() {\r\n\r\n    // special case: try for a reboot with preferFlash: false, if 100% HTML5 mode is possible and useFlashBlock is not enabled.\r\n\r\n    window.setTimeout(function() {\r\n\r\n      complain(smc + 'useFlashBlock is false, 100% HTML5 mode is possible. Rebooting with preferFlash: false...');\r\n\r\n      sm2.setup({\r\n        preferFlash: false\r\n      }).reboot();\r\n\r\n      // if for some reason you want to detect this case, use an ontimeout() callback and look for html5Only and didFlashBlock == true.\r\n      sm2.didFlashBlock = true;\r\n\r\n      sm2.beginDelayedInit();\r\n\r\n    }, 1);\r\n\r\n  };\r\n\r\n  waitForEI = function() {\r\n\r\n    var p,\r\n        loadIncomplete = false;\r\n\r\n    if (!sm2.url) {\r\n      // No SWF url to load (noURL case) - exit for now. Will be retried when url is set.\r\n      return;\r\n    }\r\n\r\n    if (waitingForEI) {\r\n      return;\r\n    }\r\n\r\n    waitingForEI = true;\r\n    event.remove(window, 'load', delayWaitForEI);\r\n\r\n    if (hasFlash && tryInitOnFocus && !isFocused) {\r\n      // Safari won't load flash in background tabs, only when focused.\r\n      _wDS('waitFocus');\r\n      return;\r\n    }\r\n\r\n    if (!didInit) {\r\n      p = sm2.getMoviePercent();\r\n      if (p > 0 && p < 100) {\r\n        loadIncomplete = true;\r\n      }\r\n    }\r\n\r\n    setTimeout(function() {\r\n\r\n      p = sm2.getMoviePercent();\r\n\r\n      if (loadIncomplete) {\r\n        // special case: if movie *partially* loaded, retry until it's 100% before assuming failure.\r\n        waitingForEI = false;\r\n        sm2._wD(str('waitSWF'));\r\n        window.setTimeout(delayWaitForEI, 1);\r\n        return;\r\n      }\r\n\r\n      // <d>\r\n      if (!didInit) {\r\n\r\n        sm2._wD(sm + ': No Flash response within expected time. Likely causes: ' + (p === 0 ? 'SWF load failed, ' : '') + 'Flash blocked or JS-Flash security error.' + (sm2.debugFlash ? ' ' + str('checkSWF') : ''), 2);\r\n\r\n        if (!overHTTP && p) {\r\n\r\n          _wDS('localFail', 2);\r\n\r\n          if (!sm2.debugFlash) {\r\n            _wDS('tryDebug', 2);\r\n          }\r\n\r\n        }\r\n\r\n        if (p === 0) {\r\n\r\n          // if 0 (not null), probably a 404.\r\n          sm2._wD(str('swf404', sm2.url), 1);\r\n\r\n        }\r\n\r\n        debugTS('flashtojs', false, ': Timed out' + (overHTTP ? ' (Check flash security or flash blockers)' : ' (No plugin/missing SWF?)'));\r\n\r\n      }\r\n      // </d>\r\n\r\n      // give up / time-out, depending\r\n\r\n      if (!didInit && okToDisable) {\r\n\r\n        if (p === null) {\r\n\r\n          // SWF failed to report load progress. Possibly blocked.\r\n\r\n          if (sm2.useFlashBlock || sm2.flashLoadTimeout === 0) {\r\n\r\n            if (sm2.useFlashBlock) {\r\n\r\n              flashBlockHandler();\r\n\r\n            }\r\n\r\n            _wDS('waitForever');\r\n\r\n          } else if (!sm2.useFlashBlock && canIgnoreFlash) {\r\n\r\n            // no custom flash block handling, but SWF has timed out. Will recover if user unblocks / allows SWF load.\r\n            rebootIntoHTML5();\r\n\r\n          } else {\r\n\r\n            _wDS('waitForever');\r\n\r\n            // fire any regular registered ontimeout() listeners.\r\n            processOnEvents({\r\n              type: 'ontimeout',\r\n              ignoreInit: true,\r\n              error: {\r\n                type: 'INIT_FLASHBLOCK'\r\n              }\r\n            });\r\n\r\n          }\r\n\r\n        } else if (sm2.flashLoadTimeout === 0) {\r\n\r\n          // SWF loaded? Shouldn't be a blocking issue, then.\r\n\r\n          _wDS('waitForever');\r\n\r\n        } else if (!sm2.useFlashBlock && canIgnoreFlash) {\r\n\r\n          rebootIntoHTML5();\r\n\r\n        } else {\r\n\r\n          failSafely(true);\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }, sm2.flashLoadTimeout);\r\n\r\n  };\r\n\r\n  handleFocus = function() {\r\n\r\n    function cleanup() {\r\n      event.remove(window, 'focus', handleFocus);\r\n    }\r\n\r\n    if (isFocused || !tryInitOnFocus) {\r\n      // already focused, or not special Safari background tab case\r\n      cleanup();\r\n      return true;\r\n    }\r\n\r\n    okToDisable = true;\r\n    isFocused = true;\r\n    _wDS('gotFocus');\r\n\r\n    // allow init to restart\r\n    waitingForEI = false;\r\n\r\n    // kick off ExternalInterface timeout, now that the SWF has started\r\n    delayWaitForEI();\r\n\r\n    cleanup();\r\n    return true;\r\n\r\n  };\r\n\r\n  flushMessages = function() {\r\n\r\n    // <d>\r\n\r\n    // SM2 pre-init debug messages\r\n    if (messages.length) {\r\n      sm2._wD('SoundManager 2: ' + messages.join(' '), 1);\r\n      messages = [];\r\n    }\r\n\r\n    // </d>\r\n\r\n  };\r\n\r\n  showSupport = function() {\r\n\r\n    // <d>\r\n\r\n    flushMessages();\r\n\r\n    var item, tests = [];\r\n\r\n    if (sm2.useHTML5Audio && sm2.hasHTML5) {\r\n      for (item in sm2.audioFormats) {\r\n        if (sm2.audioFormats.hasOwnProperty(item)) {\r\n          tests.push(item + ' = ' + sm2.html5[item] + (!sm2.html5[item] && needsFlash && sm2.flash[item] ? ' (using flash)' : (sm2.preferFlash && sm2.flash[item] && needsFlash ? ' (preferring flash)' : (!sm2.html5[item] ? ' (' + (sm2.audioFormats[item].required ? 'required, ' : '') + 'and no flash support)' : ''))));\r\n        }\r\n      }\r\n      sm2._wD('SoundManager 2 HTML5 support: ' + tests.join(', '), 1);\r\n    }\r\n\r\n    // </d>\r\n\r\n  };\r\n\r\n  initComplete = function(bNoDisable) {\r\n\r\n    if (didInit) return false;\r\n\r\n    if (sm2.html5Only) {\r\n      // all good.\r\n      _wDS('sm2Loaded', 1);\r\n      didInit = true;\r\n      initUserOnload();\r\n      debugTS('onload', true);\r\n      return true;\r\n    }\r\n\r\n    var wasTimeout = (sm2.useFlashBlock && sm2.flashLoadTimeout && !sm2.getMoviePercent()),\r\n        result = true,\r\n        error;\r\n\r\n    if (!wasTimeout) {\r\n      didInit = true;\r\n    }\r\n\r\n    error = {\r\n      type: (!hasFlash && needsFlash ? 'NO_FLASH' : 'INIT_TIMEOUT')\r\n    };\r\n\r\n    sm2._wD('SoundManager 2 ' + (disabled ? 'failed to load' : 'loaded') + ' (' + (disabled ? 'Flash security/load error' : 'OK') + ') ' + String.fromCharCode(disabled ? 10006 : 10003), disabled ? 2 : 1);\r\n\r\n    if (disabled || bNoDisable) {\r\n\r\n      if (sm2.useFlashBlock && sm2.oMC) {\r\n        sm2.oMC.className = getSWFCSS() + ' ' + (sm2.getMoviePercent() === null ? swfCSS.swfTimedout : swfCSS.swfError);\r\n      }\r\n\r\n      processOnEvents({\r\n        type: 'ontimeout',\r\n        error: error,\r\n        ignoreInit: true\r\n      });\r\n\r\n      debugTS('onload', false);\r\n      catchError(error);\r\n\r\n      result = false;\r\n\r\n    } else {\r\n\r\n      debugTS('onload', true);\r\n\r\n    }\r\n\r\n    if (!disabled) {\r\n\r\n      if (sm2.waitForWindowLoad && !windowLoaded) {\r\n\r\n        _wDS('waitOnload');\r\n        event.add(window, 'load', initUserOnload);\r\n\r\n      } else {\r\n\r\n        // <d>\r\n        if (sm2.waitForWindowLoad && windowLoaded) {\r\n          _wDS('docLoaded');\r\n        }\r\n        // </d>\r\n\r\n        initUserOnload();\r\n\r\n      }\r\n\r\n    }\r\n\r\n    return result;\r\n\r\n  };\r\n\r\n  /**\r\n   * apply top-level setupOptions object as local properties, eg., this.setupOptions.flashVersion -> this.flashVersion (soundManager.flashVersion)\r\n   * this maintains backward compatibility, and allows properties to be defined separately for use by soundManager.setup().\r\n   */\r\n\r\n  setProperties = function() {\r\n\r\n    var i,\r\n        o = sm2.setupOptions;\r\n\r\n    for (i in o) {\r\n\r\n      if (o.hasOwnProperty(i)) {\r\n\r\n        // assign local property if not already defined\r\n\r\n        if (sm2[i] === _undefined) {\r\n\r\n          sm2[i] = o[i];\r\n\r\n        } else if (sm2[i] !== o[i]) {\r\n\r\n          // legacy support: write manually-assigned property (eg., soundManager.url) back to setupOptions to keep things in sync\r\n          sm2.setupOptions[i] = sm2[i];\r\n\r\n        }\r\n\r\n      }\r\n\r\n    }\r\n\r\n  };\r\n\r\n\r\n  init = function() {\r\n\r\n    // called after onload()\r\n\r\n    if (didInit) {\r\n      _wDS('didInit');\r\n      return false;\r\n    }\r\n\r\n    function cleanup() {\r\n      event.remove(window, 'load', sm2.beginDelayedInit);\r\n    }\r\n\r\n    if (sm2.html5Only) {\r\n\r\n      if (!didInit) {\r\n        // we don't need no steenking flash!\r\n        cleanup();\r\n        sm2.enabled = true;\r\n        initComplete();\r\n      }\r\n\r\n      return true;\r\n\r\n    }\r\n\r\n    // flash path\r\n    initMovie();\r\n\r\n    try {\r\n\r\n      // attempt to talk to Flash\r\n      flash._externalInterfaceTest(false);\r\n\r\n      /**\r\n       * Apply user-specified polling interval, OR, if \"high performance\" set, faster vs. default polling\r\n       * (determines frequency of whileloading/whileplaying callbacks, effectively driving UI framerates)\r\n       */\r\n      setPolling(true, (sm2.flashPollingInterval || (sm2.useHighPerformance ? 10 : 50)));\r\n\r\n      if (!sm2.debugMode) {\r\n        // stop the SWF from making debug output calls to JS\r\n        flash._disableDebug();\r\n      }\r\n\r\n      sm2.enabled = true;\r\n      debugTS('jstoflash', true);\r\n\r\n      if (!sm2.html5Only) {\r\n        // prevent browser from showing cached page state (or rather, restoring \"suspended\" page state) via back button, because flash may be dead\r\n        // http://www.webkit.org/blog/516/webkit-page-cache-ii-the-unload-event/\r\n        event.add(window, 'unload', doNothing);\r\n      }\r\n\r\n    } catch(e) {\r\n\r\n      sm2._wD('js/flash exception: ' + e.toString());\r\n\r\n      debugTS('jstoflash', false);\r\n\r\n      catchError({\r\n        type: 'JS_TO_FLASH_EXCEPTION',\r\n        fatal: true\r\n      });\r\n\r\n      // don't disable, for reboot()\r\n      failSafely(true);\r\n\r\n      initComplete();\r\n\r\n      return false;\r\n\r\n    }\r\n\r\n    initComplete();\r\n\r\n    // disconnect events\r\n    cleanup();\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  domContentLoaded = function() {\r\n\r\n    if (didDCLoaded) return false;\r\n\r\n    didDCLoaded = true;\r\n\r\n    // assign top-level soundManager properties eg. soundManager.url\r\n    setProperties();\r\n\r\n    initDebug();\r\n\r\n    if (!hasFlash && sm2.hasHTML5) {\r\n\r\n      sm2._wD('SoundManager 2: No Flash detected' + (!sm2.useHTML5Audio ? ', enabling HTML5.' : '. Trying HTML5-only mode.'), 1);\r\n\r\n      sm2.setup({\r\n        useHTML5Audio: true,\r\n        // make sure we aren't preferring flash, either\r\n        // TODO: preferFlash should not matter if flash is not installed. Currently, stuff breaks without the below tweak.\r\n        preferFlash: false\r\n      });\r\n\r\n    }\r\n\r\n    testHTML5();\r\n\r\n    if (!hasFlash && needsFlash) {\r\n\r\n      messages.push(strings.needFlash);\r\n\r\n      // TODO: Fatal here vs. timeout approach, etc.\r\n      // hack: fail sooner.\r\n      sm2.setup({\r\n        flashLoadTimeout: 1\r\n      });\r\n\r\n    }\r\n\r\n    if (doc.removeEventListener) {\r\n      doc.removeEventListener('DOMContentLoaded', domContentLoaded, false);\r\n    }\r\n\r\n    initMovie();\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  domContentLoadedIE = function() {\r\n\r\n    if (doc.readyState === 'complete') {\r\n      domContentLoaded();\r\n      doc.detachEvent('onreadystatechange', domContentLoadedIE);\r\n    }\r\n\r\n    return true;\r\n\r\n  };\r\n\r\n  winOnLoad = function() {\r\n\r\n    // catch edge case of initComplete() firing after window.load()\r\n    windowLoaded = true;\r\n\r\n    // catch case where DOMContentLoaded has been sent, but we're still in doc.readyState = 'interactive'\r\n    domContentLoaded();\r\n\r\n    event.remove(window, 'load', winOnLoad);\r\n\r\n  };\r\n\r\n  // sniff up-front\r\n  detectFlash();\r\n\r\n  // focus and window load, init (primarily flash-driven)\r\n  event.add(window, 'focus', handleFocus);\r\n  event.add(window, 'load', delayWaitForEI);\r\n  event.add(window, 'load', winOnLoad);\r\n\r\n  if (doc.addEventListener) {\r\n\r\n    doc.addEventListener('DOMContentLoaded', domContentLoaded, false);\r\n\r\n  } else if (doc.attachEvent) {\r\n\r\n    doc.attachEvent('onreadystatechange', domContentLoadedIE);\r\n\r\n  } else {\r\n\r\n    // no add/attachevent support - safe to assume no JS -> Flash either\r\n    debugTS('onload', false);\r\n    catchError({\r\n      type: 'NO_DOM2_EVENTS',\r\n      fatal: true\r\n    });\r\n\r\n  }\r\n\r\n} // SoundManager()\r\n\r\n// SM2_DEFER details: http://www.schillmania.com/projects/soundmanager2/doc/getstarted/#lazy-loading\r\n\r\nif (window.SM2_DEFER === _undefined || !SM2_DEFER) {\r\n  soundManager = new SoundManager();\r\n}\r\n\r\n/**\r\n * SoundManager public interfaces\r\n * ------------------------------\r\n */\r\n\r\nif (typeof module === 'object' && module && typeof module.exports === 'object') {\r\n\r\n  /**\r\n   * commonJS module\r\n   */\r\n\r\n  module.exports.SoundManager = SoundManager;\r\n  module.exports.soundManager = soundManager;\r\n\r\n} else if (typeof define === 'function' && define.amd) {\r\n\r\n  /**\r\n   * AMD - requireJS\r\n   * basic usage:\r\n   * require([\"/path/to/soundmanager2.js\"], function(SoundManager) {\r\n   *   SoundManager.getInstance().setup({\r\n   *     url: '/swf/',\r\n   *     onready: function() { ... }\r\n   *   })\r\n   * });\r\n   *\r\n   * SM2_DEFER usage:\r\n   * window.SM2_DEFER = true;\r\n   * require([\"/path/to/soundmanager2.js\"], function(SoundManager) {\r\n   *   SoundManager.getInstance(function() {\r\n   *     var soundManager = new SoundManager.constructor();\r\n   *     soundManager.setup({\r\n   *       url: '/swf/',\r\n   *       ...\r\n   *     });\r\n   *     ...\r\n   *     soundManager.beginDelayedInit();\r\n   *     return soundManager;\r\n   *   })\r\n   * });\r\n   */\r\n\r\n  define(function() {\r\n    /**\r\n     * Retrieve the global instance of SoundManager.\r\n     * If a global instance does not exist it can be created using a callback.\r\n     *\r\n     * @param {Function} smBuilder Optional: Callback used to create a new SoundManager instance\r\n     * @return {SoundManager} The global SoundManager instance\r\n     */\r\n    function getInstance(smBuilder) {\r\n      if (!window.soundManager && smBuilder instanceof Function) {\r\n        var instance = smBuilder(SoundManager);\r\n        if (instance instanceof SoundManager) {\r\n          window.soundManager = instance;\r\n        }\r\n      }\r\n      return window.soundManager;\r\n    }\r\n    return {\r\n      constructor: SoundManager,\r\n      getInstance: getInstance\r\n    };\r\n  });\r\n\r\n}\r\n\r\n// standard browser case\r\n\r\n// constructor\r\nwindow.SoundManager = SoundManager;\r\n\r\n/**\r\n * note: SM2 requires a window global due to Flash, which makes calls to window.soundManager.\r\n * Flash may not always be needed, but this is not known until async init and SM2 may even \"reboot\" into Flash mode.\r\n */\r\n\r\n// public API, flash callbacks etc.\r\nwindow.soundManager = soundManager;\r\n\r\n}(window));\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/soundmanager2/script/soundmanager2.js\n// module id = 437\n// module chunks = 35783957827783","import React, { Component } from 'react'\nimport Sound from 'react-sound'\nimport track from './track.mp3'\n\nclass Player extends Component {\n  constructor() {\n    super()\n    this.handlePlaying = this.handlePlaying.bind(this)\n  }\n\n  handlePlaying({ position, duration }) {\n    console.log(position)\n  }\n\n  render() {\n    return(\n      <Sound\n        onPlaying={this.handlePlaying}\n        url={track}\n        playStatus={'PAUSE'}\n      />\n    )\n  }\n}\n\nexport default Player\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Player/index.js","module.exports = __webpack_public_path__ + \"static/track.faee83f9.mp3\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Player/track.mp3\n// module id = 458\n// module chunks = 35783957827783","import React from 'react'\n\nconst Slider = () => (\n  <div />\n)\n\nexport default Slider\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/Slider.js","import React from 'react'\nimport styled from 'styled-components'\n\nimport Section from '../components/Section'\n\nimport RadioMegaLogo from './radio-mega-logo.png'\n\nconst Div = styled.div`\n  display: flex;\n`\n\nconst P = styled.p`\n  padding-left: 1em;\n`\n\nconst Img = styled.img`\n  filter: invert(1);\n`\n\nconst LaRadio = () => (\n  <Section\n    title=\"La radio\"\n    background=\"black\"\n    color=\"white\"\n    align=\"right\"\n    id=\"la-radio\"\n  >\n    <Div>\n\n      <Img src={RadioMegaLogo} alt=\"Radio Mega Logo\" />\n      <P>\n        Ut dapibus ligula eget facilisis efficitur. Morbi dolor est, suscipit at neque quis, cursus fermentum urna. In bibendum eu tellus quis bibendum. Sed accumsan massa vel lectus consectetur, vel blandit massa convallis. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nam sodales est lectus. Pellentesque scelerisque sodales eros, vel porttitor ex. Vivamus eu lectus sem. In suscipit nibh non metus lacinia, nec gravida nibh placerat. Nam nec venenatis lorem. Morbi arcu orci, scelerisque sed bibendum quis, dictum vitae massa. Morbi pulvinar laoreet nulla.\n      </P>\n    </Div>\n  </Section>\n)\n\nexport default LaRadio\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/LaRadio.js","import React from 'react'\nimport styled from 'styled-components'\nimport Section from '../components/Section'\n\nimport Portrait from './laurent-galandon.jpg'\n\nconst Img = styled.img`\n  display: block;\n  border-radius: 2px;\n  width: 50vw;\n  height: auto;\n  max-width: 260px;\n  box-shadow: 0 0 30px rgba(0,0,0,.2);\n`\n\nconst Div = styled.div`\n  display: flex;\n`\n\nconst P = styled.p`\n  padding-left: 1em;\n`\n\nconst LaurentGalandon = () => (\n  <Section\n    title=\"Laurent Galandon\"\n    background=\"rebeccaPurple\"\n    id=\"laurent-galandon\"\n    color=\"#fafafa\"\n    align=\"left\"\n  >\n    <Div>\n      <Img src={Portrait} alt=\"Laurent Galandon\" />\n      <P>\n        Ut dapibus ligula eget facilisis efficitur. Morbi dolor est, suscipit at neque quis, cursus fermentum urna. In bibendum eu tellus quis bibendum. Sed accumsan massa vel lectus consectetur, vel blandit massa convallis. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Nam sodales est lectus. Pellentesque scelerisque sodales eros, vel porttitor ex. Vivamus eu lectus sem. In suscipit nibh non metus lacinia, nec gravida nibh placerat. Nam nec venenatis lorem. Morbi arcu orci, scelerisque sed bibendum quis, dictum vitae massa. Morbi pulvinar laoreet nulla.\n      </P>\n    </Div>\n\t</Section>\n)\n\nexport default LaurentGalandon\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/LaurentGalandon.js","import React from 'react'\nimport styled from 'styled-components'\n\nimport Section from '../components/Section'\n\nconst P = styled.p`\n  column-count: 2;\n`\n\nconst LeProjet = () => (\n    <Section\n      title=\"Le projet\"\n      background=\"white\"\n      color=\"#e5763d\"\n      id=\"le-projet\"\n    >\n      <P>\n        Aenean lobortis velit eros, sit amet consectetur lectus bibendum sit amet. Curabitur ut vulputate est. Nam vel luctus leo. Nam sollicitudin volutpat mi, id tempor turpis bibendum vitae. Aliquam imperdiet quam sed justo interdum cursus. Sed eu nulla ipsum. Cras fermentum scelerisque eleifend. Ut feugiat ipsum ut eros lobortis, volutpat elementum nulla tempus. <br />\n        Integer vel augue sed magna pulvinar maximus. Donec non laoreet massa, vel facilisis urna. Ut gravida risus sapien, sit amet euismod velit pulvinar at. Praesent varius lorem gravida maximus hendrerit. Etiam lacinia ligula ut est consequat auctor. Cras in vestibulum sapien, quis pretium arcu. In dignissim vestibulum nulla eu faucibus.\n      </P>\n    </Section>\n)\n\nexport default LeProjet\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/LeProjet.js","import React from 'react'\nimport styled from 'styled-components'\n\nimport Section from '../components/Section'\n\nimport ActeurPic from './acteur.jpg'\n\nconst data = [\n  {\n    name: 'name',\n    description: 'n semper turpis vel cursus luctus. Suspendisse tincidunt egestas quam, eget sodales felis faucibus scelerisque. Suspendisse pulvinar accumsan ',\n    image: ActeurPic,\n  },\n  {\n    name: 'name',\n    description: 'n semper turpis vel cursus luctus. Suspendisse tincidunt egestas quam, eget sodales felis faucibus scelerisque. Suspendisse pulvinar accumsan ',\n    image: ActeurPic,\n  },\n  {\n    name: 'name',\n    description: 'n semper turpis vel cursus luctus. Suspendisse tincidunt egestas quam, eget sodales felis faucibus scelerisque. Suspendisse pulvinar accumsan ',\n    image: ActeurPic,\n  },\n  {\n    name: 'name',\n    description: 'n semper turpis vel cursus luctus. Suspendisse tincidunt egestas quam, eget sodales felis faucibus scelerisque. Suspendisse pulvinar accumsan ',\n    image: ActeurPic,\n  }\n]\n\nconst Img = styled.img`\n  border-radius: 50%;\n`\n\nconst Acteur = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-right: .5em;\n  width: 100%/${props => props.width};\n`\n\nconst Name = styled.h3`\n  text-transform: uppercase;\n  margin-bottom: 0.5rem;\n`\n\nconst Acteurs = styled.div`\n  display: flex;\n`\n\nconst LesActeurs = () => (\n  <Section\n    title=\"Les acteurs\"\n    background=\"white\"\n    id=\"les-acteurs\"\n    align=\"left\"\n  >\n    <Acteurs>\n      {data.map(({ name, description, image }) =>\n        <Acteur width={data.length}>\n          <Name>{name}</Name>\n          <img src={image} alt={name} />\n          <p>{description}</p>\n        </Acteur>\n      )}\n    </Acteurs>\n  </Section>\n)\n\nexport default LesActeurs\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/LesActeurs.js","module.exports = __webpack_public_path__ + \"static/acteur.65b6c1e8.jpg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/acteur.jpg\n// module id = 120\n// module chunks = 27162977937149 35783957827783","module.exports = __webpack_public_path__ + \"static/cover.bdb6f42a.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/cover.png\n// module id = 460\n// module chunks = 35783957827783","import React from 'react'\nimport Link from 'gatsby-link'\nimport styled from 'styled-components'\n// import { Wave } from 'balekomponents'\n\nimport Section from '../components/Section'\nimport Player from '../components/Player'\nimport Slider from '../components/Slider'\nimport Cover from './cover.png'\n\nimport LaurentGalandon from './LaurentGalandon'\nimport LaRadio from './LaRadio'\nimport LeProjet from './LeProjet'\nimport LesActeurs from './LesActeurs'\n\nconst Div = styled.div`\n  height: 100vh;\n`\n\nconst H1 = styled.h1`\n  margin: 0;\n  font-weight: 900;\n  color: #b6c135;\n  font-size: 150px;\n  text-shadow: 0em 0em 10px rgba(0,0,0,0.2);\n  font-family: Cyclone;\n`\n\nconst IndexPage = () => (\n  <div>\n    <Section>\n      <H1>\n        Interferences\n      </H1>\n    </Section>\n\n    <Section\n      title=\"La fiction\"\n      id=\"la-fiction\"\n    >\n      <Player />\n    </Section>\n    <LeProjet />\n    <LaurentGalandon />\n    <LaRadio />\n    <LesActeurs />\n\n    <Section\n      title=\"Les partenaires\"\n      id=\"les-partenaires\"\n    />\n  </div>\n)\n\nexport default IndexPage\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/index.js","module.exports = __webpack_public_path__ + \"static/laurent-galandon.fe31adcb.jpg\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/laurent-galandon.jpg\n// module id = 121\n// module chunks = 35783957827783 179121307329026","module.exports = __webpack_public_path__ + \"static/radio-mega-logo.1a8942af.png\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/radio-mega-logo.png\n// module id = 122\n// module chunks = 35783957827783 47673960345471"],"sourceRoot":""}